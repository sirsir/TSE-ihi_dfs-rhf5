'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.34014
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("ihi_rhf5_developmentDataSet"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class ihi_rhf5_developmentDataSet
    Inherits Global.System.Data.DataSet
    
    Private tableLINE_MASTER As LINE_MASTERDataTable
    
    Private tableMACHINE As MACHINEDataTable
    
    Private tableMACHINE_COLUMNS As MACHINE_COLUMNSDataTable
    
    Private tableMACHINE_DATA_STR As MACHINE_DATA_STRDataTable
    
    Private tableRESULT As RESULTDataTable
    
    Private tableSERIAL As SERIALDataTable
    
    Private tableV_SETTING_COLUMNS As V_SETTING_COLUMNSDataTable
    
    Private tableMACHINE_DATA_STR_w_SERIAL As MACHINE_DATA_STR_w_SERIALDataTable
    
    Private tableLOT_PART_w_LOT As LOT_PART_w_LOTDataTable
    
    Private relationFK_MACHINE_LINE_MASTER As Global.System.Data.DataRelation
    
    Private relationFK_MACHINE_COLUMNS_MACHINE As Global.System.Data.DataRelation
    
    Private relationFK_MACHINE_DATA_STR_MACHINE_COLUMNS As Global.System.Data.DataRelation
    
    Private relationFK_MACHINE_DATA_STR_RESULT As Global.System.Data.DataRelation
    
    Private relationFK_RESULT_MACHINE As Global.System.Data.DataRelation
    
    Private relationFK_RESULT_SERIAL As Global.System.Data.DataRelation
    
    Private relationFK_MACHINE_DATA_STR_MACHINE_COLUMNS1 As Global.System.Data.DataRelation
    
    Private relationFK_MACHINE_DATA_STR_MACHINE_COLUMNS2 As Global.System.Data.DataRelation
    
    Private relationFK_MACHINE_DATA_STR_MACHINE_COLUMNS3 As Global.System.Data.DataRelation
    
    Private relationFK_MACHINE_DATA_STR_RESULT1 As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("LINE_MASTER")) Is Nothing) Then
                MyBase.Tables.Add(New LINE_MASTERDataTable(ds.Tables("LINE_MASTER")))
            End If
            If (Not (ds.Tables("MACHINE")) Is Nothing) Then
                MyBase.Tables.Add(New MACHINEDataTable(ds.Tables("MACHINE")))
            End If
            If (Not (ds.Tables("MACHINE_COLUMNS")) Is Nothing) Then
                MyBase.Tables.Add(New MACHINE_COLUMNSDataTable(ds.Tables("MACHINE_COLUMNS")))
            End If
            If (Not (ds.Tables("MACHINE_DATA_STR")) Is Nothing) Then
                MyBase.Tables.Add(New MACHINE_DATA_STRDataTable(ds.Tables("MACHINE_DATA_STR")))
            End If
            If (Not (ds.Tables("RESULT")) Is Nothing) Then
                MyBase.Tables.Add(New RESULTDataTable(ds.Tables("RESULT")))
            End If
            If (Not (ds.Tables("SERIAL")) Is Nothing) Then
                MyBase.Tables.Add(New SERIALDataTable(ds.Tables("SERIAL")))
            End If
            If (Not (ds.Tables("V_SETTING_COLUMNS")) Is Nothing) Then
                MyBase.Tables.Add(New V_SETTING_COLUMNSDataTable(ds.Tables("V_SETTING_COLUMNS")))
            End If
            If (Not (ds.Tables("MACHINE_DATA_STR_w_SERIAL")) Is Nothing) Then
                MyBase.Tables.Add(New MACHINE_DATA_STR_w_SERIALDataTable(ds.Tables("MACHINE_DATA_STR_w_SERIAL")))
            End If
            If (Not (ds.Tables("LOT_PART_w_LOT")) Is Nothing) Then
                MyBase.Tables.Add(New LOT_PART_w_LOTDataTable(ds.Tables("LOT_PART_w_LOT")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property LINE_MASTER() As LINE_MASTERDataTable
        Get
            Return Me.tableLINE_MASTER
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MACHINE() As MACHINEDataTable
        Get
            Return Me.tableMACHINE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MACHINE_COLUMNS() As MACHINE_COLUMNSDataTable
        Get
            Return Me.tableMACHINE_COLUMNS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MACHINE_DATA_STR() As MACHINE_DATA_STRDataTable
        Get
            Return Me.tableMACHINE_DATA_STR
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property RESULT() As RESULTDataTable
        Get
            Return Me.tableRESULT
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SERIAL() As SERIALDataTable
        Get
            Return Me.tableSERIAL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property V_SETTING_COLUMNS() As V_SETTING_COLUMNSDataTable
        Get
            Return Me.tableV_SETTING_COLUMNS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MACHINE_DATA_STR_w_SERIAL() As MACHINE_DATA_STR_w_SERIALDataTable
        Get
            Return Me.tableMACHINE_DATA_STR_w_SERIAL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property LOT_PART_w_LOT() As LOT_PART_w_LOTDataTable
        Get
            Return Me.tableLOT_PART_w_LOT
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As ihi_rhf5_developmentDataSet = CType(MyBase.Clone,ihi_rhf5_developmentDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXml(reader)
            If (Not (ds.Tables("LINE_MASTER")) Is Nothing) Then
                MyBase.Tables.Add(New LINE_MASTERDataTable(ds.Tables("LINE_MASTER")))
            End If
            If (Not (ds.Tables("MACHINE")) Is Nothing) Then
                MyBase.Tables.Add(New MACHINEDataTable(ds.Tables("MACHINE")))
            End If
            If (Not (ds.Tables("MACHINE_COLUMNS")) Is Nothing) Then
                MyBase.Tables.Add(New MACHINE_COLUMNSDataTable(ds.Tables("MACHINE_COLUMNS")))
            End If
            If (Not (ds.Tables("MACHINE_DATA_STR")) Is Nothing) Then
                MyBase.Tables.Add(New MACHINE_DATA_STRDataTable(ds.Tables("MACHINE_DATA_STR")))
            End If
            If (Not (ds.Tables("RESULT")) Is Nothing) Then
                MyBase.Tables.Add(New RESULTDataTable(ds.Tables("RESULT")))
            End If
            If (Not (ds.Tables("SERIAL")) Is Nothing) Then
                MyBase.Tables.Add(New SERIALDataTable(ds.Tables("SERIAL")))
            End If
            If (Not (ds.Tables("V_SETTING_COLUMNS")) Is Nothing) Then
                MyBase.Tables.Add(New V_SETTING_COLUMNSDataTable(ds.Tables("V_SETTING_COLUMNS")))
            End If
            If (Not (ds.Tables("MACHINE_DATA_STR_w_SERIAL")) Is Nothing) Then
                MyBase.Tables.Add(New MACHINE_DATA_STR_w_SERIALDataTable(ds.Tables("MACHINE_DATA_STR_w_SERIAL")))
            End If
            If (Not (ds.Tables("LOT_PART_w_LOT")) Is Nothing) Then
                MyBase.Tables.Add(New LOT_PART_w_LOTDataTable(ds.Tables("LOT_PART_w_LOT")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableLINE_MASTER = CType(MyBase.Tables("LINE_MASTER"),LINE_MASTERDataTable)
        If (initTable = true) Then
            If (Not (Me.tableLINE_MASTER) Is Nothing) Then
                Me.tableLINE_MASTER.InitVars
            End If
        End If
        Me.tableMACHINE = CType(MyBase.Tables("MACHINE"),MACHINEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMACHINE) Is Nothing) Then
                Me.tableMACHINE.InitVars
            End If
        End If
        Me.tableMACHINE_COLUMNS = CType(MyBase.Tables("MACHINE_COLUMNS"),MACHINE_COLUMNSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMACHINE_COLUMNS) Is Nothing) Then
                Me.tableMACHINE_COLUMNS.InitVars
            End If
        End If
        Me.tableMACHINE_DATA_STR = CType(MyBase.Tables("MACHINE_DATA_STR"),MACHINE_DATA_STRDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMACHINE_DATA_STR) Is Nothing) Then
                Me.tableMACHINE_DATA_STR.InitVars
            End If
        End If
        Me.tableRESULT = CType(MyBase.Tables("RESULT"),RESULTDataTable)
        If (initTable = true) Then
            If (Not (Me.tableRESULT) Is Nothing) Then
                Me.tableRESULT.InitVars
            End If
        End If
        Me.tableSERIAL = CType(MyBase.Tables("SERIAL"),SERIALDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSERIAL) Is Nothing) Then
                Me.tableSERIAL.InitVars
            End If
        End If
        Me.tableV_SETTING_COLUMNS = CType(MyBase.Tables("V_SETTING_COLUMNS"),V_SETTING_COLUMNSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableV_SETTING_COLUMNS) Is Nothing) Then
                Me.tableV_SETTING_COLUMNS.InitVars
            End If
        End If
        Me.tableMACHINE_DATA_STR_w_SERIAL = CType(MyBase.Tables("MACHINE_DATA_STR_w_SERIAL"),MACHINE_DATA_STR_w_SERIALDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMACHINE_DATA_STR_w_SERIAL) Is Nothing) Then
                Me.tableMACHINE_DATA_STR_w_SERIAL.InitVars
            End If
        End If
        Me.tableLOT_PART_w_LOT = CType(MyBase.Tables("LOT_PART_w_LOT"),LOT_PART_w_LOTDataTable)
        If (initTable = true) Then
            If (Not (Me.tableLOT_PART_w_LOT) Is Nothing) Then
                Me.tableLOT_PART_w_LOT.InitVars
            End If
        End If
        Me.relationFK_MACHINE_LINE_MASTER = Me.Relations("FK_MACHINE_LINE_MASTER")
        Me.relationFK_MACHINE_COLUMNS_MACHINE = Me.Relations("FK_MACHINE_COLUMNS_MACHINE")
        Me.relationFK_MACHINE_DATA_STR_MACHINE_COLUMNS = Me.Relations("FK_MACHINE_DATA_STR_MACHINE_COLUMNS")
        Me.relationFK_MACHINE_DATA_STR_RESULT = Me.Relations("FK_MACHINE_DATA_STR_RESULT")
        Me.relationFK_RESULT_MACHINE = Me.Relations("FK_RESULT_MACHINE")
        Me.relationFK_RESULT_SERIAL = Me.Relations("FK_RESULT_SERIAL")
        Me.relationFK_MACHINE_DATA_STR_MACHINE_COLUMNS1 = Me.Relations("FK_MACHINE_DATA_STR_MACHINE_COLUMNS1")
        Me.relationFK_MACHINE_DATA_STR_MACHINE_COLUMNS2 = Me.Relations("FK_MACHINE_DATA_STR_MACHINE_COLUMNS2")
        Me.relationFK_MACHINE_DATA_STR_MACHINE_COLUMNS3 = Me.Relations("FK_MACHINE_DATA_STR_MACHINE_COLUMNS3")
        Me.relationFK_MACHINE_DATA_STR_RESULT1 = Me.Relations("FK_MACHINE_DATA_STR_RESULT1")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Sub InitClass()
        Me.DataSetName = "ihi_rhf5_developmentDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/ihi_rhf5_developmentDataSet.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableLINE_MASTER = New LINE_MASTERDataTable()
        MyBase.Tables.Add(Me.tableLINE_MASTER)
        Me.tableMACHINE = New MACHINEDataTable()
        MyBase.Tables.Add(Me.tableMACHINE)
        Me.tableMACHINE_COLUMNS = New MACHINE_COLUMNSDataTable()
        MyBase.Tables.Add(Me.tableMACHINE_COLUMNS)
        Me.tableMACHINE_DATA_STR = New MACHINE_DATA_STRDataTable()
        MyBase.Tables.Add(Me.tableMACHINE_DATA_STR)
        Me.tableRESULT = New RESULTDataTable()
        MyBase.Tables.Add(Me.tableRESULT)
        Me.tableSERIAL = New SERIALDataTable()
        MyBase.Tables.Add(Me.tableSERIAL)
        Me.tableV_SETTING_COLUMNS = New V_SETTING_COLUMNSDataTable()
        MyBase.Tables.Add(Me.tableV_SETTING_COLUMNS)
        Me.tableMACHINE_DATA_STR_w_SERIAL = New MACHINE_DATA_STR_w_SERIALDataTable()
        MyBase.Tables.Add(Me.tableMACHINE_DATA_STR_w_SERIAL)
        Me.tableLOT_PART_w_LOT = New LOT_PART_w_LOTDataTable()
        MyBase.Tables.Add(Me.tableLOT_PART_w_LOT)
        Me.relationFK_MACHINE_LINE_MASTER = New Global.System.Data.DataRelation("FK_MACHINE_LINE_MASTER", New Global.System.Data.DataColumn() {Me.tableLINE_MASTER.IDColumn}, New Global.System.Data.DataColumn() {Me.tableMACHINE.LINE_IDColumn}, false)
        Me.Relations.Add(Me.relationFK_MACHINE_LINE_MASTER)
        Me.relationFK_MACHINE_COLUMNS_MACHINE = New Global.System.Data.DataRelation("FK_MACHINE_COLUMNS_MACHINE", New Global.System.Data.DataColumn() {Me.tableMACHINE.IDColumn}, New Global.System.Data.DataColumn() {Me.tableMACHINE_COLUMNS.MACHINE_IDColumn}, false)
        Me.Relations.Add(Me.relationFK_MACHINE_COLUMNS_MACHINE)
        Me.relationFK_MACHINE_DATA_STR_MACHINE_COLUMNS = New Global.System.Data.DataRelation("FK_MACHINE_DATA_STR_MACHINE_COLUMNS", New Global.System.Data.DataColumn() {Me.tableMACHINE_COLUMNS.IDColumn}, New Global.System.Data.DataColumn() {Me.tableMACHINE_DATA_STR.MACHINE_COLUMNS_IDColumn}, false)
        Me.Relations.Add(Me.relationFK_MACHINE_DATA_STR_MACHINE_COLUMNS)
        Me.relationFK_MACHINE_DATA_STR_RESULT = New Global.System.Data.DataRelation("FK_MACHINE_DATA_STR_RESULT", New Global.System.Data.DataColumn() {Me.tableRESULT.TRAN_IDColumn}, New Global.System.Data.DataColumn() {Me.tableMACHINE_DATA_STR.RESULT_IDColumn}, false)
        Me.Relations.Add(Me.relationFK_MACHINE_DATA_STR_RESULT)
        Me.relationFK_RESULT_MACHINE = New Global.System.Data.DataRelation("FK_RESULT_MACHINE", New Global.System.Data.DataColumn() {Me.tableMACHINE.IDColumn}, New Global.System.Data.DataColumn() {Me.tableRESULT.MACHINE_IDColumn}, false)
        Me.Relations.Add(Me.relationFK_RESULT_MACHINE)
        Me.relationFK_RESULT_SERIAL = New Global.System.Data.DataRelation("FK_RESULT_SERIAL", New Global.System.Data.DataColumn() {Me.tableSERIAL.SERIAL_IDColumn}, New Global.System.Data.DataColumn() {Me.tableRESULT.SERIAL_IDColumn}, false)
        Me.Relations.Add(Me.relationFK_RESULT_SERIAL)
        Me.relationFK_MACHINE_DATA_STR_MACHINE_COLUMNS1 = New Global.System.Data.DataRelation("FK_MACHINE_DATA_STR_MACHINE_COLUMNS1", New Global.System.Data.DataColumn() {Me.tableV_SETTING_COLUMNS.IDColumn}, New Global.System.Data.DataColumn() {Me.tableMACHINE_DATA_STR.MACHINE_COLUMNS_IDColumn}, false)
        Me.Relations.Add(Me.relationFK_MACHINE_DATA_STR_MACHINE_COLUMNS1)
        Me.relationFK_MACHINE_DATA_STR_MACHINE_COLUMNS2 = New Global.System.Data.DataRelation("FK_MACHINE_DATA_STR_MACHINE_COLUMNS2", New Global.System.Data.DataColumn() {Me.tableMACHINE_COLUMNS.IDColumn}, New Global.System.Data.DataColumn() {Me.tableMACHINE_DATA_STR_w_SERIAL.MACHINE_COLUMNS_IDColumn}, false)
        Me.Relations.Add(Me.relationFK_MACHINE_DATA_STR_MACHINE_COLUMNS2)
        Me.relationFK_MACHINE_DATA_STR_MACHINE_COLUMNS3 = New Global.System.Data.DataRelation("FK_MACHINE_DATA_STR_MACHINE_COLUMNS3", New Global.System.Data.DataColumn() {Me.tableV_SETTING_COLUMNS.IDColumn}, New Global.System.Data.DataColumn() {Me.tableMACHINE_DATA_STR_w_SERIAL.MACHINE_COLUMNS_IDColumn}, false)
        Me.Relations.Add(Me.relationFK_MACHINE_DATA_STR_MACHINE_COLUMNS3)
        Me.relationFK_MACHINE_DATA_STR_RESULT1 = New Global.System.Data.DataRelation("FK_MACHINE_DATA_STR_RESULT1", New Global.System.Data.DataColumn() {Me.tableRESULT.TRAN_IDColumn}, New Global.System.Data.DataColumn() {Me.tableMACHINE_DATA_STR_w_SERIAL.RESULT_IDColumn}, false)
        Me.Relations.Add(Me.relationFK_MACHINE_DATA_STR_RESULT1)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeLINE_MASTER() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeMACHINE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeMACHINE_COLUMNS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeMACHINE_DATA_STR() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeRESULT() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeSERIAL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeV_SETTING_COLUMNS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeMACHINE_DATA_STR_w_SERIAL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeLOT_PART_w_LOT() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As ihi_rhf5_developmentDataSet = New ihi_rhf5_developmentDataSet()
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub LINE_MASTERRowChangeEventHandler(ByVal sender As Object, ByVal e As LINE_MASTERRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub MACHINERowChangeEventHandler(ByVal sender As Object, ByVal e As MACHINERowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub MACHINE_COLUMNSRowChangeEventHandler(ByVal sender As Object, ByVal e As MACHINE_COLUMNSRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub MACHINE_DATA_STRRowChangeEventHandler(ByVal sender As Object, ByVal e As MACHINE_DATA_STRRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub RESULTRowChangeEventHandler(ByVal sender As Object, ByVal e As RESULTRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub SERIALRowChangeEventHandler(ByVal sender As Object, ByVal e As SERIALRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub V_SETTING_COLUMNSRowChangeEventHandler(ByVal sender As Object, ByVal e As V_SETTING_COLUMNSRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub MACHINE_DATA_STR_w_SERIALRowChangeEventHandler(ByVal sender As Object, ByVal e As MACHINE_DATA_STR_w_SERIALRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub LOT_PART_w_LOTRowChangeEventHandler(ByVal sender As Object, ByVal e As LOT_PART_w_LOTRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class LINE_MASTERDataTable
        Inherits Global.System.Data.TypedTableBase(Of LINE_MASTERRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnLINE_NAME As Global.System.Data.DataColumn
        
        Private columnSEQ As Global.System.Data.DataColumn
        
        Private columnROOT_PATH As Global.System.Data.DataColumn
        
        Private columnROOT_TEMP As Global.System.Data.DataColumn
        
        Private columnSLEEP_INTERVAL As Global.System.Data.DataColumn
        
        Private columnREAD_ASCII_LENGTH As Global.System.Data.DataColumn
        
        Private columnREAD_BCD_LENGTH As Global.System.Data.DataColumn
        
        Private columnSYNC_TIME_WHEN As Global.System.Data.DataColumn
        
        Private columnUSE_CSV_MODE As Global.System.Data.DataColumn
        
        Private columnUSE_XLS_MODE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "LINE_MASTER"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LINE_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLINE_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SEQColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSEQ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ROOT_PATHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnROOT_PATH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ROOT_TEMPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnROOT_TEMP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SLEEP_INTERVALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSLEEP_INTERVAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property READ_ASCII_LENGTHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREAD_ASCII_LENGTH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property READ_BCD_LENGTHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREAD_BCD_LENGTH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SYNC_TIME_WHENColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSYNC_TIME_WHEN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property USE_CSV_MODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSE_CSV_MODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property USE_XLS_MODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSE_XLS_MODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As LINE_MASTERRow
            Get
                Return CType(Me.Rows(index),LINE_MASTERRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event LINE_MASTERRowChanging As LINE_MASTERRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event LINE_MASTERRowChanged As LINE_MASTERRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event LINE_MASTERRowDeleting As LINE_MASTERRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event LINE_MASTERRowDeleted As LINE_MASTERRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddLINE_MASTERRow(ByVal row As LINE_MASTERRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddLINE_MASTERRow(ByVal LINE_NAME As String, ByVal SEQ As Integer, ByVal ROOT_PATH As String, ByVal ROOT_TEMP As String, ByVal SLEEP_INTERVAL As Integer, ByVal READ_ASCII_LENGTH As Integer, ByVal READ_BCD_LENGTH As Integer, ByVal SYNC_TIME_WHEN As String, ByVal USE_CSV_MODE As Boolean, ByVal USE_XLS_MODE As Boolean) As LINE_MASTERRow
            Dim rowLINE_MASTERRow As LINE_MASTERRow = CType(Me.NewRow,LINE_MASTERRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, LINE_NAME, SEQ, ROOT_PATH, ROOT_TEMP, SLEEP_INTERVAL, READ_ASCII_LENGTH, READ_BCD_LENGTH, SYNC_TIME_WHEN, USE_CSV_MODE, USE_XLS_MODE}
            rowLINE_MASTERRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowLINE_MASTERRow)
            Return rowLINE_MASTERRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByID(ByVal ID As Integer) As LINE_MASTERRow
            Return CType(Me.Rows.Find(New Object() {ID}),LINE_MASTERRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As LINE_MASTERDataTable = CType(MyBase.Clone,LINE_MASTERDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New LINE_MASTERDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnLINE_NAME = MyBase.Columns("LINE_NAME")
            Me.columnSEQ = MyBase.Columns("SEQ")
            Me.columnROOT_PATH = MyBase.Columns("ROOT_PATH")
            Me.columnROOT_TEMP = MyBase.Columns("ROOT_TEMP")
            Me.columnSLEEP_INTERVAL = MyBase.Columns("SLEEP_INTERVAL")
            Me.columnREAD_ASCII_LENGTH = MyBase.Columns("READ_ASCII_LENGTH")
            Me.columnREAD_BCD_LENGTH = MyBase.Columns("READ_BCD_LENGTH")
            Me.columnSYNC_TIME_WHEN = MyBase.Columns("SYNC_TIME_WHEN")
            Me.columnUSE_CSV_MODE = MyBase.Columns("USE_CSV_MODE")
            Me.columnUSE_XLS_MODE = MyBase.Columns("USE_XLS_MODE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnLINE_NAME = New Global.System.Data.DataColumn("LINE_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLINE_NAME)
            Me.columnSEQ = New Global.System.Data.DataColumn("SEQ", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSEQ)
            Me.columnROOT_PATH = New Global.System.Data.DataColumn("ROOT_PATH", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnROOT_PATH)
            Me.columnROOT_TEMP = New Global.System.Data.DataColumn("ROOT_TEMP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnROOT_TEMP)
            Me.columnSLEEP_INTERVAL = New Global.System.Data.DataColumn("SLEEP_INTERVAL", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSLEEP_INTERVAL)
            Me.columnREAD_ASCII_LENGTH = New Global.System.Data.DataColumn("READ_ASCII_LENGTH", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREAD_ASCII_LENGTH)
            Me.columnREAD_BCD_LENGTH = New Global.System.Data.DataColumn("READ_BCD_LENGTH", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREAD_BCD_LENGTH)
            Me.columnSYNC_TIME_WHEN = New Global.System.Data.DataColumn("SYNC_TIME_WHEN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSYNC_TIME_WHEN)
            Me.columnUSE_CSV_MODE = New Global.System.Data.DataColumn("USE_CSV_MODE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSE_CSV_MODE)
            Me.columnUSE_XLS_MODE = New Global.System.Data.DataColumn("USE_XLS_MODE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSE_XLS_MODE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AutoIncrementSeed = -1
            Me.columnID.AutoIncrementStep = -1
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnLINE_NAME.AllowDBNull = false
            Me.columnLINE_NAME.MaxLength = 50
            Me.columnSEQ.AllowDBNull = false
            Me.columnROOT_PATH.AllowDBNull = false
            Me.columnROOT_PATH.MaxLength = 255
            Me.columnROOT_TEMP.AllowDBNull = false
            Me.columnROOT_TEMP.MaxLength = 255
            Me.columnSLEEP_INTERVAL.AllowDBNull = false
            Me.columnREAD_ASCII_LENGTH.AllowDBNull = false
            Me.columnREAD_BCD_LENGTH.AllowDBNull = false
            Me.columnSYNC_TIME_WHEN.AllowDBNull = false
            Me.columnSYNC_TIME_WHEN.MaxLength = 10
            Me.columnUSE_CSV_MODE.AllowDBNull = false
            Me.columnUSE_XLS_MODE.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewLINE_MASTERRow() As LINE_MASTERRow
            Return CType(Me.NewRow,LINE_MASTERRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New LINE_MASTERRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(LINE_MASTERRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.LINE_MASTERRowChangedEvent) Is Nothing) Then
                RaiseEvent LINE_MASTERRowChanged(Me, New LINE_MASTERRowChangeEvent(CType(e.Row,LINE_MASTERRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.LINE_MASTERRowChangingEvent) Is Nothing) Then
                RaiseEvent LINE_MASTERRowChanging(Me, New LINE_MASTERRowChangeEvent(CType(e.Row,LINE_MASTERRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.LINE_MASTERRowDeletedEvent) Is Nothing) Then
                RaiseEvent LINE_MASTERRowDeleted(Me, New LINE_MASTERRowChangeEvent(CType(e.Row,LINE_MASTERRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.LINE_MASTERRowDeletingEvent) Is Nothing) Then
                RaiseEvent LINE_MASTERRowDeleting(Me, New LINE_MASTERRowChangeEvent(CType(e.Row,LINE_MASTERRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveLINE_MASTERRow(ByVal row As LINE_MASTERRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As ihi_rhf5_developmentDataSet = New ihi_rhf5_developmentDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "LINE_MASTERDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MACHINEDataTable
        Inherits Global.System.Data.TypedTableBase(Of MACHINERow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnLINE_ID As Global.System.Data.DataColumn
        
        Private columnSEQ As Global.System.Data.DataColumn
        
        Private columnMACHINE_NO As Global.System.Data.DataColumn
        
        Private columnMACHINE_NAME As Global.System.Data.DataColumn
        
        Private columnPATH As Global.System.Data.DataColumn
        
        Private columnPLC_NET As Global.System.Data.DataColumn
        
        Private columnPLC_NODE As Global.System.Data.DataColumn
        
        Private columnPLC_UNIT As Global.System.Data.DataColumn
        
        Private columnREAD_STATUS_ADDRESS As Global.System.Data.DataColumn
        
        Private columnREAD_STATUS_LENGTH As Global.System.Data.DataColumn
        
        Private columnREAD_DATA_ADDRESS As Global.System.Data.DataColumn
        
        Private columnWRITE_STATUS_ADDRESS As Global.System.Data.DataColumn
        
        Private columnWRITE_LIFE_ADDRESS As Global.System.Data.DataColumn
        
        Private columnWRITE_SYNC_ADDRESS As Global.System.Data.DataColumn
        
        Private columnCOPY_FILE As Global.System.Data.DataColumn
        
        Private columnCOPY_PATH As Global.System.Data.DataColumn
        
        Private columnCOPY_WILDCARD As Global.System.Data.DataColumn
        
        Private columnCOPY_PURGE_OLD_PATH As Global.System.Data.DataColumn
        
        Private columnCOPY_PERIOD_MILLISEC As Global.System.Data.DataColumn
        
        Private columnCOPY_PURGE_PERIOD_DAY As Global.System.Data.DataColumn
        
        Private columnFORMAT_MODE As Global.System.Data.DataColumn
        
        Private columnFORMAT_MC As Global.System.Data.DataColumn
        
        Private columnFORMAT_LOT_NO As Global.System.Data.DataColumn
        
        Private columnFORMAT_FILE_NAME As Global.System.Data.DataColumn
        
        Private columnFORMAT_DATE_TIME As Global.System.Data.DataColumn
        
        Private columnFORMAT_STATUS As Global.System.Data.DataColumn
        
        Private columnFORMAT_SERIAL_BH As Global.System.Data.DataColumn
        
        Private columnFORMAT_SERIAL_CS As Global.System.Data.DataColumn
        
        Private columnFORMAT_SERIAL_ITA As Global.System.Data.DataColumn
        
        Private columnFORMAT_SERIAL_TS As Global.System.Data.DataColumn
        
        Private columnFORMAT_SERIAL_CW As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MACHINE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LINE_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLINE_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SEQColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSEQ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MACHINE_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMACHINE_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MACHINE_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMACHINE_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PATHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPATH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLC_NETColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLC_NET
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLC_NODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLC_NODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLC_UNITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLC_UNIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property READ_STATUS_ADDRESSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREAD_STATUS_ADDRESS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property READ_STATUS_LENGTHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREAD_STATUS_LENGTH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property READ_DATA_ADDRESSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREAD_DATA_ADDRESS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property WRITE_STATUS_ADDRESSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWRITE_STATUS_ADDRESS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property WRITE_LIFE_ADDRESSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWRITE_LIFE_ADDRESS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property WRITE_SYNC_ADDRESSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWRITE_SYNC_ADDRESS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property COPY_FILEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOPY_FILE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property COPY_PATHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOPY_PATH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property COPY_WILDCARDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOPY_WILDCARD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property COPY_PURGE_OLD_PATHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOPY_PURGE_OLD_PATH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property COPY_PERIOD_MILLISECColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOPY_PERIOD_MILLISEC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property COPY_PURGE_PERIOD_DAYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOPY_PURGE_PERIOD_DAY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FORMAT_MODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFORMAT_MODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FORMAT_MCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFORMAT_MC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FORMAT_LOT_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFORMAT_LOT_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FORMAT_FILE_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFORMAT_FILE_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FORMAT_DATE_TIMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFORMAT_DATE_TIME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FORMAT_STATUSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFORMAT_STATUS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FORMAT_SERIAL_BHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFORMAT_SERIAL_BH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FORMAT_SERIAL_CSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFORMAT_SERIAL_CS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FORMAT_SERIAL_ITAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFORMAT_SERIAL_ITA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FORMAT_SERIAL_TSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFORMAT_SERIAL_TS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FORMAT_SERIAL_CWColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFORMAT_SERIAL_CW
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MACHINERow
            Get
                Return CType(Me.Rows(index),MACHINERow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event MACHINERowChanging As MACHINERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event MACHINERowChanged As MACHINERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event MACHINERowDeleting As MACHINERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event MACHINERowDeleted As MACHINERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddMACHINERow(ByVal row As MACHINERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddMACHINERow( _
                    ByVal parentLINE_MASTERRowByFK_MACHINE_LINE_MASTER As LINE_MASTERRow,  _
                    ByVal SEQ As Integer,  _
                    ByVal MACHINE_NO As Integer,  _
                    ByVal MACHINE_NAME As String,  _
                    ByVal PATH As String,  _
                    ByVal PLC_NET As Integer,  _
                    ByVal PLC_NODE As Integer,  _
                    ByVal PLC_UNIT As Integer,  _
                    ByVal READ_STATUS_ADDRESS As String,  _
                    ByVal READ_STATUS_LENGTH As Integer,  _
                    ByVal READ_DATA_ADDRESS As String,  _
                    ByVal WRITE_STATUS_ADDRESS As String,  _
                    ByVal WRITE_LIFE_ADDRESS As String,  _
                    ByVal WRITE_SYNC_ADDRESS As String,  _
                    ByVal COPY_FILE As Boolean,  _
                    ByVal COPY_PATH As String,  _
                    ByVal COPY_WILDCARD As String,  _
                    ByVal COPY_PURGE_OLD_PATH As String,  _
                    ByVal COPY_PERIOD_MILLISEC As Integer,  _
                    ByVal COPY_PURGE_PERIOD_DAY As Integer,  _
                    ByVal FORMAT_MODE As String,  _
                    ByVal FORMAT_MC As String,  _
                    ByVal FORMAT_LOT_NO As String,  _
                    ByVal FORMAT_FILE_NAME As String,  _
                    ByVal FORMAT_DATE_TIME As String,  _
                    ByVal FORMAT_STATUS As String,  _
                    ByVal FORMAT_SERIAL_BH As String,  _
                    ByVal FORMAT_SERIAL_CS As String,  _
                    ByVal FORMAT_SERIAL_ITA As String,  _
                    ByVal FORMAT_SERIAL_TS As String,  _
                    ByVal FORMAT_SERIAL_CW As String) As MACHINERow
            Dim rowMACHINERow As MACHINERow = CType(Me.NewRow,MACHINERow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nothing, SEQ, MACHINE_NO, MACHINE_NAME, PATH, PLC_NET, PLC_NODE, PLC_UNIT, READ_STATUS_ADDRESS, READ_STATUS_LENGTH, READ_DATA_ADDRESS, WRITE_STATUS_ADDRESS, WRITE_LIFE_ADDRESS, WRITE_SYNC_ADDRESS, COPY_FILE, COPY_PATH, COPY_WILDCARD, COPY_PURGE_OLD_PATH, COPY_PERIOD_MILLISEC, COPY_PURGE_PERIOD_DAY, FORMAT_MODE, FORMAT_MC, FORMAT_LOT_NO, FORMAT_FILE_NAME, FORMAT_DATE_TIME, FORMAT_STATUS, FORMAT_SERIAL_BH, FORMAT_SERIAL_CS, FORMAT_SERIAL_ITA, FORMAT_SERIAL_TS, FORMAT_SERIAL_CW}
            If (Not (parentLINE_MASTERRowByFK_MACHINE_LINE_MASTER) Is Nothing) Then
                columnValuesArray(1) = parentLINE_MASTERRowByFK_MACHINE_LINE_MASTER(0)
            End If
            rowMACHINERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMACHINERow)
            Return rowMACHINERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByID(ByVal ID As Integer) As MACHINERow
            Return CType(Me.Rows.Find(New Object() {ID}),MACHINERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MACHINEDataTable = CType(MyBase.Clone,MACHINEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MACHINEDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnLINE_ID = MyBase.Columns("LINE_ID")
            Me.columnSEQ = MyBase.Columns("SEQ")
            Me.columnMACHINE_NO = MyBase.Columns("MACHINE_NO")
            Me.columnMACHINE_NAME = MyBase.Columns("MACHINE_NAME")
            Me.columnPATH = MyBase.Columns("PATH")
            Me.columnPLC_NET = MyBase.Columns("PLC_NET")
            Me.columnPLC_NODE = MyBase.Columns("PLC_NODE")
            Me.columnPLC_UNIT = MyBase.Columns("PLC_UNIT")
            Me.columnREAD_STATUS_ADDRESS = MyBase.Columns("READ_STATUS_ADDRESS")
            Me.columnREAD_STATUS_LENGTH = MyBase.Columns("READ_STATUS_LENGTH")
            Me.columnREAD_DATA_ADDRESS = MyBase.Columns("READ_DATA_ADDRESS")
            Me.columnWRITE_STATUS_ADDRESS = MyBase.Columns("WRITE_STATUS_ADDRESS")
            Me.columnWRITE_LIFE_ADDRESS = MyBase.Columns("WRITE_LIFE_ADDRESS")
            Me.columnWRITE_SYNC_ADDRESS = MyBase.Columns("WRITE_SYNC_ADDRESS")
            Me.columnCOPY_FILE = MyBase.Columns("COPY_FILE")
            Me.columnCOPY_PATH = MyBase.Columns("COPY_PATH")
            Me.columnCOPY_WILDCARD = MyBase.Columns("COPY_WILDCARD")
            Me.columnCOPY_PURGE_OLD_PATH = MyBase.Columns("COPY_PURGE_OLD_PATH")
            Me.columnCOPY_PERIOD_MILLISEC = MyBase.Columns("COPY_PERIOD_MILLISEC")
            Me.columnCOPY_PURGE_PERIOD_DAY = MyBase.Columns("COPY_PURGE_PERIOD_DAY")
            Me.columnFORMAT_MODE = MyBase.Columns("FORMAT_MODE")
            Me.columnFORMAT_MC = MyBase.Columns("FORMAT_MC")
            Me.columnFORMAT_LOT_NO = MyBase.Columns("FORMAT_LOT_NO")
            Me.columnFORMAT_FILE_NAME = MyBase.Columns("FORMAT_FILE_NAME")
            Me.columnFORMAT_DATE_TIME = MyBase.Columns("FORMAT_DATE_TIME")
            Me.columnFORMAT_STATUS = MyBase.Columns("FORMAT_STATUS")
            Me.columnFORMAT_SERIAL_BH = MyBase.Columns("FORMAT_SERIAL_BH")
            Me.columnFORMAT_SERIAL_CS = MyBase.Columns("FORMAT_SERIAL_CS")
            Me.columnFORMAT_SERIAL_ITA = MyBase.Columns("FORMAT_SERIAL_ITA")
            Me.columnFORMAT_SERIAL_TS = MyBase.Columns("FORMAT_SERIAL_TS")
            Me.columnFORMAT_SERIAL_CW = MyBase.Columns("FORMAT_SERIAL_CW")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnLINE_ID = New Global.System.Data.DataColumn("LINE_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLINE_ID)
            Me.columnSEQ = New Global.System.Data.DataColumn("SEQ", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSEQ)
            Me.columnMACHINE_NO = New Global.System.Data.DataColumn("MACHINE_NO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMACHINE_NO)
            Me.columnMACHINE_NAME = New Global.System.Data.DataColumn("MACHINE_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMACHINE_NAME)
            Me.columnPATH = New Global.System.Data.DataColumn("PATH", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPATH)
            Me.columnPLC_NET = New Global.System.Data.DataColumn("PLC_NET", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLC_NET)
            Me.columnPLC_NODE = New Global.System.Data.DataColumn("PLC_NODE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLC_NODE)
            Me.columnPLC_UNIT = New Global.System.Data.DataColumn("PLC_UNIT", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLC_UNIT)
            Me.columnREAD_STATUS_ADDRESS = New Global.System.Data.DataColumn("READ_STATUS_ADDRESS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREAD_STATUS_ADDRESS)
            Me.columnREAD_STATUS_LENGTH = New Global.System.Data.DataColumn("READ_STATUS_LENGTH", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREAD_STATUS_LENGTH)
            Me.columnREAD_DATA_ADDRESS = New Global.System.Data.DataColumn("READ_DATA_ADDRESS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREAD_DATA_ADDRESS)
            Me.columnWRITE_STATUS_ADDRESS = New Global.System.Data.DataColumn("WRITE_STATUS_ADDRESS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWRITE_STATUS_ADDRESS)
            Me.columnWRITE_LIFE_ADDRESS = New Global.System.Data.DataColumn("WRITE_LIFE_ADDRESS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWRITE_LIFE_ADDRESS)
            Me.columnWRITE_SYNC_ADDRESS = New Global.System.Data.DataColumn("WRITE_SYNC_ADDRESS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWRITE_SYNC_ADDRESS)
            Me.columnCOPY_FILE = New Global.System.Data.DataColumn("COPY_FILE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOPY_FILE)
            Me.columnCOPY_PATH = New Global.System.Data.DataColumn("COPY_PATH", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOPY_PATH)
            Me.columnCOPY_WILDCARD = New Global.System.Data.DataColumn("COPY_WILDCARD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOPY_WILDCARD)
            Me.columnCOPY_PURGE_OLD_PATH = New Global.System.Data.DataColumn("COPY_PURGE_OLD_PATH", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOPY_PURGE_OLD_PATH)
            Me.columnCOPY_PERIOD_MILLISEC = New Global.System.Data.DataColumn("COPY_PERIOD_MILLISEC", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOPY_PERIOD_MILLISEC)
            Me.columnCOPY_PURGE_PERIOD_DAY = New Global.System.Data.DataColumn("COPY_PURGE_PERIOD_DAY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOPY_PURGE_PERIOD_DAY)
            Me.columnFORMAT_MODE = New Global.System.Data.DataColumn("FORMAT_MODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFORMAT_MODE)
            Me.columnFORMAT_MC = New Global.System.Data.DataColumn("FORMAT_MC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFORMAT_MC)
            Me.columnFORMAT_LOT_NO = New Global.System.Data.DataColumn("FORMAT_LOT_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFORMAT_LOT_NO)
            Me.columnFORMAT_FILE_NAME = New Global.System.Data.DataColumn("FORMAT_FILE_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFORMAT_FILE_NAME)
            Me.columnFORMAT_DATE_TIME = New Global.System.Data.DataColumn("FORMAT_DATE_TIME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFORMAT_DATE_TIME)
            Me.columnFORMAT_STATUS = New Global.System.Data.DataColumn("FORMAT_STATUS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFORMAT_STATUS)
            Me.columnFORMAT_SERIAL_BH = New Global.System.Data.DataColumn("FORMAT_SERIAL_BH", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFORMAT_SERIAL_BH)
            Me.columnFORMAT_SERIAL_CS = New Global.System.Data.DataColumn("FORMAT_SERIAL_CS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFORMAT_SERIAL_CS)
            Me.columnFORMAT_SERIAL_ITA = New Global.System.Data.DataColumn("FORMAT_SERIAL_ITA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFORMAT_SERIAL_ITA)
            Me.columnFORMAT_SERIAL_TS = New Global.System.Data.DataColumn("FORMAT_SERIAL_TS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFORMAT_SERIAL_TS)
            Me.columnFORMAT_SERIAL_CW = New Global.System.Data.DataColumn("FORMAT_SERIAL_CW", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFORMAT_SERIAL_CW)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AutoIncrementSeed = -1
            Me.columnID.AutoIncrementStep = -1
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnLINE_ID.AllowDBNull = false
            Me.columnSEQ.AllowDBNull = false
            Me.columnMACHINE_NO.AllowDBNull = false
            Me.columnMACHINE_NAME.AllowDBNull = false
            Me.columnMACHINE_NAME.MaxLength = 10
            Me.columnPATH.AllowDBNull = false
            Me.columnPATH.MaxLength = 20
            Me.columnPLC_NET.AllowDBNull = false
            Me.columnPLC_NODE.AllowDBNull = false
            Me.columnPLC_UNIT.AllowDBNull = false
            Me.columnREAD_STATUS_ADDRESS.AllowDBNull = false
            Me.columnREAD_STATUS_ADDRESS.MaxLength = 10
            Me.columnREAD_STATUS_LENGTH.AllowDBNull = false
            Me.columnREAD_DATA_ADDRESS.AllowDBNull = false
            Me.columnREAD_DATA_ADDRESS.MaxLength = 10
            Me.columnWRITE_STATUS_ADDRESS.AllowDBNull = false
            Me.columnWRITE_STATUS_ADDRESS.MaxLength = 10
            Me.columnWRITE_LIFE_ADDRESS.AllowDBNull = false
            Me.columnWRITE_LIFE_ADDRESS.MaxLength = 10
            Me.columnWRITE_SYNC_ADDRESS.AllowDBNull = false
            Me.columnWRITE_SYNC_ADDRESS.MaxLength = 10
            Me.columnCOPY_FILE.AllowDBNull = false
            Me.columnCOPY_PATH.AllowDBNull = false
            Me.columnCOPY_PATH.MaxLength = 255
            Me.columnCOPY_WILDCARD.AllowDBNull = false
            Me.columnCOPY_WILDCARD.MaxLength = 50
            Me.columnCOPY_PURGE_OLD_PATH.AllowDBNull = false
            Me.columnCOPY_PURGE_OLD_PATH.MaxLength = 255
            Me.columnCOPY_PERIOD_MILLISEC.AllowDBNull = false
            Me.columnCOPY_PURGE_PERIOD_DAY.AllowDBNull = false
            Me.columnFORMAT_MODE.AllowDBNull = false
            Me.columnFORMAT_MODE.MaxLength = 100
            Me.columnFORMAT_MC.AllowDBNull = false
            Me.columnFORMAT_MC.MaxLength = 100
            Me.columnFORMAT_LOT_NO.AllowDBNull = false
            Me.columnFORMAT_LOT_NO.MaxLength = 100
            Me.columnFORMAT_FILE_NAME.AllowDBNull = false
            Me.columnFORMAT_FILE_NAME.MaxLength = 100
            Me.columnFORMAT_DATE_TIME.AllowDBNull = false
            Me.columnFORMAT_DATE_TIME.MaxLength = 100
            Me.columnFORMAT_STATUS.AllowDBNull = false
            Me.columnFORMAT_STATUS.MaxLength = 100
            Me.columnFORMAT_SERIAL_BH.AllowDBNull = false
            Me.columnFORMAT_SERIAL_BH.MaxLength = 100
            Me.columnFORMAT_SERIAL_CS.AllowDBNull = false
            Me.columnFORMAT_SERIAL_CS.MaxLength = 100
            Me.columnFORMAT_SERIAL_ITA.AllowDBNull = false
            Me.columnFORMAT_SERIAL_ITA.MaxLength = 100
            Me.columnFORMAT_SERIAL_TS.AllowDBNull = false
            Me.columnFORMAT_SERIAL_TS.MaxLength = 100
            Me.columnFORMAT_SERIAL_CW.AllowDBNull = false
            Me.columnFORMAT_SERIAL_CW.MaxLength = 100
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewMACHINERow() As MACHINERow
            Return CType(Me.NewRow,MACHINERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MACHINERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MACHINERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MACHINERowChangedEvent) Is Nothing) Then
                RaiseEvent MACHINERowChanged(Me, New MACHINERowChangeEvent(CType(e.Row,MACHINERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MACHINERowChangingEvent) Is Nothing) Then
                RaiseEvent MACHINERowChanging(Me, New MACHINERowChangeEvent(CType(e.Row,MACHINERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MACHINERowDeletedEvent) Is Nothing) Then
                RaiseEvent MACHINERowDeleted(Me, New MACHINERowChangeEvent(CType(e.Row,MACHINERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MACHINERowDeletingEvent) Is Nothing) Then
                RaiseEvent MACHINERowDeleting(Me, New MACHINERowChangeEvent(CType(e.Row,MACHINERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveMACHINERow(ByVal row As MACHINERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As ihi_rhf5_developmentDataSet = New ihi_rhf5_developmentDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MACHINEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MACHINE_COLUMNSDataTable
        Inherits Global.System.Data.TypedTableBase(Of MACHINE_COLUMNSRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnMACHINE_ID As Global.System.Data.DataColumn
        
        Private columnSEQ As Global.System.Data.DataColumn
        
        Private columnSCREEN_COLUMN_NAME As Global.System.Data.DataColumn
        
        Private columnFILE_COLUMN_NAME As Global.System.Data.DataColumn
        
        Private columnDATA_TYPE As Global.System.Data.DataColumn
        
        Private columnPOSITION As Global.System.Data.DataColumn
        
        Private columnLENGTH As Global.System.Data.DataColumn
        
        Private columnMULTIPLIER As Global.System.Data.DataColumn
        
        Private columnFORMAT_STRING As Global.System.Data.DataColumn
        
        Private columnREPLACE_COLUMN_NAME As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MACHINE_COLUMNS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MACHINE_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMACHINE_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SEQColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSEQ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SCREEN_COLUMN_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSCREEN_COLUMN_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FILE_COLUMN_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFILE_COLUMN_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DATA_TYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATA_TYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property POSITIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPOSITION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LENGTHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLENGTH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MULTIPLIERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMULTIPLIER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FORMAT_STRINGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFORMAT_STRING
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property REPLACE_COLUMN_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREPLACE_COLUMN_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MACHINE_COLUMNSRow
            Get
                Return CType(Me.Rows(index),MACHINE_COLUMNSRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event MACHINE_COLUMNSRowChanging As MACHINE_COLUMNSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event MACHINE_COLUMNSRowChanged As MACHINE_COLUMNSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event MACHINE_COLUMNSRowDeleting As MACHINE_COLUMNSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event MACHINE_COLUMNSRowDeleted As MACHINE_COLUMNSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddMACHINE_COLUMNSRow(ByVal row As MACHINE_COLUMNSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddMACHINE_COLUMNSRow(ByVal parentMACHINERowByFK_MACHINE_COLUMNS_MACHINE As MACHINERow, ByVal SEQ As Integer, ByVal SCREEN_COLUMN_NAME As String, ByVal FILE_COLUMN_NAME As String, ByVal DATA_TYPE As String, ByVal POSITION As Integer, ByVal LENGTH As Integer, ByVal MULTIPLIER As Double, ByVal FORMAT_STRING As String, ByVal REPLACE_COLUMN_NAME As String) As MACHINE_COLUMNSRow
            Dim rowMACHINE_COLUMNSRow As MACHINE_COLUMNSRow = CType(Me.NewRow,MACHINE_COLUMNSRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nothing, SEQ, SCREEN_COLUMN_NAME, FILE_COLUMN_NAME, DATA_TYPE, POSITION, LENGTH, MULTIPLIER, FORMAT_STRING, REPLACE_COLUMN_NAME}
            If (Not (parentMACHINERowByFK_MACHINE_COLUMNS_MACHINE) Is Nothing) Then
                columnValuesArray(1) = parentMACHINERowByFK_MACHINE_COLUMNS_MACHINE(0)
            End If
            rowMACHINE_COLUMNSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMACHINE_COLUMNSRow)
            Return rowMACHINE_COLUMNSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByID(ByVal ID As Integer) As MACHINE_COLUMNSRow
            Return CType(Me.Rows.Find(New Object() {ID}),MACHINE_COLUMNSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MACHINE_COLUMNSDataTable = CType(MyBase.Clone,MACHINE_COLUMNSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MACHINE_COLUMNSDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnMACHINE_ID = MyBase.Columns("MACHINE_ID")
            Me.columnSEQ = MyBase.Columns("SEQ")
            Me.columnSCREEN_COLUMN_NAME = MyBase.Columns("SCREEN_COLUMN_NAME")
            Me.columnFILE_COLUMN_NAME = MyBase.Columns("FILE_COLUMN_NAME")
            Me.columnDATA_TYPE = MyBase.Columns("DATA_TYPE")
            Me.columnPOSITION = MyBase.Columns("POSITION")
            Me.columnLENGTH = MyBase.Columns("LENGTH")
            Me.columnMULTIPLIER = MyBase.Columns("MULTIPLIER")
            Me.columnFORMAT_STRING = MyBase.Columns("FORMAT_STRING")
            Me.columnREPLACE_COLUMN_NAME = MyBase.Columns("REPLACE_COLUMN_NAME")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnMACHINE_ID = New Global.System.Data.DataColumn("MACHINE_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMACHINE_ID)
            Me.columnSEQ = New Global.System.Data.DataColumn("SEQ", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSEQ)
            Me.columnSCREEN_COLUMN_NAME = New Global.System.Data.DataColumn("SCREEN_COLUMN_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSCREEN_COLUMN_NAME)
            Me.columnFILE_COLUMN_NAME = New Global.System.Data.DataColumn("FILE_COLUMN_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFILE_COLUMN_NAME)
            Me.columnDATA_TYPE = New Global.System.Data.DataColumn("DATA_TYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATA_TYPE)
            Me.columnPOSITION = New Global.System.Data.DataColumn("POSITION", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOSITION)
            Me.columnLENGTH = New Global.System.Data.DataColumn("LENGTH", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLENGTH)
            Me.columnMULTIPLIER = New Global.System.Data.DataColumn("MULTIPLIER", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMULTIPLIER)
            Me.columnFORMAT_STRING = New Global.System.Data.DataColumn("FORMAT_STRING", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFORMAT_STRING)
            Me.columnREPLACE_COLUMN_NAME = New Global.System.Data.DataColumn("REPLACE_COLUMN_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREPLACE_COLUMN_NAME)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AutoIncrementSeed = -1
            Me.columnID.AutoIncrementStep = -1
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnMACHINE_ID.AllowDBNull = false
            Me.columnSEQ.AllowDBNull = false
            Me.columnSCREEN_COLUMN_NAME.AllowDBNull = false
            Me.columnSCREEN_COLUMN_NAME.MaxLength = 255
            Me.columnFILE_COLUMN_NAME.AllowDBNull = false
            Me.columnFILE_COLUMN_NAME.MaxLength = 255
            Me.columnDATA_TYPE.AllowDBNull = false
            Me.columnDATA_TYPE.MaxLength = 1
            Me.columnPOSITION.AllowDBNull = false
            Me.columnLENGTH.AllowDBNull = false
            Me.columnFORMAT_STRING.MaxLength = 50
            Me.columnREPLACE_COLUMN_NAME.AllowDBNull = false
            Me.columnREPLACE_COLUMN_NAME.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewMACHINE_COLUMNSRow() As MACHINE_COLUMNSRow
            Return CType(Me.NewRow,MACHINE_COLUMNSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MACHINE_COLUMNSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MACHINE_COLUMNSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MACHINE_COLUMNSRowChangedEvent) Is Nothing) Then
                RaiseEvent MACHINE_COLUMNSRowChanged(Me, New MACHINE_COLUMNSRowChangeEvent(CType(e.Row,MACHINE_COLUMNSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MACHINE_COLUMNSRowChangingEvent) Is Nothing) Then
                RaiseEvent MACHINE_COLUMNSRowChanging(Me, New MACHINE_COLUMNSRowChangeEvent(CType(e.Row,MACHINE_COLUMNSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MACHINE_COLUMNSRowDeletedEvent) Is Nothing) Then
                RaiseEvent MACHINE_COLUMNSRowDeleted(Me, New MACHINE_COLUMNSRowChangeEvent(CType(e.Row,MACHINE_COLUMNSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MACHINE_COLUMNSRowDeletingEvent) Is Nothing) Then
                RaiseEvent MACHINE_COLUMNSRowDeleting(Me, New MACHINE_COLUMNSRowChangeEvent(CType(e.Row,MACHINE_COLUMNSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveMACHINE_COLUMNSRow(ByVal row As MACHINE_COLUMNSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As ihi_rhf5_developmentDataSet = New ihi_rhf5_developmentDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MACHINE_COLUMNSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MACHINE_DATA_STRDataTable
        Inherits Global.System.Data.TypedTableBase(Of MACHINE_DATA_STRRow)
        
        Private columnRESULT_ID As Global.System.Data.DataColumn
        
        Private columnMACHINE_COLUMNS_ID As Global.System.Data.DataColumn
        
        Private columnDATA As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MACHINE_DATA_STR"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RESULT_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRESULT_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MACHINE_COLUMNS_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMACHINE_COLUMNS_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DATAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MACHINE_DATA_STRRow
            Get
                Return CType(Me.Rows(index),MACHINE_DATA_STRRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event MACHINE_DATA_STRRowChanging As MACHINE_DATA_STRRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event MACHINE_DATA_STRRowChanged As MACHINE_DATA_STRRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event MACHINE_DATA_STRRowDeleting As MACHINE_DATA_STRRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event MACHINE_DATA_STRRowDeleted As MACHINE_DATA_STRRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddMACHINE_DATA_STRRow(ByVal row As MACHINE_DATA_STRRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddMACHINE_DATA_STRRow(ByVal parentRESULTRowByFK_MACHINE_DATA_STR_RESULT As RESULTRow, ByVal parentMACHINE_COLUMNSRowByFK_MACHINE_DATA_STR_MACHINE_COLUMNS As MACHINE_COLUMNSRow, ByVal DATA As String) As MACHINE_DATA_STRRow
            Dim rowMACHINE_DATA_STRRow As MACHINE_DATA_STRRow = CType(Me.NewRow,MACHINE_DATA_STRRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nothing, DATA}
            If (Not (parentRESULTRowByFK_MACHINE_DATA_STR_RESULT) Is Nothing) Then
                columnValuesArray(0) = parentRESULTRowByFK_MACHINE_DATA_STR_RESULT(0)
            End If
            If (Not (parentMACHINE_COLUMNSRowByFK_MACHINE_DATA_STR_MACHINE_COLUMNS) Is Nothing) Then
                columnValuesArray(1) = parentMACHINE_COLUMNSRowByFK_MACHINE_DATA_STR_MACHINE_COLUMNS(0)
            End If
            rowMACHINE_DATA_STRRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMACHINE_DATA_STRRow)
            Return rowMACHINE_DATA_STRRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByRESULT_IDMACHINE_COLUMNS_ID(ByVal RESULT_ID As Integer, ByVal MACHINE_COLUMNS_ID As Integer) As MACHINE_DATA_STRRow
            Return CType(Me.Rows.Find(New Object() {RESULT_ID, MACHINE_COLUMNS_ID}),MACHINE_DATA_STRRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MACHINE_DATA_STRDataTable = CType(MyBase.Clone,MACHINE_DATA_STRDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MACHINE_DATA_STRDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnRESULT_ID = MyBase.Columns("RESULT_ID")
            Me.columnMACHINE_COLUMNS_ID = MyBase.Columns("MACHINE_COLUMNS_ID")
            Me.columnDATA = MyBase.Columns("DATA")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnRESULT_ID = New Global.System.Data.DataColumn("RESULT_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRESULT_ID)
            Me.columnMACHINE_COLUMNS_ID = New Global.System.Data.DataColumn("MACHINE_COLUMNS_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMACHINE_COLUMNS_ID)
            Me.columnDATA = New Global.System.Data.DataColumn("DATA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATA)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnRESULT_ID, Me.columnMACHINE_COLUMNS_ID}, true))
            Me.columnRESULT_ID.AllowDBNull = false
            Me.columnMACHINE_COLUMNS_ID.AllowDBNull = false
            Me.columnDATA.AllowDBNull = false
            Me.columnDATA.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewMACHINE_DATA_STRRow() As MACHINE_DATA_STRRow
            Return CType(Me.NewRow,MACHINE_DATA_STRRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MACHINE_DATA_STRRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MACHINE_DATA_STRRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MACHINE_DATA_STRRowChangedEvent) Is Nothing) Then
                RaiseEvent MACHINE_DATA_STRRowChanged(Me, New MACHINE_DATA_STRRowChangeEvent(CType(e.Row,MACHINE_DATA_STRRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MACHINE_DATA_STRRowChangingEvent) Is Nothing) Then
                RaiseEvent MACHINE_DATA_STRRowChanging(Me, New MACHINE_DATA_STRRowChangeEvent(CType(e.Row,MACHINE_DATA_STRRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MACHINE_DATA_STRRowDeletedEvent) Is Nothing) Then
                RaiseEvent MACHINE_DATA_STRRowDeleted(Me, New MACHINE_DATA_STRRowChangeEvent(CType(e.Row,MACHINE_DATA_STRRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MACHINE_DATA_STRRowDeletingEvent) Is Nothing) Then
                RaiseEvent MACHINE_DATA_STRRowDeleting(Me, New MACHINE_DATA_STRRowChangeEvent(CType(e.Row,MACHINE_DATA_STRRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveMACHINE_DATA_STRRow(ByVal row As MACHINE_DATA_STRRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As ihi_rhf5_developmentDataSet = New ihi_rhf5_developmentDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MACHINE_DATA_STRDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class RESULTDataTable
        Inherits Global.System.Data.TypedTableBase(Of RESULTRow)
        
        Private columnTRAN_ID As Global.System.Data.DataColumn
        
        Private columnSERIAL_ID As Global.System.Data.DataColumn
        
        Private columnMODE As Global.System.Data.DataColumn
        
        Private columnMACHINE_ID As Global.System.Data.DataColumn
        
        Private columnLOT_NO As Global.System.Data.DataColumn
        
        Private columnFILE_NAME As Global.System.Data.DataColumn
        
        Private columnRESULT_DATE_TIME As Global.System.Data.DataColumn
        
        Private columnSTATUS As Global.System.Data.DataColumn
        
        Private columnCREATED_WHEN As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "RESULT"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TRAN_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRAN_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SERIAL_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSERIAL_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MACHINE_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMACHINE_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LOT_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLOT_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FILE_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFILE_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RESULT_DATE_TIMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRESULT_DATE_TIME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property STATUSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTATUS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CREATED_WHENColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCREATED_WHEN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As RESULTRow
            Get
                Return CType(Me.Rows(index),RESULTRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event RESULTRowChanging As RESULTRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event RESULTRowChanged As RESULTRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event RESULTRowDeleting As RESULTRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event RESULTRowDeleted As RESULTRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddRESULTRow(ByVal row As RESULTRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddRESULTRow(ByVal parentSERIALRowByFK_RESULT_SERIAL As SERIALRow, ByVal MODE As String, ByVal parentMACHINERowByFK_RESULT_MACHINE As MACHINERow, ByVal LOT_NO As String, ByVal FILE_NAME As String, ByVal RESULT_DATE_TIME As Date, ByVal STATUS As String, ByVal CREATED_WHEN As Date) As RESULTRow
            Dim rowRESULTRow As RESULTRow = CType(Me.NewRow,RESULTRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nothing, MODE, Nothing, LOT_NO, FILE_NAME, RESULT_DATE_TIME, STATUS, CREATED_WHEN}
            If (Not (parentSERIALRowByFK_RESULT_SERIAL) Is Nothing) Then
                columnValuesArray(1) = parentSERIALRowByFK_RESULT_SERIAL(0)
            End If
            If (Not (parentMACHINERowByFK_RESULT_MACHINE) Is Nothing) Then
                columnValuesArray(3) = parentMACHINERowByFK_RESULT_MACHINE(0)
            End If
            rowRESULTRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowRESULTRow)
            Return rowRESULTRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByTRAN_ID(ByVal TRAN_ID As Integer) As RESULTRow
            Return CType(Me.Rows.Find(New Object() {TRAN_ID}),RESULTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As RESULTDataTable = CType(MyBase.Clone,RESULTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New RESULTDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnTRAN_ID = MyBase.Columns("TRAN_ID")
            Me.columnSERIAL_ID = MyBase.Columns("SERIAL_ID")
            Me.columnMODE = MyBase.Columns("MODE")
            Me.columnMACHINE_ID = MyBase.Columns("MACHINE_ID")
            Me.columnLOT_NO = MyBase.Columns("LOT_NO")
            Me.columnFILE_NAME = MyBase.Columns("FILE_NAME")
            Me.columnRESULT_DATE_TIME = MyBase.Columns("RESULT_DATE_TIME")
            Me.columnSTATUS = MyBase.Columns("STATUS")
            Me.columnCREATED_WHEN = MyBase.Columns("CREATED_WHEN")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnTRAN_ID = New Global.System.Data.DataColumn("TRAN_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRAN_ID)
            Me.columnSERIAL_ID = New Global.System.Data.DataColumn("SERIAL_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSERIAL_ID)
            Me.columnMODE = New Global.System.Data.DataColumn("MODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMODE)
            Me.columnMACHINE_ID = New Global.System.Data.DataColumn("MACHINE_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMACHINE_ID)
            Me.columnLOT_NO = New Global.System.Data.DataColumn("LOT_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLOT_NO)
            Me.columnFILE_NAME = New Global.System.Data.DataColumn("FILE_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFILE_NAME)
            Me.columnRESULT_DATE_TIME = New Global.System.Data.DataColumn("RESULT_DATE_TIME", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRESULT_DATE_TIME)
            Me.columnSTATUS = New Global.System.Data.DataColumn("STATUS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTATUS)
            Me.columnCREATED_WHEN = New Global.System.Data.DataColumn("CREATED_WHEN", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCREATED_WHEN)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnTRAN_ID}, true))
            Me.columnTRAN_ID.AutoIncrement = true
            Me.columnTRAN_ID.AutoIncrementSeed = -1
            Me.columnTRAN_ID.AutoIncrementStep = -1
            Me.columnTRAN_ID.AllowDBNull = false
            Me.columnTRAN_ID.ReadOnly = true
            Me.columnTRAN_ID.Unique = true
            Me.columnSERIAL_ID.AllowDBNull = false
            Me.columnMODE.AllowDBNull = false
            Me.columnMODE.MaxLength = 10
            Me.columnMACHINE_ID.AllowDBNull = false
            Me.columnLOT_NO.AllowDBNull = false
            Me.columnLOT_NO.MaxLength = 5
            Me.columnFILE_NAME.AllowDBNull = false
            Me.columnFILE_NAME.MaxLength = 10
            Me.columnRESULT_DATE_TIME.AllowDBNull = false
            Me.columnSTATUS.AllowDBNull = false
            Me.columnSTATUS.MaxLength = 2
            Me.columnCREATED_WHEN.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewRESULTRow() As RESULTRow
            Return CType(Me.NewRow,RESULTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New RESULTRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(RESULTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RESULTRowChangedEvent) Is Nothing) Then
                RaiseEvent RESULTRowChanged(Me, New RESULTRowChangeEvent(CType(e.Row,RESULTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RESULTRowChangingEvent) Is Nothing) Then
                RaiseEvent RESULTRowChanging(Me, New RESULTRowChangeEvent(CType(e.Row,RESULTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RESULTRowDeletedEvent) Is Nothing) Then
                RaiseEvent RESULTRowDeleted(Me, New RESULTRowChangeEvent(CType(e.Row,RESULTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RESULTRowDeletingEvent) Is Nothing) Then
                RaiseEvent RESULTRowDeleting(Me, New RESULTRowChangeEvent(CType(e.Row,RESULTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveRESULTRow(ByVal row As RESULTRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As ihi_rhf5_developmentDataSet = New ihi_rhf5_developmentDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "RESULTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SERIALDataTable
        Inherits Global.System.Data.TypedTableBase(Of SERIALRow)
        
        Private columnSERIAL_ID As Global.System.Data.DataColumn
        
        Private columnSERIAL_BH As Global.System.Data.DataColumn
        
        Private columnSEQ_NO As Global.System.Data.DataColumn
        
        Private columnSERIAL_CS As Global.System.Data.DataColumn
        
        Private columnSERIAL_ITA As Global.System.Data.DataColumn
        
        Private columnCREATED_WHEN As Global.System.Data.DataColumn
        
        Private columnSERIAL_TS As Global.System.Data.DataColumn
        
        Private columnSERIAL_CW As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SERIAL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SERIAL_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSERIAL_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SERIAL_BHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSERIAL_BH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SEQ_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSEQ_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SERIAL_CSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSERIAL_CS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SERIAL_ITAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSERIAL_ITA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CREATED_WHENColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCREATED_WHEN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SERIAL_TSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSERIAL_TS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SERIAL_CWColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSERIAL_CW
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SERIALRow
            Get
                Return CType(Me.Rows(index),SERIALRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event SERIALRowChanging As SERIALRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event SERIALRowChanged As SERIALRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event SERIALRowDeleting As SERIALRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event SERIALRowDeleted As SERIALRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddSERIALRow(ByVal row As SERIALRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddSERIALRow(ByVal SERIAL_BH As String, ByVal SEQ_NO As Integer, ByVal SERIAL_CS As String, ByVal SERIAL_ITA As String, ByVal CREATED_WHEN As Date, ByVal SERIAL_TS As String, ByVal SERIAL_CW As String) As SERIALRow
            Dim rowSERIALRow As SERIALRow = CType(Me.NewRow,SERIALRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, SERIAL_BH, SEQ_NO, SERIAL_CS, SERIAL_ITA, CREATED_WHEN, SERIAL_TS, SERIAL_CW}
            rowSERIALRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSERIALRow)
            Return rowSERIALRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindBySERIAL_ID(ByVal SERIAL_ID As Integer) As SERIALRow
            Return CType(Me.Rows.Find(New Object() {SERIAL_ID}),SERIALRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SERIALDataTable = CType(MyBase.Clone,SERIALDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SERIALDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnSERIAL_ID = MyBase.Columns("SERIAL_ID")
            Me.columnSERIAL_BH = MyBase.Columns("SERIAL_BH")
            Me.columnSEQ_NO = MyBase.Columns("SEQ_NO")
            Me.columnSERIAL_CS = MyBase.Columns("SERIAL_CS")
            Me.columnSERIAL_ITA = MyBase.Columns("SERIAL_ITA")
            Me.columnCREATED_WHEN = MyBase.Columns("CREATED_WHEN")
            Me.columnSERIAL_TS = MyBase.Columns("SERIAL_TS")
            Me.columnSERIAL_CW = MyBase.Columns("SERIAL_CW")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnSERIAL_ID = New Global.System.Data.DataColumn("SERIAL_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSERIAL_ID)
            Me.columnSERIAL_BH = New Global.System.Data.DataColumn("SERIAL_BH", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSERIAL_BH)
            Me.columnSEQ_NO = New Global.System.Data.DataColumn("SEQ_NO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSEQ_NO)
            Me.columnSERIAL_CS = New Global.System.Data.DataColumn("SERIAL_CS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSERIAL_CS)
            Me.columnSERIAL_ITA = New Global.System.Data.DataColumn("SERIAL_ITA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSERIAL_ITA)
            Me.columnCREATED_WHEN = New Global.System.Data.DataColumn("CREATED_WHEN", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCREATED_WHEN)
            Me.columnSERIAL_TS = New Global.System.Data.DataColumn("SERIAL_TS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSERIAL_TS)
            Me.columnSERIAL_CW = New Global.System.Data.DataColumn("SERIAL_CW", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSERIAL_CW)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSERIAL_ID}, true))
            Me.columnSERIAL_ID.AutoIncrement = true
            Me.columnSERIAL_ID.AutoIncrementSeed = -1
            Me.columnSERIAL_ID.AutoIncrementStep = -1
            Me.columnSERIAL_ID.AllowDBNull = false
            Me.columnSERIAL_ID.ReadOnly = true
            Me.columnSERIAL_ID.Unique = true
            Me.columnSERIAL_BH.AllowDBNull = false
            Me.columnSERIAL_BH.MaxLength = 20
            Me.columnSEQ_NO.AllowDBNull = false
            Me.columnSERIAL_CS.MaxLength = 20
            Me.columnSERIAL_ITA.MaxLength = 50
            Me.columnCREATED_WHEN.AllowDBNull = false
            Me.columnSERIAL_TS.MaxLength = 20
            Me.columnSERIAL_CW.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewSERIALRow() As SERIALRow
            Return CType(Me.NewRow,SERIALRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SERIALRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SERIALRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SERIALRowChangedEvent) Is Nothing) Then
                RaiseEvent SERIALRowChanged(Me, New SERIALRowChangeEvent(CType(e.Row,SERIALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SERIALRowChangingEvent) Is Nothing) Then
                RaiseEvent SERIALRowChanging(Me, New SERIALRowChangeEvent(CType(e.Row,SERIALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SERIALRowDeletedEvent) Is Nothing) Then
                RaiseEvent SERIALRowDeleted(Me, New SERIALRowChangeEvent(CType(e.Row,SERIALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SERIALRowDeletingEvent) Is Nothing) Then
                RaiseEvent SERIALRowDeleting(Me, New SERIALRowChangeEvent(CType(e.Row,SERIALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveSERIALRow(ByVal row As SERIALRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As ihi_rhf5_developmentDataSet = New ihi_rhf5_developmentDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SERIALDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class V_SETTING_COLUMNSDataTable
        Inherits Global.System.Data.TypedTableBase(Of V_SETTING_COLUMNSRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnSEQ As Global.System.Data.DataColumn
        
        Private columnCOLUMN_NAME As Global.System.Data.DataColumn
        
        Private columnDATA_TYPE As Global.System.Data.DataColumn
        
        Private columnFORMAT_STRING As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "V_SETTING_COLUMNS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SEQColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSEQ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property COLUMN_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOLUMN_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DATA_TYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATA_TYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FORMAT_STRINGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFORMAT_STRING
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As V_SETTING_COLUMNSRow
            Get
                Return CType(Me.Rows(index),V_SETTING_COLUMNSRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event V_SETTING_COLUMNSRowChanging As V_SETTING_COLUMNSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event V_SETTING_COLUMNSRowChanged As V_SETTING_COLUMNSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event V_SETTING_COLUMNSRowDeleting As V_SETTING_COLUMNSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event V_SETTING_COLUMNSRowDeleted As V_SETTING_COLUMNSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddV_SETTING_COLUMNSRow(ByVal row As V_SETTING_COLUMNSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddV_SETTING_COLUMNSRow(ByVal SEQ As Integer, ByVal COLUMN_NAME As String, ByVal DATA_TYPE As String, ByVal FORMAT_STRING As String) As V_SETTING_COLUMNSRow
            Dim rowV_SETTING_COLUMNSRow As V_SETTING_COLUMNSRow = CType(Me.NewRow,V_SETTING_COLUMNSRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, SEQ, COLUMN_NAME, DATA_TYPE, FORMAT_STRING}
            rowV_SETTING_COLUMNSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowV_SETTING_COLUMNSRow)
            Return rowV_SETTING_COLUMNSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByID(ByVal ID As Integer) As V_SETTING_COLUMNSRow
            Return CType(Me.Rows.Find(New Object() {ID}),V_SETTING_COLUMNSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As V_SETTING_COLUMNSDataTable = CType(MyBase.Clone,V_SETTING_COLUMNSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New V_SETTING_COLUMNSDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnSEQ = MyBase.Columns("SEQ")
            Me.columnCOLUMN_NAME = MyBase.Columns("COLUMN_NAME")
            Me.columnDATA_TYPE = MyBase.Columns("DATA_TYPE")
            Me.columnFORMAT_STRING = MyBase.Columns("FORMAT_STRING")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnSEQ = New Global.System.Data.DataColumn("SEQ", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSEQ)
            Me.columnCOLUMN_NAME = New Global.System.Data.DataColumn("COLUMN_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOLUMN_NAME)
            Me.columnDATA_TYPE = New Global.System.Data.DataColumn("DATA_TYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATA_TYPE)
            Me.columnFORMAT_STRING = New Global.System.Data.DataColumn("FORMAT_STRING", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFORMAT_STRING)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AutoIncrementSeed = -1
            Me.columnID.AutoIncrementStep = -1
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnSEQ.AllowDBNull = false
            Me.columnCOLUMN_NAME.AllowDBNull = false
            Me.columnCOLUMN_NAME.MaxLength = 255
            Me.columnDATA_TYPE.AllowDBNull = false
            Me.columnDATA_TYPE.MaxLength = 1
            Me.columnFORMAT_STRING.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewV_SETTING_COLUMNSRow() As V_SETTING_COLUMNSRow
            Return CType(Me.NewRow,V_SETTING_COLUMNSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New V_SETTING_COLUMNSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(V_SETTING_COLUMNSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.V_SETTING_COLUMNSRowChangedEvent) Is Nothing) Then
                RaiseEvent V_SETTING_COLUMNSRowChanged(Me, New V_SETTING_COLUMNSRowChangeEvent(CType(e.Row,V_SETTING_COLUMNSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.V_SETTING_COLUMNSRowChangingEvent) Is Nothing) Then
                RaiseEvent V_SETTING_COLUMNSRowChanging(Me, New V_SETTING_COLUMNSRowChangeEvent(CType(e.Row,V_SETTING_COLUMNSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.V_SETTING_COLUMNSRowDeletedEvent) Is Nothing) Then
                RaiseEvent V_SETTING_COLUMNSRowDeleted(Me, New V_SETTING_COLUMNSRowChangeEvent(CType(e.Row,V_SETTING_COLUMNSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.V_SETTING_COLUMNSRowDeletingEvent) Is Nothing) Then
                RaiseEvent V_SETTING_COLUMNSRowDeleting(Me, New V_SETTING_COLUMNSRowChangeEvent(CType(e.Row,V_SETTING_COLUMNSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveV_SETTING_COLUMNSRow(ByVal row As V_SETTING_COLUMNSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As ihi_rhf5_developmentDataSet = New ihi_rhf5_developmentDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "V_SETTING_COLUMNSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MACHINE_DATA_STR_w_SERIALDataTable
        Inherits Global.System.Data.TypedTableBase(Of MACHINE_DATA_STR_w_SERIALRow)
        
        Private columnRESULT_ID As Global.System.Data.DataColumn
        
        Private columnMACHINE_COLUMNS_ID As Global.System.Data.DataColumn
        
        Private columnDATA As Global.System.Data.DataColumn
        
        Private columnSERIAL_ID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MACHINE_DATA_STR_w_SERIAL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RESULT_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRESULT_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MACHINE_COLUMNS_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMACHINE_COLUMNS_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DATAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SERIAL_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSERIAL_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MACHINE_DATA_STR_w_SERIALRow
            Get
                Return CType(Me.Rows(index),MACHINE_DATA_STR_w_SERIALRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event MACHINE_DATA_STR_w_SERIALRowChanging As MACHINE_DATA_STR_w_SERIALRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event MACHINE_DATA_STR_w_SERIALRowChanged As MACHINE_DATA_STR_w_SERIALRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event MACHINE_DATA_STR_w_SERIALRowDeleting As MACHINE_DATA_STR_w_SERIALRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event MACHINE_DATA_STR_w_SERIALRowDeleted As MACHINE_DATA_STR_w_SERIALRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddMACHINE_DATA_STR_w_SERIALRow(ByVal row As MACHINE_DATA_STR_w_SERIALRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddMACHINE_DATA_STR_w_SERIALRow(ByVal parentRESULTRowByFK_MACHINE_DATA_STR_RESULT1 As RESULTRow, ByVal parentMACHINE_COLUMNSRowByFK_MACHINE_DATA_STR_MACHINE_COLUMNS2 As MACHINE_COLUMNSRow, ByVal DATA As String, ByVal SERIAL_ID As Integer) As MACHINE_DATA_STR_w_SERIALRow
            Dim rowMACHINE_DATA_STR_w_SERIALRow As MACHINE_DATA_STR_w_SERIALRow = CType(Me.NewRow,MACHINE_DATA_STR_w_SERIALRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nothing, DATA, SERIAL_ID}
            If (Not (parentRESULTRowByFK_MACHINE_DATA_STR_RESULT1) Is Nothing) Then
                columnValuesArray(0) = parentRESULTRowByFK_MACHINE_DATA_STR_RESULT1(0)
            End If
            If (Not (parentMACHINE_COLUMNSRowByFK_MACHINE_DATA_STR_MACHINE_COLUMNS2) Is Nothing) Then
                columnValuesArray(1) = parentMACHINE_COLUMNSRowByFK_MACHINE_DATA_STR_MACHINE_COLUMNS2(0)
            End If
            rowMACHINE_DATA_STR_w_SERIALRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMACHINE_DATA_STR_w_SERIALRow)
            Return rowMACHINE_DATA_STR_w_SERIALRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByRESULT_IDMACHINE_COLUMNS_ID(ByVal RESULT_ID As Integer, ByVal MACHINE_COLUMNS_ID As Integer) As MACHINE_DATA_STR_w_SERIALRow
            Return CType(Me.Rows.Find(New Object() {RESULT_ID, MACHINE_COLUMNS_ID}),MACHINE_DATA_STR_w_SERIALRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MACHINE_DATA_STR_w_SERIALDataTable = CType(MyBase.Clone,MACHINE_DATA_STR_w_SERIALDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MACHINE_DATA_STR_w_SERIALDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnRESULT_ID = MyBase.Columns("RESULT_ID")
            Me.columnMACHINE_COLUMNS_ID = MyBase.Columns("MACHINE_COLUMNS_ID")
            Me.columnDATA = MyBase.Columns("DATA")
            Me.columnSERIAL_ID = MyBase.Columns("SERIAL_ID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnRESULT_ID = New Global.System.Data.DataColumn("RESULT_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRESULT_ID)
            Me.columnMACHINE_COLUMNS_ID = New Global.System.Data.DataColumn("MACHINE_COLUMNS_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMACHINE_COLUMNS_ID)
            Me.columnDATA = New Global.System.Data.DataColumn("DATA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATA)
            Me.columnSERIAL_ID = New Global.System.Data.DataColumn("SERIAL_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSERIAL_ID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnRESULT_ID, Me.columnMACHINE_COLUMNS_ID}, true))
            Me.columnRESULT_ID.AllowDBNull = false
            Me.columnMACHINE_COLUMNS_ID.AllowDBNull = false
            Me.columnDATA.AllowDBNull = false
            Me.columnDATA.MaxLength = 255
            Me.columnSERIAL_ID.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewMACHINE_DATA_STR_w_SERIALRow() As MACHINE_DATA_STR_w_SERIALRow
            Return CType(Me.NewRow,MACHINE_DATA_STR_w_SERIALRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MACHINE_DATA_STR_w_SERIALRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MACHINE_DATA_STR_w_SERIALRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MACHINE_DATA_STR_w_SERIALRowChangedEvent) Is Nothing) Then
                RaiseEvent MACHINE_DATA_STR_w_SERIALRowChanged(Me, New MACHINE_DATA_STR_w_SERIALRowChangeEvent(CType(e.Row,MACHINE_DATA_STR_w_SERIALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MACHINE_DATA_STR_w_SERIALRowChangingEvent) Is Nothing) Then
                RaiseEvent MACHINE_DATA_STR_w_SERIALRowChanging(Me, New MACHINE_DATA_STR_w_SERIALRowChangeEvent(CType(e.Row,MACHINE_DATA_STR_w_SERIALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MACHINE_DATA_STR_w_SERIALRowDeletedEvent) Is Nothing) Then
                RaiseEvent MACHINE_DATA_STR_w_SERIALRowDeleted(Me, New MACHINE_DATA_STR_w_SERIALRowChangeEvent(CType(e.Row,MACHINE_DATA_STR_w_SERIALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MACHINE_DATA_STR_w_SERIALRowDeletingEvent) Is Nothing) Then
                RaiseEvent MACHINE_DATA_STR_w_SERIALRowDeleting(Me, New MACHINE_DATA_STR_w_SERIALRowChangeEvent(CType(e.Row,MACHINE_DATA_STR_w_SERIALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveMACHINE_DATA_STR_w_SERIALRow(ByVal row As MACHINE_DATA_STR_w_SERIALRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As ihi_rhf5_developmentDataSet = New ihi_rhf5_developmentDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MACHINE_DATA_STR_w_SERIALDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class LOT_PART_w_LOTDataTable
        Inherits Global.System.Data.TypedTableBase(Of LOT_PART_w_LOTRow)
        
        Private columnLOT_CS As Global.System.Data.DataColumn
        
        Private columnLOT_ITA As Global.System.Data.DataColumn
        
        Private columnPART_NO As Global.System.Data.DataColumn
        
        Private columnSEQ As Global.System.Data.DataColumn
        
        Private columnPART_LOT_NO As Global.System.Data.DataColumn
        
        Private columnQTY As Global.System.Data.DataColumn
        
        Private columnCREATED_WHEN As Global.System.Data.DataColumn
        
        Private columnDATE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "LOT_PART_w_LOT"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LOT_CSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLOT_CS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LOT_ITAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLOT_ITA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PART_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPART_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SEQColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSEQ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PART_LOT_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPART_LOT_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property QTYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQTY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CREATED_WHENColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCREATED_WHEN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As LOT_PART_w_LOTRow
            Get
                Return CType(Me.Rows(index),LOT_PART_w_LOTRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event LOT_PART_w_LOTRowChanging As LOT_PART_w_LOTRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event LOT_PART_w_LOTRowChanged As LOT_PART_w_LOTRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event LOT_PART_w_LOTRowDeleting As LOT_PART_w_LOTRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event LOT_PART_w_LOTRowDeleted As LOT_PART_w_LOTRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddLOT_PART_w_LOTRow(ByVal row As LOT_PART_w_LOTRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddLOT_PART_w_LOTRow(ByVal LOT_CS As String, ByVal LOT_ITA As String, ByVal PART_NO As String, ByVal SEQ As Integer, ByVal PART_LOT_NO As String, ByVal QTY As Integer, ByVal CREATED_WHEN As Date, ByVal _DATE As Date) As LOT_PART_w_LOTRow
            Dim rowLOT_PART_w_LOTRow As LOT_PART_w_LOTRow = CType(Me.NewRow,LOT_PART_w_LOTRow)
            Dim columnValuesArray() As Object = New Object() {LOT_CS, LOT_ITA, PART_NO, SEQ, PART_LOT_NO, QTY, CREATED_WHEN, _DATE}
            rowLOT_PART_w_LOTRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowLOT_PART_w_LOTRow)
            Return rowLOT_PART_w_LOTRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As LOT_PART_w_LOTDataTable = CType(MyBase.Clone,LOT_PART_w_LOTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New LOT_PART_w_LOTDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnLOT_CS = MyBase.Columns("LOT_CS")
            Me.columnLOT_ITA = MyBase.Columns("LOT_ITA")
            Me.columnPART_NO = MyBase.Columns("PART_NO")
            Me.columnSEQ = MyBase.Columns("SEQ")
            Me.columnPART_LOT_NO = MyBase.Columns("PART_LOT_NO")
            Me.columnQTY = MyBase.Columns("QTY")
            Me.columnCREATED_WHEN = MyBase.Columns("CREATED_WHEN")
            Me.columnDATE = MyBase.Columns("DATE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnLOT_CS = New Global.System.Data.DataColumn("LOT_CS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLOT_CS)
            Me.columnLOT_ITA = New Global.System.Data.DataColumn("LOT_ITA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLOT_ITA)
            Me.columnPART_NO = New Global.System.Data.DataColumn("PART_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPART_NO)
            Me.columnSEQ = New Global.System.Data.DataColumn("SEQ", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSEQ)
            Me.columnPART_LOT_NO = New Global.System.Data.DataColumn("PART_LOT_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPART_LOT_NO)
            Me.columnQTY = New Global.System.Data.DataColumn("QTY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQTY)
            Me.columnCREATED_WHEN = New Global.System.Data.DataColumn("CREATED_WHEN", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCREATED_WHEN)
            Me.columnDATE = New Global.System.Data.DataColumn("DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            Me.columnDATE.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "DATEColumn")
            Me.columnDATE.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnDATE")
            Me.columnDATE.ExtendedProperties.Add("Generator_UserColumnName", "DATE")
            MyBase.Columns.Add(Me.columnDATE)
            Me.columnLOT_CS.AllowDBNull = false
            Me.columnLOT_CS.MaxLength = 20
            Me.columnLOT_ITA.AllowDBNull = false
            Me.columnLOT_ITA.MaxLength = 50
            Me.columnPART_NO.AllowDBNull = false
            Me.columnPART_NO.MaxLength = 20
            Me.columnSEQ.AllowDBNull = false
            Me.columnPART_LOT_NO.AllowDBNull = false
            Me.columnPART_LOT_NO.MaxLength = 20
            Me.columnQTY.AllowDBNull = false
            Me.columnCREATED_WHEN.AllowDBNull = false
            Me.columnDATE.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewLOT_PART_w_LOTRow() As LOT_PART_w_LOTRow
            Return CType(Me.NewRow,LOT_PART_w_LOTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New LOT_PART_w_LOTRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(LOT_PART_w_LOTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.LOT_PART_w_LOTRowChangedEvent) Is Nothing) Then
                RaiseEvent LOT_PART_w_LOTRowChanged(Me, New LOT_PART_w_LOTRowChangeEvent(CType(e.Row,LOT_PART_w_LOTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.LOT_PART_w_LOTRowChangingEvent) Is Nothing) Then
                RaiseEvent LOT_PART_w_LOTRowChanging(Me, New LOT_PART_w_LOTRowChangeEvent(CType(e.Row,LOT_PART_w_LOTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.LOT_PART_w_LOTRowDeletedEvent) Is Nothing) Then
                RaiseEvent LOT_PART_w_LOTRowDeleted(Me, New LOT_PART_w_LOTRowChangeEvent(CType(e.Row,LOT_PART_w_LOTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.LOT_PART_w_LOTRowDeletingEvent) Is Nothing) Then
                RaiseEvent LOT_PART_w_LOTRowDeleting(Me, New LOT_PART_w_LOTRowChangeEvent(CType(e.Row,LOT_PART_w_LOTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveLOT_PART_w_LOTRow(ByVal row As LOT_PART_w_LOTRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As ihi_rhf5_developmentDataSet = New ihi_rhf5_developmentDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "LOT_PART_w_LOTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class LINE_MASTERRow
        Inherits Global.System.Data.DataRow
        
        Private tableLINE_MASTER As LINE_MASTERDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableLINE_MASTER = CType(Me.Table,LINE_MASTERDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableLINE_MASTER.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableLINE_MASTER.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LINE_NAME() As String
            Get
                Return CType(Me(Me.tableLINE_MASTER.LINE_NAMEColumn),String)
            End Get
            Set
                Me(Me.tableLINE_MASTER.LINE_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SEQ() As Integer
            Get
                Return CType(Me(Me.tableLINE_MASTER.SEQColumn),Integer)
            End Get
            Set
                Me(Me.tableLINE_MASTER.SEQColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ROOT_PATH() As String
            Get
                Return CType(Me(Me.tableLINE_MASTER.ROOT_PATHColumn),String)
            End Get
            Set
                Me(Me.tableLINE_MASTER.ROOT_PATHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ROOT_TEMP() As String
            Get
                Return CType(Me(Me.tableLINE_MASTER.ROOT_TEMPColumn),String)
            End Get
            Set
                Me(Me.tableLINE_MASTER.ROOT_TEMPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SLEEP_INTERVAL() As Integer
            Get
                Return CType(Me(Me.tableLINE_MASTER.SLEEP_INTERVALColumn),Integer)
            End Get
            Set
                Me(Me.tableLINE_MASTER.SLEEP_INTERVALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property READ_ASCII_LENGTH() As Integer
            Get
                Return CType(Me(Me.tableLINE_MASTER.READ_ASCII_LENGTHColumn),Integer)
            End Get
            Set
                Me(Me.tableLINE_MASTER.READ_ASCII_LENGTHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property READ_BCD_LENGTH() As Integer
            Get
                Return CType(Me(Me.tableLINE_MASTER.READ_BCD_LENGTHColumn),Integer)
            End Get
            Set
                Me(Me.tableLINE_MASTER.READ_BCD_LENGTHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SYNC_TIME_WHEN() As String
            Get
                Return CType(Me(Me.tableLINE_MASTER.SYNC_TIME_WHENColumn),String)
            End Get
            Set
                Me(Me.tableLINE_MASTER.SYNC_TIME_WHENColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property USE_CSV_MODE() As Boolean
            Get
                Return CType(Me(Me.tableLINE_MASTER.USE_CSV_MODEColumn),Boolean)
            End Get
            Set
                Me(Me.tableLINE_MASTER.USE_CSV_MODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property USE_XLS_MODE() As Boolean
            Get
                Return CType(Me(Me.tableLINE_MASTER.USE_XLS_MODEColumn),Boolean)
            End Get
            Set
                Me(Me.tableLINE_MASTER.USE_XLS_MODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetMACHINERows() As MACHINERow()
            If (Me.Table.ChildRelations("FK_MACHINE_LINE_MASTER") Is Nothing) Then
                Return New MACHINERow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_MACHINE_LINE_MASTER")),MACHINERow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class MACHINERow
        Inherits Global.System.Data.DataRow
        
        Private tableMACHINE As MACHINEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMACHINE = CType(Me.Table,MACHINEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableMACHINE.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableMACHINE.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LINE_ID() As Integer
            Get
                Return CType(Me(Me.tableMACHINE.LINE_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableMACHINE.LINE_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SEQ() As Integer
            Get
                Return CType(Me(Me.tableMACHINE.SEQColumn),Integer)
            End Get
            Set
                Me(Me.tableMACHINE.SEQColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MACHINE_NO() As Integer
            Get
                Return CType(Me(Me.tableMACHINE.MACHINE_NOColumn),Integer)
            End Get
            Set
                Me(Me.tableMACHINE.MACHINE_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MACHINE_NAME() As String
            Get
                Return CType(Me(Me.tableMACHINE.MACHINE_NAMEColumn),String)
            End Get
            Set
                Me(Me.tableMACHINE.MACHINE_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PATH() As String
            Get
                Return CType(Me(Me.tableMACHINE.PATHColumn),String)
            End Get
            Set
                Me(Me.tableMACHINE.PATHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLC_NET() As Integer
            Get
                Return CType(Me(Me.tableMACHINE.PLC_NETColumn),Integer)
            End Get
            Set
                Me(Me.tableMACHINE.PLC_NETColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLC_NODE() As Integer
            Get
                Return CType(Me(Me.tableMACHINE.PLC_NODEColumn),Integer)
            End Get
            Set
                Me(Me.tableMACHINE.PLC_NODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLC_UNIT() As Integer
            Get
                Return CType(Me(Me.tableMACHINE.PLC_UNITColumn),Integer)
            End Get
            Set
                Me(Me.tableMACHINE.PLC_UNITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property READ_STATUS_ADDRESS() As String
            Get
                Return CType(Me(Me.tableMACHINE.READ_STATUS_ADDRESSColumn),String)
            End Get
            Set
                Me(Me.tableMACHINE.READ_STATUS_ADDRESSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property READ_STATUS_LENGTH() As Integer
            Get
                Return CType(Me(Me.tableMACHINE.READ_STATUS_LENGTHColumn),Integer)
            End Get
            Set
                Me(Me.tableMACHINE.READ_STATUS_LENGTHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property READ_DATA_ADDRESS() As String
            Get
                Return CType(Me(Me.tableMACHINE.READ_DATA_ADDRESSColumn),String)
            End Get
            Set
                Me(Me.tableMACHINE.READ_DATA_ADDRESSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property WRITE_STATUS_ADDRESS() As String
            Get
                Return CType(Me(Me.tableMACHINE.WRITE_STATUS_ADDRESSColumn),String)
            End Get
            Set
                Me(Me.tableMACHINE.WRITE_STATUS_ADDRESSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property WRITE_LIFE_ADDRESS() As String
            Get
                Return CType(Me(Me.tableMACHINE.WRITE_LIFE_ADDRESSColumn),String)
            End Get
            Set
                Me(Me.tableMACHINE.WRITE_LIFE_ADDRESSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property WRITE_SYNC_ADDRESS() As String
            Get
                Return CType(Me(Me.tableMACHINE.WRITE_SYNC_ADDRESSColumn),String)
            End Get
            Set
                Me(Me.tableMACHINE.WRITE_SYNC_ADDRESSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property COPY_FILE() As Boolean
            Get
                Return CType(Me(Me.tableMACHINE.COPY_FILEColumn),Boolean)
            End Get
            Set
                Me(Me.tableMACHINE.COPY_FILEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property COPY_PATH() As String
            Get
                Return CType(Me(Me.tableMACHINE.COPY_PATHColumn),String)
            End Get
            Set
                Me(Me.tableMACHINE.COPY_PATHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property COPY_WILDCARD() As String
            Get
                Return CType(Me(Me.tableMACHINE.COPY_WILDCARDColumn),String)
            End Get
            Set
                Me(Me.tableMACHINE.COPY_WILDCARDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property COPY_PURGE_OLD_PATH() As String
            Get
                Return CType(Me(Me.tableMACHINE.COPY_PURGE_OLD_PATHColumn),String)
            End Get
            Set
                Me(Me.tableMACHINE.COPY_PURGE_OLD_PATHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property COPY_PERIOD_MILLISEC() As Integer
            Get
                Return CType(Me(Me.tableMACHINE.COPY_PERIOD_MILLISECColumn),Integer)
            End Get
            Set
                Me(Me.tableMACHINE.COPY_PERIOD_MILLISECColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property COPY_PURGE_PERIOD_DAY() As Integer
            Get
                Return CType(Me(Me.tableMACHINE.COPY_PURGE_PERIOD_DAYColumn),Integer)
            End Get
            Set
                Me(Me.tableMACHINE.COPY_PURGE_PERIOD_DAYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FORMAT_MODE() As String
            Get
                Return CType(Me(Me.tableMACHINE.FORMAT_MODEColumn),String)
            End Get
            Set
                Me(Me.tableMACHINE.FORMAT_MODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FORMAT_MC() As String
            Get
                Return CType(Me(Me.tableMACHINE.FORMAT_MCColumn),String)
            End Get
            Set
                Me(Me.tableMACHINE.FORMAT_MCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FORMAT_LOT_NO() As String
            Get
                Return CType(Me(Me.tableMACHINE.FORMAT_LOT_NOColumn),String)
            End Get
            Set
                Me(Me.tableMACHINE.FORMAT_LOT_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FORMAT_FILE_NAME() As String
            Get
                Return CType(Me(Me.tableMACHINE.FORMAT_FILE_NAMEColumn),String)
            End Get
            Set
                Me(Me.tableMACHINE.FORMAT_FILE_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FORMAT_DATE_TIME() As String
            Get
                Return CType(Me(Me.tableMACHINE.FORMAT_DATE_TIMEColumn),String)
            End Get
            Set
                Me(Me.tableMACHINE.FORMAT_DATE_TIMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FORMAT_STATUS() As String
            Get
                Return CType(Me(Me.tableMACHINE.FORMAT_STATUSColumn),String)
            End Get
            Set
                Me(Me.tableMACHINE.FORMAT_STATUSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FORMAT_SERIAL_BH() As String
            Get
                Return CType(Me(Me.tableMACHINE.FORMAT_SERIAL_BHColumn),String)
            End Get
            Set
                Me(Me.tableMACHINE.FORMAT_SERIAL_BHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FORMAT_SERIAL_CS() As String
            Get
                Return CType(Me(Me.tableMACHINE.FORMAT_SERIAL_CSColumn),String)
            End Get
            Set
                Me(Me.tableMACHINE.FORMAT_SERIAL_CSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FORMAT_SERIAL_ITA() As String
            Get
                Return CType(Me(Me.tableMACHINE.FORMAT_SERIAL_ITAColumn),String)
            End Get
            Set
                Me(Me.tableMACHINE.FORMAT_SERIAL_ITAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FORMAT_SERIAL_TS() As String
            Get
                Return CType(Me(Me.tableMACHINE.FORMAT_SERIAL_TSColumn),String)
            End Get
            Set
                Me(Me.tableMACHINE.FORMAT_SERIAL_TSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FORMAT_SERIAL_CW() As String
            Get
                Return CType(Me(Me.tableMACHINE.FORMAT_SERIAL_CWColumn),String)
            End Get
            Set
                Me(Me.tableMACHINE.FORMAT_SERIAL_CWColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LINE_MASTERRow() As LINE_MASTERRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_MACHINE_LINE_MASTER")),LINE_MASTERRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_MACHINE_LINE_MASTER"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetMACHINE_COLUMNSRows() As MACHINE_COLUMNSRow()
            If (Me.Table.ChildRelations("FK_MACHINE_COLUMNS_MACHINE") Is Nothing) Then
                Return New MACHINE_COLUMNSRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_MACHINE_COLUMNS_MACHINE")),MACHINE_COLUMNSRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetRESULTRows() As RESULTRow()
            If (Me.Table.ChildRelations("FK_RESULT_MACHINE") Is Nothing) Then
                Return New RESULTRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_RESULT_MACHINE")),RESULTRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class MACHINE_COLUMNSRow
        Inherits Global.System.Data.DataRow
        
        Private tableMACHINE_COLUMNS As MACHINE_COLUMNSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMACHINE_COLUMNS = CType(Me.Table,MACHINE_COLUMNSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableMACHINE_COLUMNS.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableMACHINE_COLUMNS.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MACHINE_ID() As Integer
            Get
                Return CType(Me(Me.tableMACHINE_COLUMNS.MACHINE_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableMACHINE_COLUMNS.MACHINE_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SEQ() As Integer
            Get
                Return CType(Me(Me.tableMACHINE_COLUMNS.SEQColumn),Integer)
            End Get
            Set
                Me(Me.tableMACHINE_COLUMNS.SEQColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SCREEN_COLUMN_NAME() As String
            Get
                Return CType(Me(Me.tableMACHINE_COLUMNS.SCREEN_COLUMN_NAMEColumn),String)
            End Get
            Set
                Me(Me.tableMACHINE_COLUMNS.SCREEN_COLUMN_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FILE_COLUMN_NAME() As String
            Get
                Return CType(Me(Me.tableMACHINE_COLUMNS.FILE_COLUMN_NAMEColumn),String)
            End Get
            Set
                Me(Me.tableMACHINE_COLUMNS.FILE_COLUMN_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DATA_TYPE() As String
            Get
                Return CType(Me(Me.tableMACHINE_COLUMNS.DATA_TYPEColumn),String)
            End Get
            Set
                Me(Me.tableMACHINE_COLUMNS.DATA_TYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property POSITION() As Integer
            Get
                Return CType(Me(Me.tableMACHINE_COLUMNS.POSITIONColumn),Integer)
            End Get
            Set
                Me(Me.tableMACHINE_COLUMNS.POSITIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LENGTH() As Integer
            Get
                Return CType(Me(Me.tableMACHINE_COLUMNS.LENGTHColumn),Integer)
            End Get
            Set
                Me(Me.tableMACHINE_COLUMNS.LENGTHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MULTIPLIER() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMACHINE_COLUMNS.MULTIPLIERColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MULTIPLIER' in table 'MACHINE_COLUMNS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMACHINE_COLUMNS.MULTIPLIERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FORMAT_STRING() As String
            Get
                Try 
                    Return CType(Me(Me.tableMACHINE_COLUMNS.FORMAT_STRINGColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FORMAT_STRING' in table 'MACHINE_COLUMNS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMACHINE_COLUMNS.FORMAT_STRINGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property REPLACE_COLUMN_NAME() As String
            Get
                Return CType(Me(Me.tableMACHINE_COLUMNS.REPLACE_COLUMN_NAMEColumn),String)
            End Get
            Set
                Me(Me.tableMACHINE_COLUMNS.REPLACE_COLUMN_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MACHINERow() As MACHINERow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_MACHINE_COLUMNS_MACHINE")),MACHINERow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_MACHINE_COLUMNS_MACHINE"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMULTIPLIERNull() As Boolean
            Return Me.IsNull(Me.tableMACHINE_COLUMNS.MULTIPLIERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMULTIPLIERNull()
            Me(Me.tableMACHINE_COLUMNS.MULTIPLIERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsFORMAT_STRINGNull() As Boolean
            Return Me.IsNull(Me.tableMACHINE_COLUMNS.FORMAT_STRINGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetFORMAT_STRINGNull()
            Me(Me.tableMACHINE_COLUMNS.FORMAT_STRINGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetMACHINE_DATA_STRRows() As MACHINE_DATA_STRRow()
            If (Me.Table.ChildRelations("FK_MACHINE_DATA_STR_MACHINE_COLUMNS") Is Nothing) Then
                Return New MACHINE_DATA_STRRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_MACHINE_DATA_STR_MACHINE_COLUMNS")),MACHINE_DATA_STRRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetMACHINE_DATA_STR_w_SERIALRows() As MACHINE_DATA_STR_w_SERIALRow()
            If (Me.Table.ChildRelations("FK_MACHINE_DATA_STR_MACHINE_COLUMNS2") Is Nothing) Then
                Return New MACHINE_DATA_STR_w_SERIALRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_MACHINE_DATA_STR_MACHINE_COLUMNS2")),MACHINE_DATA_STR_w_SERIALRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class MACHINE_DATA_STRRow
        Inherits Global.System.Data.DataRow
        
        Private tableMACHINE_DATA_STR As MACHINE_DATA_STRDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMACHINE_DATA_STR = CType(Me.Table,MACHINE_DATA_STRDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RESULT_ID() As Integer
            Get
                Return CType(Me(Me.tableMACHINE_DATA_STR.RESULT_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableMACHINE_DATA_STR.RESULT_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MACHINE_COLUMNS_ID() As Integer
            Get
                Return CType(Me(Me.tableMACHINE_DATA_STR.MACHINE_COLUMNS_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableMACHINE_DATA_STR.MACHINE_COLUMNS_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DATA() As String
            Get
                Return CType(Me(Me.tableMACHINE_DATA_STR.DATAColumn),String)
            End Get
            Set
                Me(Me.tableMACHINE_DATA_STR.DATAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MACHINE_COLUMNSRow() As MACHINE_COLUMNSRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_MACHINE_DATA_STR_MACHINE_COLUMNS")),MACHINE_COLUMNSRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_MACHINE_DATA_STR_MACHINE_COLUMNS"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RESULTRow() As RESULTRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_MACHINE_DATA_STR_RESULT")),RESULTRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_MACHINE_DATA_STR_RESULT"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property V_SETTING_COLUMNSRow() As V_SETTING_COLUMNSRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_MACHINE_DATA_STR_MACHINE_COLUMNS1")),V_SETTING_COLUMNSRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_MACHINE_DATA_STR_MACHINE_COLUMNS1"))
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class RESULTRow
        Inherits Global.System.Data.DataRow
        
        Private tableRESULT As RESULTDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableRESULT = CType(Me.Table,RESULTDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TRAN_ID() As Integer
            Get
                Return CType(Me(Me.tableRESULT.TRAN_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableRESULT.TRAN_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SERIAL_ID() As Integer
            Get
                Return CType(Me(Me.tableRESULT.SERIAL_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableRESULT.SERIAL_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MODE() As String
            Get
                Return CType(Me(Me.tableRESULT.MODEColumn),String)
            End Get
            Set
                Me(Me.tableRESULT.MODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MACHINE_ID() As Integer
            Get
                Return CType(Me(Me.tableRESULT.MACHINE_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableRESULT.MACHINE_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LOT_NO() As String
            Get
                Return CType(Me(Me.tableRESULT.LOT_NOColumn),String)
            End Get
            Set
                Me(Me.tableRESULT.LOT_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FILE_NAME() As String
            Get
                Return CType(Me(Me.tableRESULT.FILE_NAMEColumn),String)
            End Get
            Set
                Me(Me.tableRESULT.FILE_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RESULT_DATE_TIME() As Date
            Get
                Return CType(Me(Me.tableRESULT.RESULT_DATE_TIMEColumn),Date)
            End Get
            Set
                Me(Me.tableRESULT.RESULT_DATE_TIMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property STATUS() As String
            Get
                Return CType(Me(Me.tableRESULT.STATUSColumn),String)
            End Get
            Set
                Me(Me.tableRESULT.STATUSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CREATED_WHEN() As Date
            Get
                Return CType(Me(Me.tableRESULT.CREATED_WHENColumn),Date)
            End Get
            Set
                Me(Me.tableRESULT.CREATED_WHENColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MACHINERow() As MACHINERow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_RESULT_MACHINE")),MACHINERow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_RESULT_MACHINE"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SERIALRow() As SERIALRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_RESULT_SERIAL")),SERIALRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_RESULT_SERIAL"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetMACHINE_DATA_STRRows() As MACHINE_DATA_STRRow()
            If (Me.Table.ChildRelations("FK_MACHINE_DATA_STR_RESULT") Is Nothing) Then
                Return New MACHINE_DATA_STRRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_MACHINE_DATA_STR_RESULT")),MACHINE_DATA_STRRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetMACHINE_DATA_STR_w_SERIALRows() As MACHINE_DATA_STR_w_SERIALRow()
            If (Me.Table.ChildRelations("FK_MACHINE_DATA_STR_RESULT1") Is Nothing) Then
                Return New MACHINE_DATA_STR_w_SERIALRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_MACHINE_DATA_STR_RESULT1")),MACHINE_DATA_STR_w_SERIALRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class SERIALRow
        Inherits Global.System.Data.DataRow
        
        Private tableSERIAL As SERIALDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSERIAL = CType(Me.Table,SERIALDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SERIAL_ID() As Integer
            Get
                Return CType(Me(Me.tableSERIAL.SERIAL_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableSERIAL.SERIAL_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SERIAL_BH() As String
            Get
                Return CType(Me(Me.tableSERIAL.SERIAL_BHColumn),String)
            End Get
            Set
                Me(Me.tableSERIAL.SERIAL_BHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SEQ_NO() As Integer
            Get
                Return CType(Me(Me.tableSERIAL.SEQ_NOColumn),Integer)
            End Get
            Set
                Me(Me.tableSERIAL.SEQ_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SERIAL_CS() As String
            Get
                Try 
                    Return CType(Me(Me.tableSERIAL.SERIAL_CSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SERIAL_CS' in table 'SERIAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSERIAL.SERIAL_CSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SERIAL_ITA() As String
            Get
                Try 
                    Return CType(Me(Me.tableSERIAL.SERIAL_ITAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SERIAL_ITA' in table 'SERIAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSERIAL.SERIAL_ITAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CREATED_WHEN() As Date
            Get
                Return CType(Me(Me.tableSERIAL.CREATED_WHENColumn),Date)
            End Get
            Set
                Me(Me.tableSERIAL.CREATED_WHENColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SERIAL_TS() As String
            Get
                Try 
                    Return CType(Me(Me.tableSERIAL.SERIAL_TSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SERIAL_TS' in table 'SERIAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSERIAL.SERIAL_TSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SERIAL_CW() As String
            Get
                Try 
                    Return CType(Me(Me.tableSERIAL.SERIAL_CWColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SERIAL_CW' in table 'SERIAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSERIAL.SERIAL_CWColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSERIAL_CSNull() As Boolean
            Return Me.IsNull(Me.tableSERIAL.SERIAL_CSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSERIAL_CSNull()
            Me(Me.tableSERIAL.SERIAL_CSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSERIAL_ITANull() As Boolean
            Return Me.IsNull(Me.tableSERIAL.SERIAL_ITAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSERIAL_ITANull()
            Me(Me.tableSERIAL.SERIAL_ITAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSERIAL_TSNull() As Boolean
            Return Me.IsNull(Me.tableSERIAL.SERIAL_TSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSERIAL_TSNull()
            Me(Me.tableSERIAL.SERIAL_TSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSERIAL_CWNull() As Boolean
            Return Me.IsNull(Me.tableSERIAL.SERIAL_CWColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSERIAL_CWNull()
            Me(Me.tableSERIAL.SERIAL_CWColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetRESULTRows() As RESULTRow()
            If (Me.Table.ChildRelations("FK_RESULT_SERIAL") Is Nothing) Then
                Return New RESULTRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_RESULT_SERIAL")),RESULTRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class V_SETTING_COLUMNSRow
        Inherits Global.System.Data.DataRow
        
        Private tableV_SETTING_COLUMNS As V_SETTING_COLUMNSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableV_SETTING_COLUMNS = CType(Me.Table,V_SETTING_COLUMNSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableV_SETTING_COLUMNS.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableV_SETTING_COLUMNS.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SEQ() As Integer
            Get
                Return CType(Me(Me.tableV_SETTING_COLUMNS.SEQColumn),Integer)
            End Get
            Set
                Me(Me.tableV_SETTING_COLUMNS.SEQColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property COLUMN_NAME() As String
            Get
                Return CType(Me(Me.tableV_SETTING_COLUMNS.COLUMN_NAMEColumn),String)
            End Get
            Set
                Me(Me.tableV_SETTING_COLUMNS.COLUMN_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DATA_TYPE() As String
            Get
                Return CType(Me(Me.tableV_SETTING_COLUMNS.DATA_TYPEColumn),String)
            End Get
            Set
                Me(Me.tableV_SETTING_COLUMNS.DATA_TYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FORMAT_STRING() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_SETTING_COLUMNS.FORMAT_STRINGColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FORMAT_STRING' in table 'V_SETTING_COLUMNS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_SETTING_COLUMNS.FORMAT_STRINGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsFORMAT_STRINGNull() As Boolean
            Return Me.IsNull(Me.tableV_SETTING_COLUMNS.FORMAT_STRINGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetFORMAT_STRINGNull()
            Me(Me.tableV_SETTING_COLUMNS.FORMAT_STRINGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetMACHINE_DATA_STRRows() As MACHINE_DATA_STRRow()
            If (Me.Table.ChildRelations("FK_MACHINE_DATA_STR_MACHINE_COLUMNS1") Is Nothing) Then
                Return New MACHINE_DATA_STRRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_MACHINE_DATA_STR_MACHINE_COLUMNS1")),MACHINE_DATA_STRRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetMACHINE_DATA_STR_w_SERIALRows() As MACHINE_DATA_STR_w_SERIALRow()
            If (Me.Table.ChildRelations("FK_MACHINE_DATA_STR_MACHINE_COLUMNS3") Is Nothing) Then
                Return New MACHINE_DATA_STR_w_SERIALRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_MACHINE_DATA_STR_MACHINE_COLUMNS3")),MACHINE_DATA_STR_w_SERIALRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class MACHINE_DATA_STR_w_SERIALRow
        Inherits Global.System.Data.DataRow
        
        Private tableMACHINE_DATA_STR_w_SERIAL As MACHINE_DATA_STR_w_SERIALDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMACHINE_DATA_STR_w_SERIAL = CType(Me.Table,MACHINE_DATA_STR_w_SERIALDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RESULT_ID() As Integer
            Get
                Return CType(Me(Me.tableMACHINE_DATA_STR_w_SERIAL.RESULT_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableMACHINE_DATA_STR_w_SERIAL.RESULT_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MACHINE_COLUMNS_ID() As Integer
            Get
                Return CType(Me(Me.tableMACHINE_DATA_STR_w_SERIAL.MACHINE_COLUMNS_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableMACHINE_DATA_STR_w_SERIAL.MACHINE_COLUMNS_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DATA() As String
            Get
                Return CType(Me(Me.tableMACHINE_DATA_STR_w_SERIAL.DATAColumn),String)
            End Get
            Set
                Me(Me.tableMACHINE_DATA_STR_w_SERIAL.DATAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SERIAL_ID() As Integer
            Get
                Return CType(Me(Me.tableMACHINE_DATA_STR_w_SERIAL.SERIAL_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableMACHINE_DATA_STR_w_SERIAL.SERIAL_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MACHINE_COLUMNSRow() As MACHINE_COLUMNSRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_MACHINE_DATA_STR_MACHINE_COLUMNS2")),MACHINE_COLUMNSRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_MACHINE_DATA_STR_MACHINE_COLUMNS2"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property V_SETTING_COLUMNSRow() As V_SETTING_COLUMNSRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_MACHINE_DATA_STR_MACHINE_COLUMNS3")),V_SETTING_COLUMNSRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_MACHINE_DATA_STR_MACHINE_COLUMNS3"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RESULTRow() As RESULTRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_MACHINE_DATA_STR_RESULT1")),RESULTRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_MACHINE_DATA_STR_RESULT1"))
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class LOT_PART_w_LOTRow
        Inherits Global.System.Data.DataRow
        
        Private tableLOT_PART_w_LOT As LOT_PART_w_LOTDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableLOT_PART_w_LOT = CType(Me.Table,LOT_PART_w_LOTDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LOT_CS() As String
            Get
                Return CType(Me(Me.tableLOT_PART_w_LOT.LOT_CSColumn),String)
            End Get
            Set
                Me(Me.tableLOT_PART_w_LOT.LOT_CSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LOT_ITA() As String
            Get
                Return CType(Me(Me.tableLOT_PART_w_LOT.LOT_ITAColumn),String)
            End Get
            Set
                Me(Me.tableLOT_PART_w_LOT.LOT_ITAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PART_NO() As String
            Get
                Return CType(Me(Me.tableLOT_PART_w_LOT.PART_NOColumn),String)
            End Get
            Set
                Me(Me.tableLOT_PART_w_LOT.PART_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SEQ() As Integer
            Get
                Return CType(Me(Me.tableLOT_PART_w_LOT.SEQColumn),Integer)
            End Get
            Set
                Me(Me.tableLOT_PART_w_LOT.SEQColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PART_LOT_NO() As String
            Get
                Return CType(Me(Me.tableLOT_PART_w_LOT.PART_LOT_NOColumn),String)
            End Get
            Set
                Me(Me.tableLOT_PART_w_LOT.PART_LOT_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property QTY() As Integer
            Get
                Return CType(Me(Me.tableLOT_PART_w_LOT.QTYColumn),Integer)
            End Get
            Set
                Me(Me.tableLOT_PART_w_LOT.QTYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CREATED_WHEN() As Date
            Get
                Return CType(Me(Me.tableLOT_PART_w_LOT.CREATED_WHENColumn),Date)
            End Get
            Set
                Me(Me.tableLOT_PART_w_LOT.CREATED_WHENColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property _DATE() As Date
            Get
                Return CType(Me(Me.tableLOT_PART_w_LOT.DATEColumn),Date)
            End Get
            Set
                Me(Me.tableLOT_PART_w_LOT.DATEColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class LINE_MASTERRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As LINE_MASTERRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As LINE_MASTERRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As LINE_MASTERRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class MACHINERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MACHINERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As MACHINERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As MACHINERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class MACHINE_COLUMNSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MACHINE_COLUMNSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As MACHINE_COLUMNSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As MACHINE_COLUMNSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class MACHINE_DATA_STRRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MACHINE_DATA_STRRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As MACHINE_DATA_STRRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As MACHINE_DATA_STRRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class RESULTRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As RESULTRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As RESULTRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As RESULTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class SERIALRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SERIALRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As SERIALRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As SERIALRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class V_SETTING_COLUMNSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As V_SETTING_COLUMNSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As V_SETTING_COLUMNSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As V_SETTING_COLUMNSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class MACHINE_DATA_STR_w_SERIALRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MACHINE_DATA_STR_w_SERIALRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As MACHINE_DATA_STR_w_SERIALRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As MACHINE_DATA_STR_w_SERIALRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class LOT_PART_w_LOTRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As LOT_PART_w_LOTRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As LOT_PART_w_LOTRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As LOT_PART_w_LOTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace ihi_rhf5_developmentDataSetTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class LINE_MASTERTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "LINE_MASTER"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("LINE_NAME", "LINE_NAME")
            tableMapping.ColumnMappings.Add("SEQ", "SEQ")
            tableMapping.ColumnMappings.Add("ROOT_PATH", "ROOT_PATH")
            tableMapping.ColumnMappings.Add("ROOT_TEMP", "ROOT_TEMP")
            tableMapping.ColumnMappings.Add("SLEEP_INTERVAL", "SLEEP_INTERVAL")
            tableMapping.ColumnMappings.Add("READ_ASCII_LENGTH", "READ_ASCII_LENGTH")
            tableMapping.ColumnMappings.Add("READ_BCD_LENGTH", "READ_BCD_LENGTH")
            tableMapping.ColumnMappings.Add("SYNC_TIME_WHEN", "SYNC_TIME_WHEN")
            tableMapping.ColumnMappings.Add("USE_CSV_MODE", "USE_CSV_MODE")
            tableMapping.ColumnMappings.Add("USE_XLS_MODE", "USE_XLS_MODE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[LINE_MASTER] WHERE (([ID] = @Original_ID) AND ([LINE_NAME] = @"& _ 
                "Original_LINE_NAME) AND ([SEQ] = @Original_SEQ) AND ([ROOT_PATH] = @Original_ROO"& _ 
                "T_PATH) AND ([ROOT_TEMP] = @Original_ROOT_TEMP) AND ([SLEEP_INTERVAL] = @Origina"& _ 
                "l_SLEEP_INTERVAL) AND ([READ_ASCII_LENGTH] = @Original_READ_ASCII_LENGTH) AND (["& _ 
                "READ_BCD_LENGTH] = @Original_READ_BCD_LENGTH) AND ([SYNC_TIME_WHEN] = @Original_"& _ 
                "SYNC_TIME_WHEN) AND ([USE_CSV_MODE] = @Original_USE_CSV_MODE) AND ([USE_XLS_MODE"& _ 
                "] = @Original_USE_XLS_MODE))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LINE_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LINE_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SEQ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEQ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ROOT_PATH", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ROOT_PATH", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ROOT_TEMP", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ROOT_TEMP", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SLEEP_INTERVAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SLEEP_INTERVAL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_READ_ASCII_LENGTH", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "READ_ASCII_LENGTH", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_READ_BCD_LENGTH", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "READ_BCD_LENGTH", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SYNC_TIME_WHEN", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYNC_TIME_WHEN", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_USE_CSV_MODE", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USE_CSV_MODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_USE_XLS_MODE", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USE_XLS_MODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[LINE_MASTER] ([LINE_NAME], [SEQ], [ROOT_PATH], [ROOT_TEMP], [S"& _ 
                "LEEP_INTERVAL], [READ_ASCII_LENGTH], [READ_BCD_LENGTH], [SYNC_TIME_WHEN], [USE_C"& _ 
                "SV_MODE], [USE_XLS_MODE]) VALUES (@LINE_NAME, @SEQ, @ROOT_PATH, @ROOT_TEMP, @SLE"& _ 
                "EP_INTERVAL, @READ_ASCII_LENGTH, @READ_BCD_LENGTH, @SYNC_TIME_WHEN, @USE_CSV_MOD"& _ 
                "E, @USE_XLS_MODE);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID, LINE_NAME, SEQ, ROOT_PATH, ROOT_TEMP, SLEEP_INTER"& _ 
                "VAL, READ_ASCII_LENGTH, READ_BCD_LENGTH, SYNC_TIME_WHEN, USE_CSV_MODE, USE_XLS_M"& _ 
                "ODE FROM LINE_MASTER WHERE (ID = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LINE_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LINE_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SEQ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEQ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ROOT_PATH", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ROOT_PATH", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ROOT_TEMP", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ROOT_TEMP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SLEEP_INTERVAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SLEEP_INTERVAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@READ_ASCII_LENGTH", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "READ_ASCII_LENGTH", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@READ_BCD_LENGTH", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "READ_BCD_LENGTH", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SYNC_TIME_WHEN", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYNC_TIME_WHEN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@USE_CSV_MODE", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USE_CSV_MODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@USE_XLS_MODE", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USE_XLS_MODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[LINE_MASTER] SET [LINE_NAME] = @LINE_NAME, [SEQ] = @SEQ, [ROOT_PATH"& _ 
                "] = @ROOT_PATH, [ROOT_TEMP] = @ROOT_TEMP, [SLEEP_INTERVAL] = @SLEEP_INTERVAL, [R"& _ 
                "EAD_ASCII_LENGTH] = @READ_ASCII_LENGTH, [READ_BCD_LENGTH] = @READ_BCD_LENGTH, [S"& _ 
                "YNC_TIME_WHEN] = @SYNC_TIME_WHEN, [USE_CSV_MODE] = @USE_CSV_MODE, [USE_XLS_MODE]"& _ 
                " = @USE_XLS_MODE WHERE (([ID] = @Original_ID) AND ([LINE_NAME] = @Original_LINE_"& _ 
                "NAME) AND ([SEQ] = @Original_SEQ) AND ([ROOT_PATH] = @Original_ROOT_PATH) AND (["& _ 
                "ROOT_TEMP] = @Original_ROOT_TEMP) AND ([SLEEP_INTERVAL] = @Original_SLEEP_INTERV"& _ 
                "AL) AND ([READ_ASCII_LENGTH] = @Original_READ_ASCII_LENGTH) AND ([READ_BCD_LENGT"& _ 
                "H] = @Original_READ_BCD_LENGTH) AND ([SYNC_TIME_WHEN] = @Original_SYNC_TIME_WHEN"& _ 
                ") AND ([USE_CSV_MODE] = @Original_USE_CSV_MODE) AND ([USE_XLS_MODE] = @Original_"& _ 
                "USE_XLS_MODE));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID, LINE_NAME, SEQ, ROOT_PATH, ROOT_TEMP, SLEEP_INTERVAL"& _ 
                ", READ_ASCII_LENGTH, READ_BCD_LENGTH, SYNC_TIME_WHEN, USE_CSV_MODE, USE_XLS_MODE"& _ 
                " FROM LINE_MASTER WHERE (ID = @ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LINE_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LINE_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SEQ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEQ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ROOT_PATH", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ROOT_PATH", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ROOT_TEMP", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ROOT_TEMP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SLEEP_INTERVAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SLEEP_INTERVAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@READ_ASCII_LENGTH", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "READ_ASCII_LENGTH", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@READ_BCD_LENGTH", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "READ_BCD_LENGTH", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SYNC_TIME_WHEN", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYNC_TIME_WHEN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@USE_CSV_MODE", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USE_CSV_MODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@USE_XLS_MODE", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USE_XLS_MODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LINE_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LINE_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SEQ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEQ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ROOT_PATH", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ROOT_PATH", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ROOT_TEMP", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ROOT_TEMP", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SLEEP_INTERVAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SLEEP_INTERVAL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_READ_ASCII_LENGTH", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "READ_ASCII_LENGTH", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_READ_BCD_LENGTH", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "READ_BCD_LENGTH", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SYNC_TIME_WHEN", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYNC_TIME_WHEN", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_USE_CSV_MODE", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USE_CSV_MODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_USE_XLS_MODE", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USE_XLS_MODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.ihi_dfs_client.My.MySettings.Default.ihi_rhf5_developmentConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID, LINE_NAME, SEQ, ROOT_PATH, ROOT_TEMP, SLEEP_INTERVAL, READ_ASCII_LENGT"& _ 
                "H, READ_BCD_LENGTH, SYNC_TIME_WHEN, USE_CSV_MODE, USE_XLS_MODE FROM dbo.LINE_MAS"& _ 
                "TER"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ihi_rhf5_developmentDataSet.LINE_MASTERDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As ihi_rhf5_developmentDataSet.LINE_MASTERDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ihi_rhf5_developmentDataSet.LINE_MASTERDataTable = New ihi_rhf5_developmentDataSet.LINE_MASTERDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As ihi_rhf5_developmentDataSet.LINE_MASTERDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As ihi_rhf5_developmentDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "LINE_MASTER")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID As Integer, ByVal Original_LINE_NAME As String, ByVal Original_SEQ As Integer, ByVal Original_ROOT_PATH As String, ByVal Original_ROOT_TEMP As String, ByVal Original_SLEEP_INTERVAL As Integer, ByVal Original_READ_ASCII_LENGTH As Integer, ByVal Original_READ_BCD_LENGTH As Integer, ByVal Original_SYNC_TIME_WHEN As String, ByVal Original_USE_CSV_MODE As Boolean, ByVal Original_USE_XLS_MODE As Boolean) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID,Integer)
            If (Original_LINE_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_LINE_NAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_LINE_NAME,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_SEQ,Integer)
            If (Original_ROOT_PATH Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ROOT_PATH")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_ROOT_PATH,String)
            End If
            If (Original_ROOT_TEMP Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ROOT_TEMP")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_ROOT_TEMP,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_SLEEP_INTERVAL,Integer)
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_READ_ASCII_LENGTH,Integer)
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_READ_BCD_LENGTH,Integer)
            If (Original_SYNC_TIME_WHEN Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SYNC_TIME_WHEN")
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_SYNC_TIME_WHEN,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_USE_CSV_MODE,Boolean)
            Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_USE_XLS_MODE,Boolean)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal LINE_NAME As String, ByVal SEQ As Integer, ByVal ROOT_PATH As String, ByVal ROOT_TEMP As String, ByVal SLEEP_INTERVAL As Integer, ByVal READ_ASCII_LENGTH As Integer, ByVal READ_BCD_LENGTH As Integer, ByVal SYNC_TIME_WHEN As String, ByVal USE_CSV_MODE As Boolean, ByVal USE_XLS_MODE As Boolean) As Integer
            If (LINE_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LINE_NAME")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(LINE_NAME,String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(SEQ,Integer)
            If (ROOT_PATH Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ROOT_PATH")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(ROOT_PATH,String)
            End If
            If (ROOT_TEMP Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ROOT_TEMP")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(ROOT_TEMP,String)
            End If
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(SLEEP_INTERVAL,Integer)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(READ_ASCII_LENGTH,Integer)
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(READ_BCD_LENGTH,Integer)
            If (SYNC_TIME_WHEN Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SYNC_TIME_WHEN")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(SYNC_TIME_WHEN,String)
            End If
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(USE_CSV_MODE,Boolean)
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(USE_XLS_MODE,Boolean)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal LINE_NAME As String,  _
                    ByVal SEQ As Integer,  _
                    ByVal ROOT_PATH As String,  _
                    ByVal ROOT_TEMP As String,  _
                    ByVal SLEEP_INTERVAL As Integer,  _
                    ByVal READ_ASCII_LENGTH As Integer,  _
                    ByVal READ_BCD_LENGTH As Integer,  _
                    ByVal SYNC_TIME_WHEN As String,  _
                    ByVal USE_CSV_MODE As Boolean,  _
                    ByVal USE_XLS_MODE As Boolean,  _
                    ByVal Original_ID As Integer,  _
                    ByVal Original_LINE_NAME As String,  _
                    ByVal Original_SEQ As Integer,  _
                    ByVal Original_ROOT_PATH As String,  _
                    ByVal Original_ROOT_TEMP As String,  _
                    ByVal Original_SLEEP_INTERVAL As Integer,  _
                    ByVal Original_READ_ASCII_LENGTH As Integer,  _
                    ByVal Original_READ_BCD_LENGTH As Integer,  _
                    ByVal Original_SYNC_TIME_WHEN As String,  _
                    ByVal Original_USE_CSV_MODE As Boolean,  _
                    ByVal Original_USE_XLS_MODE As Boolean,  _
                    ByVal ID As Integer) As Integer
            If (LINE_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LINE_NAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(LINE_NAME,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SEQ,Integer)
            If (ROOT_PATH Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ROOT_PATH")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(ROOT_PATH,String)
            End If
            If (ROOT_TEMP Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ROOT_TEMP")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(ROOT_TEMP,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(SLEEP_INTERVAL,Integer)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(READ_ASCII_LENGTH,Integer)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(READ_BCD_LENGTH,Integer)
            If (SYNC_TIME_WHEN Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SYNC_TIME_WHEN")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(SYNC_TIME_WHEN,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(USE_CSV_MODE,Boolean)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(USE_XLS_MODE,Boolean)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_ID,Integer)
            If (Original_LINE_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_LINE_NAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_LINE_NAME,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_SEQ,Integer)
            If (Original_ROOT_PATH Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ROOT_PATH")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_ROOT_PATH,String)
            End If
            If (Original_ROOT_TEMP Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ROOT_TEMP")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_ROOT_TEMP,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_SLEEP_INTERVAL,Integer)
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_READ_ASCII_LENGTH,Integer)
            Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_READ_BCD_LENGTH,Integer)
            If (Original_SYNC_TIME_WHEN Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SYNC_TIME_WHEN")
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_SYNC_TIME_WHEN,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_USE_CSV_MODE,Boolean)
            Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_USE_XLS_MODE,Boolean)
            Me.Adapter.UpdateCommand.Parameters(21).Value = CType(ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal LINE_NAME As String,  _
                    ByVal SEQ As Integer,  _
                    ByVal ROOT_PATH As String,  _
                    ByVal ROOT_TEMP As String,  _
                    ByVal SLEEP_INTERVAL As Integer,  _
                    ByVal READ_ASCII_LENGTH As Integer,  _
                    ByVal READ_BCD_LENGTH As Integer,  _
                    ByVal SYNC_TIME_WHEN As String,  _
                    ByVal USE_CSV_MODE As Boolean,  _
                    ByVal USE_XLS_MODE As Boolean,  _
                    ByVal Original_ID As Integer,  _
                    ByVal Original_LINE_NAME As String,  _
                    ByVal Original_SEQ As Integer,  _
                    ByVal Original_ROOT_PATH As String,  _
                    ByVal Original_ROOT_TEMP As String,  _
                    ByVal Original_SLEEP_INTERVAL As Integer,  _
                    ByVal Original_READ_ASCII_LENGTH As Integer,  _
                    ByVal Original_READ_BCD_LENGTH As Integer,  _
                    ByVal Original_SYNC_TIME_WHEN As String,  _
                    ByVal Original_USE_CSV_MODE As Boolean,  _
                    ByVal Original_USE_XLS_MODE As Boolean) As Integer
            Return Me.Update(LINE_NAME, SEQ, ROOT_PATH, ROOT_TEMP, SLEEP_INTERVAL, READ_ASCII_LENGTH, READ_BCD_LENGTH, SYNC_TIME_WHEN, USE_CSV_MODE, USE_XLS_MODE, Original_ID, Original_LINE_NAME, Original_SEQ, Original_ROOT_PATH, Original_ROOT_TEMP, Original_SLEEP_INTERVAL, Original_READ_ASCII_LENGTH, Original_READ_BCD_LENGTH, Original_SYNC_TIME_WHEN, Original_USE_CSV_MODE, Original_USE_XLS_MODE, Original_ID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class MACHINETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "MACHINE"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("LINE_ID", "LINE_ID")
            tableMapping.ColumnMappings.Add("SEQ", "SEQ")
            tableMapping.ColumnMappings.Add("MACHINE_NO", "MACHINE_NO")
            tableMapping.ColumnMappings.Add("MACHINE_NAME", "MACHINE_NAME")
            tableMapping.ColumnMappings.Add("PATH", "PATH")
            tableMapping.ColumnMappings.Add("PLC_NET", "PLC_NET")
            tableMapping.ColumnMappings.Add("PLC_NODE", "PLC_NODE")
            tableMapping.ColumnMappings.Add("PLC_UNIT", "PLC_UNIT")
            tableMapping.ColumnMappings.Add("READ_STATUS_ADDRESS", "READ_STATUS_ADDRESS")
            tableMapping.ColumnMappings.Add("READ_STATUS_LENGTH", "READ_STATUS_LENGTH")
            tableMapping.ColumnMappings.Add("READ_DATA_ADDRESS", "READ_DATA_ADDRESS")
            tableMapping.ColumnMappings.Add("WRITE_STATUS_ADDRESS", "WRITE_STATUS_ADDRESS")
            tableMapping.ColumnMappings.Add("WRITE_LIFE_ADDRESS", "WRITE_LIFE_ADDRESS")
            tableMapping.ColumnMappings.Add("WRITE_SYNC_ADDRESS", "WRITE_SYNC_ADDRESS")
            tableMapping.ColumnMappings.Add("COPY_FILE", "COPY_FILE")
            tableMapping.ColumnMappings.Add("COPY_PATH", "COPY_PATH")
            tableMapping.ColumnMappings.Add("COPY_WILDCARD", "COPY_WILDCARD")
            tableMapping.ColumnMappings.Add("COPY_PURGE_OLD_PATH", "COPY_PURGE_OLD_PATH")
            tableMapping.ColumnMappings.Add("COPY_PERIOD_MILLISEC", "COPY_PERIOD_MILLISEC")
            tableMapping.ColumnMappings.Add("COPY_PURGE_PERIOD_DAY", "COPY_PURGE_PERIOD_DAY")
            tableMapping.ColumnMappings.Add("FORMAT_MODE", "FORMAT_MODE")
            tableMapping.ColumnMappings.Add("FORMAT_MC", "FORMAT_MC")
            tableMapping.ColumnMappings.Add("FORMAT_LOT_NO", "FORMAT_LOT_NO")
            tableMapping.ColumnMappings.Add("FORMAT_FILE_NAME", "FORMAT_FILE_NAME")
            tableMapping.ColumnMappings.Add("FORMAT_DATE_TIME", "FORMAT_DATE_TIME")
            tableMapping.ColumnMappings.Add("FORMAT_STATUS", "FORMAT_STATUS")
            tableMapping.ColumnMappings.Add("FORMAT_SERIAL_BH", "FORMAT_SERIAL_BH")
            tableMapping.ColumnMappings.Add("FORMAT_SERIAL_CS", "FORMAT_SERIAL_CS")
            tableMapping.ColumnMappings.Add("FORMAT_SERIAL_ITA", "FORMAT_SERIAL_ITA")
            tableMapping.ColumnMappings.Add("FORMAT_SERIAL_TS", "FORMAT_SERIAL_TS")
            tableMapping.ColumnMappings.Add("FORMAT_SERIAL_CW", "FORMAT_SERIAL_CW")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [MACHINE] WHERE (([ID] = @Original_ID) AND ([LINE_ID] = @Original_LIN"& _ 
                "E_ID) AND ([SEQ] = @Original_SEQ) AND ([MACHINE_NO] = @Original_MACHINE_NO) AND "& _ 
                "([MACHINE_NAME] = @Original_MACHINE_NAME) AND ([PATH] = @Original_PATH) AND ([PL"& _ 
                "C_NET] = @Original_PLC_NET) AND ([PLC_NODE] = @Original_PLC_NODE) AND ([PLC_UNIT"& _ 
                "] = @Original_PLC_UNIT) AND ([READ_STATUS_ADDRESS] = @Original_READ_STATUS_ADDRE"& _ 
                "SS) AND ([READ_STATUS_LENGTH] = @Original_READ_STATUS_LENGTH) AND ([READ_DATA_AD"& _ 
                "DRESS] = @Original_READ_DATA_ADDRESS) AND ([WRITE_STATUS_ADDRESS] = @Original_WR"& _ 
                "ITE_STATUS_ADDRESS) AND ([WRITE_LIFE_ADDRESS] = @Original_WRITE_LIFE_ADDRESS) AN"& _ 
                "D ([WRITE_SYNC_ADDRESS] = @Original_WRITE_SYNC_ADDRESS) AND ([COPY_FILE] = @Orig"& _ 
                "inal_COPY_FILE) AND ([COPY_PATH] = @Original_COPY_PATH) AND ([COPY_WILDCARD] = @"& _ 
                "Original_COPY_WILDCARD) AND ([COPY_PURGE_OLD_PATH] = @Original_COPY_PURGE_OLD_PA"& _ 
                "TH) AND ([COPY_PERIOD_MILLISEC] = @Original_COPY_PERIOD_MILLISEC) AND ([COPY_PUR"& _ 
                "GE_PERIOD_DAY] = @Original_COPY_PURGE_PERIOD_DAY) AND ([FORMAT_MODE] = @Original"& _ 
                "_FORMAT_MODE) AND ([FORMAT_MC] = @Original_FORMAT_MC) AND ([FORMAT_LOT_NO] = @Or"& _ 
                "iginal_FORMAT_LOT_NO) AND ([FORMAT_FILE_NAME] = @Original_FORMAT_FILE_NAME) AND "& _ 
                "([FORMAT_DATE_TIME] = @Original_FORMAT_DATE_TIME) AND ([FORMAT_STATUS] = @Origin"& _ 
                "al_FORMAT_STATUS) AND ([FORMAT_SERIAL_BH] = @Original_FORMAT_SERIAL_BH) AND ([FO"& _ 
                "RMAT_SERIAL_CS] = @Original_FORMAT_SERIAL_CS) AND ([FORMAT_SERIAL_ITA] = @Origin"& _ 
                "al_FORMAT_SERIAL_ITA) AND ([FORMAT_SERIAL_TS] = @Original_FORMAT_SERIAL_TS) AND "& _ 
                "([FORMAT_SERIAL_CW] = @Original_FORMAT_SERIAL_CW))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LINE_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LINE_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SEQ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEQ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MACHINE_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MACHINE_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MACHINE_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MACHINE_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PATH", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PATH", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PLC_NET", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PLC_NET", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PLC_NODE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PLC_NODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PLC_UNIT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PLC_UNIT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_READ_STATUS_ADDRESS", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "READ_STATUS_ADDRESS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_READ_STATUS_LENGTH", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "READ_STATUS_LENGTH", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_READ_DATA_ADDRESS", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "READ_DATA_ADDRESS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_WRITE_STATUS_ADDRESS", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WRITE_STATUS_ADDRESS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_WRITE_LIFE_ADDRESS", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WRITE_LIFE_ADDRESS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_WRITE_SYNC_ADDRESS", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WRITE_SYNC_ADDRESS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COPY_FILE", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COPY_FILE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COPY_PATH", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COPY_PATH", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COPY_WILDCARD", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COPY_WILDCARD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COPY_PURGE_OLD_PATH", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COPY_PURGE_OLD_PATH", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COPY_PERIOD_MILLISEC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COPY_PERIOD_MILLISEC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COPY_PURGE_PERIOD_DAY", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COPY_PURGE_PERIOD_DAY", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FORMAT_MODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FORMAT_MODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FORMAT_MC", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FORMAT_MC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FORMAT_LOT_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FORMAT_LOT_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FORMAT_FILE_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FORMAT_FILE_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FORMAT_DATE_TIME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FORMAT_DATE_TIME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FORMAT_STATUS", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FORMAT_STATUS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FORMAT_SERIAL_BH", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FORMAT_SERIAL_BH", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FORMAT_SERIAL_CS", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FORMAT_SERIAL_CS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FORMAT_SERIAL_ITA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FORMAT_SERIAL_ITA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FORMAT_SERIAL_TS", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FORMAT_SERIAL_TS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FORMAT_SERIAL_CW", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FORMAT_SERIAL_CW", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [MACHINE] ([LINE_ID], [SEQ], [MACHINE_NO], [MACHINE_NAME], [PATH], [P"& _ 
                "LC_NET], [PLC_NODE], [PLC_UNIT], [READ_STATUS_ADDRESS], [READ_STATUS_LENGTH], [R"& _ 
                "EAD_DATA_ADDRESS], [WRITE_STATUS_ADDRESS], [WRITE_LIFE_ADDRESS], [WRITE_SYNC_ADD"& _ 
                "RESS], [COPY_FILE], [COPY_PATH], [COPY_WILDCARD], [COPY_PURGE_OLD_PATH], [COPY_P"& _ 
                "ERIOD_MILLISEC], [COPY_PURGE_PERIOD_DAY], [FORMAT_MODE], [FORMAT_MC], [FORMAT_LO"& _ 
                "T_NO], [FORMAT_FILE_NAME], [FORMAT_DATE_TIME], [FORMAT_STATUS], [FORMAT_SERIAL_B"& _ 
                "H], [FORMAT_SERIAL_CS], [FORMAT_SERIAL_ITA], [FORMAT_SERIAL_TS], [FORMAT_SERIAL_"& _ 
                "CW]) VALUES (@LINE_ID, @SEQ, @MACHINE_NO, @MACHINE_NAME, @PATH, @PLC_NET, @PLC_N"& _ 
                "ODE, @PLC_UNIT, @READ_STATUS_ADDRESS, @READ_STATUS_LENGTH, @READ_DATA_ADDRESS, @"& _ 
                "WRITE_STATUS_ADDRESS, @WRITE_LIFE_ADDRESS, @WRITE_SYNC_ADDRESS, @COPY_FILE, @COP"& _ 
                "Y_PATH, @COPY_WILDCARD, @COPY_PURGE_OLD_PATH, @COPY_PERIOD_MILLISEC, @COPY_PURGE"& _ 
                "_PERIOD_DAY, @FORMAT_MODE, @FORMAT_MC, @FORMAT_LOT_NO, @FORMAT_FILE_NAME, @FORMA"& _ 
                "T_DATE_TIME, @FORMAT_STATUS, @FORMAT_SERIAL_BH, @FORMAT_SERIAL_CS, @FORMAT_SERIA"& _ 
                "L_ITA, @FORMAT_SERIAL_TS, @FORMAT_SERIAL_CW);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID, LINE_ID, SEQ, MACHINE_"& _ 
                "NO, MACHINE_NAME, PATH, PLC_NET, PLC_NODE, PLC_UNIT, READ_STATUS_ADDRESS, READ_S"& _ 
                "TATUS_LENGTH, READ_DATA_ADDRESS, WRITE_STATUS_ADDRESS, WRITE_LIFE_ADDRESS, WRITE"& _ 
                "_SYNC_ADDRESS, COPY_FILE, COPY_PATH, COPY_WILDCARD, COPY_PURGE_OLD_PATH, COPY_PE"& _ 
                "RIOD_MILLISEC, COPY_PURGE_PERIOD_DAY, FORMAT_MODE, FORMAT_MC, FORMAT_LOT_NO, FOR"& _ 
                "MAT_FILE_NAME, FORMAT_DATE_TIME, FORMAT_STATUS, FORMAT_SERIAL_BH, FORMAT_SERIAL_"& _ 
                "CS, FORMAT_SERIAL_ITA, FORMAT_SERIAL_TS, FORMAT_SERIAL_CW FROM MACHINE WHERE (ID"& _ 
                " = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LINE_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LINE_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SEQ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEQ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MACHINE_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MACHINE_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MACHINE_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MACHINE_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PATH", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PATH", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PLC_NET", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PLC_NET", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PLC_NODE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PLC_NODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PLC_UNIT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PLC_UNIT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@READ_STATUS_ADDRESS", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "READ_STATUS_ADDRESS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@READ_STATUS_LENGTH", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "READ_STATUS_LENGTH", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@READ_DATA_ADDRESS", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "READ_DATA_ADDRESS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WRITE_STATUS_ADDRESS", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WRITE_STATUS_ADDRESS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WRITE_LIFE_ADDRESS", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WRITE_LIFE_ADDRESS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WRITE_SYNC_ADDRESS", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WRITE_SYNC_ADDRESS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COPY_FILE", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COPY_FILE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COPY_PATH", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COPY_PATH", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COPY_WILDCARD", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COPY_WILDCARD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COPY_PURGE_OLD_PATH", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COPY_PURGE_OLD_PATH", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COPY_PERIOD_MILLISEC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COPY_PERIOD_MILLISEC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COPY_PURGE_PERIOD_DAY", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COPY_PURGE_PERIOD_DAY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FORMAT_MODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FORMAT_MODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FORMAT_MC", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FORMAT_MC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FORMAT_LOT_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FORMAT_LOT_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FORMAT_FILE_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FORMAT_FILE_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FORMAT_DATE_TIME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FORMAT_DATE_TIME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FORMAT_STATUS", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FORMAT_STATUS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FORMAT_SERIAL_BH", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FORMAT_SERIAL_BH", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FORMAT_SERIAL_CS", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FORMAT_SERIAL_CS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FORMAT_SERIAL_ITA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FORMAT_SERIAL_ITA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FORMAT_SERIAL_TS", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FORMAT_SERIAL_TS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FORMAT_SERIAL_CW", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FORMAT_SERIAL_CW", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [MACHINE] SET [LINE_ID] = @LINE_ID, [SEQ] = @SEQ, [MACHINE_NO] = @MACHINE_"& _ 
                "NO, [MACHINE_NAME] = @MACHINE_NAME, [PATH] = @PATH, [PLC_NET] = @PLC_NET, [PLC_N"& _ 
                "ODE] = @PLC_NODE, [PLC_UNIT] = @PLC_UNIT, [READ_STATUS_ADDRESS] = @READ_STATUS_A"& _ 
                "DDRESS, [READ_STATUS_LENGTH] = @READ_STATUS_LENGTH, [READ_DATA_ADDRESS] = @READ_"& _ 
                "DATA_ADDRESS, [WRITE_STATUS_ADDRESS] = @WRITE_STATUS_ADDRESS, [WRITE_LIFE_ADDRES"& _ 
                "S] = @WRITE_LIFE_ADDRESS, [WRITE_SYNC_ADDRESS] = @WRITE_SYNC_ADDRESS, [COPY_FILE"& _ 
                "] = @COPY_FILE, [COPY_PATH] = @COPY_PATH, [COPY_WILDCARD] = @COPY_WILDCARD, [COP"& _ 
                "Y_PURGE_OLD_PATH] = @COPY_PURGE_OLD_PATH, [COPY_PERIOD_MILLISEC] = @COPY_PERIOD_"& _ 
                "MILLISEC, [COPY_PURGE_PERIOD_DAY] = @COPY_PURGE_PERIOD_DAY, [FORMAT_MODE] = @FOR"& _ 
                "MAT_MODE, [FORMAT_MC] = @FORMAT_MC, [FORMAT_LOT_NO] = @FORMAT_LOT_NO, [FORMAT_FI"& _ 
                "LE_NAME] = @FORMAT_FILE_NAME, [FORMAT_DATE_TIME] = @FORMAT_DATE_TIME, [FORMAT_ST"& _ 
                "ATUS] = @FORMAT_STATUS, [FORMAT_SERIAL_BH] = @FORMAT_SERIAL_BH, [FORMAT_SERIAL_C"& _ 
                "S] = @FORMAT_SERIAL_CS, [FORMAT_SERIAL_ITA] = @FORMAT_SERIAL_ITA, [FORMAT_SERIAL"& _ 
                "_TS] = @FORMAT_SERIAL_TS, [FORMAT_SERIAL_CW] = @FORMAT_SERIAL_CW WHERE (([ID] = "& _ 
                "@Original_ID) AND ([LINE_ID] = @Original_LINE_ID) AND ([SEQ] = @Original_SEQ) AN"& _ 
                "D ([MACHINE_NO] = @Original_MACHINE_NO) AND ([MACHINE_NAME] = @Original_MACHINE_"& _ 
                "NAME) AND ([PATH] = @Original_PATH) AND ([PLC_NET] = @Original_PLC_NET) AND ([PL"& _ 
                "C_NODE] = @Original_PLC_NODE) AND ([PLC_UNIT] = @Original_PLC_UNIT) AND ([READ_S"& _ 
                "TATUS_ADDRESS] = @Original_READ_STATUS_ADDRESS) AND ([READ_STATUS_LENGTH] = @Ori"& _ 
                "ginal_READ_STATUS_LENGTH) AND ([READ_DATA_ADDRESS] = @Original_READ_DATA_ADDRESS"& _ 
                ") AND ([WRITE_STATUS_ADDRESS] = @Original_WRITE_STATUS_ADDRESS) AND ([WRITE_LIFE"& _ 
                "_ADDRESS] = @Original_WRITE_LIFE_ADDRESS) AND ([WRITE_SYNC_ADDRESS] = @Original_"& _ 
                "WRITE_SYNC_ADDRESS) AND ([COPY_FILE] = @Original_COPY_FILE) AND ([COPY_PATH] = @"& _ 
                "Original_COPY_PATH) AND ([COPY_WILDCARD] = @Original_COPY_WILDCARD) AND ([COPY_P"& _ 
                "URGE_OLD_PATH] = @Original_COPY_PURGE_OLD_PATH) AND ([COPY_PERIOD_MILLISEC] = @O"& _ 
                "riginal_COPY_PERIOD_MILLISEC) AND ([COPY_PURGE_PERIOD_DAY] = @Original_COPY_PURG"& _ 
                "E_PERIOD_DAY) AND ([FORMAT_MODE] = @Original_FORMAT_MODE) AND ([FORMAT_MC] = @Or"& _ 
                "iginal_FORMAT_MC) AND ([FORMAT_LOT_NO] = @Original_FORMAT_LOT_NO) AND ([FORMAT_F"& _ 
                "ILE_NAME] = @Original_FORMAT_FILE_NAME) AND ([FORMAT_DATE_TIME] = @Original_FORM"& _ 
                "AT_DATE_TIME) AND ([FORMAT_STATUS] = @Original_FORMAT_STATUS) AND ([FORMAT_SERIA"& _ 
                "L_BH] = @Original_FORMAT_SERIAL_BH) AND ([FORMAT_SERIAL_CS] = @Original_FORMAT_S"& _ 
                "ERIAL_CS) AND ([FORMAT_SERIAL_ITA] = @Original_FORMAT_SERIAL_ITA) AND ([FORMAT_S"& _ 
                "ERIAL_TS] = @Original_FORMAT_SERIAL_TS) AND ([FORMAT_SERIAL_CW] = @Original_FORM"& _ 
                "AT_SERIAL_CW));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID, LINE_ID, SEQ, MACHINE_NO, MACHINE_NAME, PATH, PLC_NE"& _ 
                "T, PLC_NODE, PLC_UNIT, READ_STATUS_ADDRESS, READ_STATUS_LENGTH, READ_DATA_ADDRES"& _ 
                "S, WRITE_STATUS_ADDRESS, WRITE_LIFE_ADDRESS, WRITE_SYNC_ADDRESS, COPY_FILE, COPY"& _ 
                "_PATH, COPY_WILDCARD, COPY_PURGE_OLD_PATH, COPY_PERIOD_MILLISEC, COPY_PURGE_PERI"& _ 
                "OD_DAY, FORMAT_MODE, FORMAT_MC, FORMAT_LOT_NO, FORMAT_FILE_NAME, FORMAT_DATE_TIM"& _ 
                "E, FORMAT_STATUS, FORMAT_SERIAL_BH, FORMAT_SERIAL_CS, FORMAT_SERIAL_ITA, FORMAT_"& _ 
                "SERIAL_TS, FORMAT_SERIAL_CW FROM MACHINE WHERE (ID = @ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LINE_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LINE_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SEQ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEQ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MACHINE_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MACHINE_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MACHINE_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MACHINE_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PATH", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PATH", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PLC_NET", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PLC_NET", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PLC_NODE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PLC_NODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PLC_UNIT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PLC_UNIT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@READ_STATUS_ADDRESS", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "READ_STATUS_ADDRESS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@READ_STATUS_LENGTH", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "READ_STATUS_LENGTH", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@READ_DATA_ADDRESS", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "READ_DATA_ADDRESS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WRITE_STATUS_ADDRESS", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WRITE_STATUS_ADDRESS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WRITE_LIFE_ADDRESS", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WRITE_LIFE_ADDRESS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WRITE_SYNC_ADDRESS", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WRITE_SYNC_ADDRESS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COPY_FILE", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COPY_FILE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COPY_PATH", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COPY_PATH", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COPY_WILDCARD", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COPY_WILDCARD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COPY_PURGE_OLD_PATH", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COPY_PURGE_OLD_PATH", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COPY_PERIOD_MILLISEC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COPY_PERIOD_MILLISEC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COPY_PURGE_PERIOD_DAY", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COPY_PURGE_PERIOD_DAY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FORMAT_MODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FORMAT_MODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FORMAT_MC", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FORMAT_MC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FORMAT_LOT_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FORMAT_LOT_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FORMAT_FILE_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FORMAT_FILE_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FORMAT_DATE_TIME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FORMAT_DATE_TIME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FORMAT_STATUS", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FORMAT_STATUS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FORMAT_SERIAL_BH", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FORMAT_SERIAL_BH", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FORMAT_SERIAL_CS", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FORMAT_SERIAL_CS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FORMAT_SERIAL_ITA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FORMAT_SERIAL_ITA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FORMAT_SERIAL_TS", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FORMAT_SERIAL_TS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FORMAT_SERIAL_CW", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FORMAT_SERIAL_CW", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LINE_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LINE_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SEQ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEQ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MACHINE_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MACHINE_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MACHINE_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MACHINE_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PATH", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PATH", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PLC_NET", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PLC_NET", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PLC_NODE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PLC_NODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PLC_UNIT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PLC_UNIT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_READ_STATUS_ADDRESS", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "READ_STATUS_ADDRESS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_READ_STATUS_LENGTH", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "READ_STATUS_LENGTH", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_READ_DATA_ADDRESS", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "READ_DATA_ADDRESS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_WRITE_STATUS_ADDRESS", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WRITE_STATUS_ADDRESS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_WRITE_LIFE_ADDRESS", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WRITE_LIFE_ADDRESS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_WRITE_SYNC_ADDRESS", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WRITE_SYNC_ADDRESS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COPY_FILE", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COPY_FILE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COPY_PATH", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COPY_PATH", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COPY_WILDCARD", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COPY_WILDCARD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COPY_PURGE_OLD_PATH", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COPY_PURGE_OLD_PATH", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COPY_PERIOD_MILLISEC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COPY_PERIOD_MILLISEC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COPY_PURGE_PERIOD_DAY", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COPY_PURGE_PERIOD_DAY", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FORMAT_MODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FORMAT_MODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FORMAT_MC", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FORMAT_MC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FORMAT_LOT_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FORMAT_LOT_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FORMAT_FILE_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FORMAT_FILE_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FORMAT_DATE_TIME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FORMAT_DATE_TIME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FORMAT_STATUS", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FORMAT_STATUS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FORMAT_SERIAL_BH", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FORMAT_SERIAL_BH", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FORMAT_SERIAL_CS", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FORMAT_SERIAL_CS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FORMAT_SERIAL_ITA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FORMAT_SERIAL_ITA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FORMAT_SERIAL_TS", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FORMAT_SERIAL_TS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FORMAT_SERIAL_CW", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FORMAT_SERIAL_CW", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.ihi_dfs_client.My.MySettings.Default.ihi_rhf5_developmentConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT * FROM MACHINE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT * FROM MACHINE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE LINE_ID =@lineId"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@lineId", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "LINE_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ihi_rhf5_developmentDataSet.MACHINEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As ihi_rhf5_developmentDataSet.MACHINEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ihi_rhf5_developmentDataSet.MACHINEDataTable = New ihi_rhf5_developmentDataSet.MACHINEDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByLineId(ByVal dataTable As ihi_rhf5_developmentDataSet.MACHINEDataTable, ByVal lineId As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(lineId,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByLineId(ByVal lineId As Integer) As ihi_rhf5_developmentDataSet.MACHINEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(lineId,Integer)
            Dim dataTable As ihi_rhf5_developmentDataSet.MACHINEDataTable = New ihi_rhf5_developmentDataSet.MACHINEDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As ihi_rhf5_developmentDataSet.MACHINEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As ihi_rhf5_developmentDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "MACHINE")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_ID As Integer,  _
                    ByVal Original_LINE_ID As Integer,  _
                    ByVal Original_SEQ As Integer,  _
                    ByVal Original_MACHINE_NO As Integer,  _
                    ByVal Original_MACHINE_NAME As String,  _
                    ByVal Original_PATH As String,  _
                    ByVal Original_PLC_NET As Integer,  _
                    ByVal Original_PLC_NODE As Integer,  _
                    ByVal Original_PLC_UNIT As Integer,  _
                    ByVal Original_READ_STATUS_ADDRESS As String,  _
                    ByVal Original_READ_STATUS_LENGTH As Integer,  _
                    ByVal Original_READ_DATA_ADDRESS As String,  _
                    ByVal Original_WRITE_STATUS_ADDRESS As String,  _
                    ByVal Original_WRITE_LIFE_ADDRESS As String,  _
                    ByVal Original_WRITE_SYNC_ADDRESS As String,  _
                    ByVal Original_COPY_FILE As Boolean,  _
                    ByVal Original_COPY_PATH As String,  _
                    ByVal Original_COPY_WILDCARD As String,  _
                    ByVal Original_COPY_PURGE_OLD_PATH As String,  _
                    ByVal Original_COPY_PERIOD_MILLISEC As Integer,  _
                    ByVal Original_COPY_PURGE_PERIOD_DAY As Integer,  _
                    ByVal Original_FORMAT_MODE As String,  _
                    ByVal Original_FORMAT_MC As String,  _
                    ByVal Original_FORMAT_LOT_NO As String,  _
                    ByVal Original_FORMAT_FILE_NAME As String,  _
                    ByVal Original_FORMAT_DATE_TIME As String,  _
                    ByVal Original_FORMAT_STATUS As String,  _
                    ByVal Original_FORMAT_SERIAL_BH As String,  _
                    ByVal Original_FORMAT_SERIAL_CS As String,  _
                    ByVal Original_FORMAT_SERIAL_ITA As String,  _
                    ByVal Original_FORMAT_SERIAL_TS As String,  _
                    ByVal Original_FORMAT_SERIAL_CW As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_LINE_ID,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_SEQ,Integer)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_MACHINE_NO,Integer)
            If (Original_MACHINE_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MACHINE_NAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_MACHINE_NAME,String)
            End If
            If (Original_PATH Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PATH")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_PATH,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_PLC_NET,Integer)
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_PLC_NODE,Integer)
            Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_PLC_UNIT,Integer)
            If (Original_READ_STATUS_ADDRESS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_READ_STATUS_ADDRESS")
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_READ_STATUS_ADDRESS,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_READ_STATUS_LENGTH,Integer)
            If (Original_READ_DATA_ADDRESS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_READ_DATA_ADDRESS")
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_READ_DATA_ADDRESS,String)
            End If
            If (Original_WRITE_STATUS_ADDRESS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_WRITE_STATUS_ADDRESS")
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_WRITE_STATUS_ADDRESS,String)
            End If
            If (Original_WRITE_LIFE_ADDRESS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_WRITE_LIFE_ADDRESS")
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_WRITE_LIFE_ADDRESS,String)
            End If
            If (Original_WRITE_SYNC_ADDRESS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_WRITE_SYNC_ADDRESS")
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_WRITE_SYNC_ADDRESS,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_COPY_FILE,Boolean)
            If (Original_COPY_PATH Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_COPY_PATH")
            Else
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_COPY_PATH,String)
            End If
            If (Original_COPY_WILDCARD Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_COPY_WILDCARD")
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_COPY_WILDCARD,String)
            End If
            If (Original_COPY_PURGE_OLD_PATH Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_COPY_PURGE_OLD_PATH")
            Else
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_COPY_PURGE_OLD_PATH,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(19).Value = CType(Original_COPY_PERIOD_MILLISEC,Integer)
            Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_COPY_PURGE_PERIOD_DAY,Integer)
            If (Original_FORMAT_MODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FORMAT_MODE")
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(Original_FORMAT_MODE,String)
            End If
            If (Original_FORMAT_MC Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FORMAT_MC")
            Else
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_FORMAT_MC,String)
            End If
            If (Original_FORMAT_LOT_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FORMAT_LOT_NO")
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(Original_FORMAT_LOT_NO,String)
            End If
            If (Original_FORMAT_FILE_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FORMAT_FILE_NAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_FORMAT_FILE_NAME,String)
            End If
            If (Original_FORMAT_DATE_TIME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FORMAT_DATE_TIME")
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(Original_FORMAT_DATE_TIME,String)
            End If
            If (Original_FORMAT_STATUS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FORMAT_STATUS")
            Else
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_FORMAT_STATUS,String)
            End If
            If (Original_FORMAT_SERIAL_BH Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FORMAT_SERIAL_BH")
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(Original_FORMAT_SERIAL_BH,String)
            End If
            If (Original_FORMAT_SERIAL_CS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FORMAT_SERIAL_CS")
            Else
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_FORMAT_SERIAL_CS,String)
            End If
            If (Original_FORMAT_SERIAL_ITA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FORMAT_SERIAL_ITA")
            Else
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(Original_FORMAT_SERIAL_ITA,String)
            End If
            If (Original_FORMAT_SERIAL_TS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FORMAT_SERIAL_TS")
            Else
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(Original_FORMAT_SERIAL_TS,String)
            End If
            If (Original_FORMAT_SERIAL_CW Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FORMAT_SERIAL_CW")
            Else
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(Original_FORMAT_SERIAL_CW,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal LINE_ID As Integer,  _
                    ByVal SEQ As Integer,  _
                    ByVal MACHINE_NO As Integer,  _
                    ByVal MACHINE_NAME As String,  _
                    ByVal PATH As String,  _
                    ByVal PLC_NET As Integer,  _
                    ByVal PLC_NODE As Integer,  _
                    ByVal PLC_UNIT As Integer,  _
                    ByVal READ_STATUS_ADDRESS As String,  _
                    ByVal READ_STATUS_LENGTH As Integer,  _
                    ByVal READ_DATA_ADDRESS As String,  _
                    ByVal WRITE_STATUS_ADDRESS As String,  _
                    ByVal WRITE_LIFE_ADDRESS As String,  _
                    ByVal WRITE_SYNC_ADDRESS As String,  _
                    ByVal COPY_FILE As Boolean,  _
                    ByVal COPY_PATH As String,  _
                    ByVal COPY_WILDCARD As String,  _
                    ByVal COPY_PURGE_OLD_PATH As String,  _
                    ByVal COPY_PERIOD_MILLISEC As Integer,  _
                    ByVal COPY_PURGE_PERIOD_DAY As Integer,  _
                    ByVal FORMAT_MODE As String,  _
                    ByVal FORMAT_MC As String,  _
                    ByVal FORMAT_LOT_NO As String,  _
                    ByVal FORMAT_FILE_NAME As String,  _
                    ByVal FORMAT_DATE_TIME As String,  _
                    ByVal FORMAT_STATUS As String,  _
                    ByVal FORMAT_SERIAL_BH As String,  _
                    ByVal FORMAT_SERIAL_CS As String,  _
                    ByVal FORMAT_SERIAL_ITA As String,  _
                    ByVal FORMAT_SERIAL_TS As String,  _
                    ByVal FORMAT_SERIAL_CW As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(LINE_ID,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(SEQ,Integer)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(MACHINE_NO,Integer)
            If (MACHINE_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MACHINE_NAME")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(MACHINE_NAME,String)
            End If
            If (PATH Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PATH")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(PATH,String)
            End If
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(PLC_NET,Integer)
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(PLC_NODE,Integer)
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(PLC_UNIT,Integer)
            If (READ_STATUS_ADDRESS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("READ_STATUS_ADDRESS")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(READ_STATUS_ADDRESS,String)
            End If
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(READ_STATUS_LENGTH,Integer)
            If (READ_DATA_ADDRESS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("READ_DATA_ADDRESS")
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(READ_DATA_ADDRESS,String)
            End If
            If (WRITE_STATUS_ADDRESS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("WRITE_STATUS_ADDRESS")
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(WRITE_STATUS_ADDRESS,String)
            End If
            If (WRITE_LIFE_ADDRESS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("WRITE_LIFE_ADDRESS")
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(WRITE_LIFE_ADDRESS,String)
            End If
            If (WRITE_SYNC_ADDRESS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("WRITE_SYNC_ADDRESS")
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(WRITE_SYNC_ADDRESS,String)
            End If
            Me.Adapter.InsertCommand.Parameters(14).Value = CType(COPY_FILE,Boolean)
            If (COPY_PATH Is Nothing) Then
                Throw New Global.System.ArgumentNullException("COPY_PATH")
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(COPY_PATH,String)
            End If
            If (COPY_WILDCARD Is Nothing) Then
                Throw New Global.System.ArgumentNullException("COPY_WILDCARD")
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(COPY_WILDCARD,String)
            End If
            If (COPY_PURGE_OLD_PATH Is Nothing) Then
                Throw New Global.System.ArgumentNullException("COPY_PURGE_OLD_PATH")
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(COPY_PURGE_OLD_PATH,String)
            End If
            Me.Adapter.InsertCommand.Parameters(18).Value = CType(COPY_PERIOD_MILLISEC,Integer)
            Me.Adapter.InsertCommand.Parameters(19).Value = CType(COPY_PURGE_PERIOD_DAY,Integer)
            If (FORMAT_MODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FORMAT_MODE")
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(FORMAT_MODE,String)
            End If
            If (FORMAT_MC Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FORMAT_MC")
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(FORMAT_MC,String)
            End If
            If (FORMAT_LOT_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FORMAT_LOT_NO")
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(FORMAT_LOT_NO,String)
            End If
            If (FORMAT_FILE_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FORMAT_FILE_NAME")
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(FORMAT_FILE_NAME,String)
            End If
            If (FORMAT_DATE_TIME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FORMAT_DATE_TIME")
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(FORMAT_DATE_TIME,String)
            End If
            If (FORMAT_STATUS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FORMAT_STATUS")
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(FORMAT_STATUS,String)
            End If
            If (FORMAT_SERIAL_BH Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FORMAT_SERIAL_BH")
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(FORMAT_SERIAL_BH,String)
            End If
            If (FORMAT_SERIAL_CS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FORMAT_SERIAL_CS")
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(FORMAT_SERIAL_CS,String)
            End If
            If (FORMAT_SERIAL_ITA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FORMAT_SERIAL_ITA")
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(FORMAT_SERIAL_ITA,String)
            End If
            If (FORMAT_SERIAL_TS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FORMAT_SERIAL_TS")
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(FORMAT_SERIAL_TS,String)
            End If
            If (FORMAT_SERIAL_CW Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FORMAT_SERIAL_CW")
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(FORMAT_SERIAL_CW,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal LINE_ID As Integer,  _
                    ByVal SEQ As Integer,  _
                    ByVal MACHINE_NO As Integer,  _
                    ByVal MACHINE_NAME As String,  _
                    ByVal PATH As String,  _
                    ByVal PLC_NET As Integer,  _
                    ByVal PLC_NODE As Integer,  _
                    ByVal PLC_UNIT As Integer,  _
                    ByVal READ_STATUS_ADDRESS As String,  _
                    ByVal READ_STATUS_LENGTH As Integer,  _
                    ByVal READ_DATA_ADDRESS As String,  _
                    ByVal WRITE_STATUS_ADDRESS As String,  _
                    ByVal WRITE_LIFE_ADDRESS As String,  _
                    ByVal WRITE_SYNC_ADDRESS As String,  _
                    ByVal COPY_FILE As Boolean,  _
                    ByVal COPY_PATH As String,  _
                    ByVal COPY_WILDCARD As String,  _
                    ByVal COPY_PURGE_OLD_PATH As String,  _
                    ByVal COPY_PERIOD_MILLISEC As Integer,  _
                    ByVal COPY_PURGE_PERIOD_DAY As Integer,  _
                    ByVal FORMAT_MODE As String,  _
                    ByVal FORMAT_MC As String,  _
                    ByVal FORMAT_LOT_NO As String,  _
                    ByVal FORMAT_FILE_NAME As String,  _
                    ByVal FORMAT_DATE_TIME As String,  _
                    ByVal FORMAT_STATUS As String,  _
                    ByVal FORMAT_SERIAL_BH As String,  _
                    ByVal FORMAT_SERIAL_CS As String,  _
                    ByVal FORMAT_SERIAL_ITA As String,  _
                    ByVal FORMAT_SERIAL_TS As String,  _
                    ByVal FORMAT_SERIAL_CW As String,  _
                    ByVal Original_ID As Integer,  _
                    ByVal Original_LINE_ID As Integer,  _
                    ByVal Original_SEQ As Integer,  _
                    ByVal Original_MACHINE_NO As Integer,  _
                    ByVal Original_MACHINE_NAME As String,  _
                    ByVal Original_PATH As String,  _
                    ByVal Original_PLC_NET As Integer,  _
                    ByVal Original_PLC_NODE As Integer,  _
                    ByVal Original_PLC_UNIT As Integer,  _
                    ByVal Original_READ_STATUS_ADDRESS As String,  _
                    ByVal Original_READ_STATUS_LENGTH As Integer,  _
                    ByVal Original_READ_DATA_ADDRESS As String,  _
                    ByVal Original_WRITE_STATUS_ADDRESS As String,  _
                    ByVal Original_WRITE_LIFE_ADDRESS As String,  _
                    ByVal Original_WRITE_SYNC_ADDRESS As String,  _
                    ByVal Original_COPY_FILE As Boolean,  _
                    ByVal Original_COPY_PATH As String,  _
                    ByVal Original_COPY_WILDCARD As String,  _
                    ByVal Original_COPY_PURGE_OLD_PATH As String,  _
                    ByVal Original_COPY_PERIOD_MILLISEC As Integer,  _
                    ByVal Original_COPY_PURGE_PERIOD_DAY As Integer,  _
                    ByVal Original_FORMAT_MODE As String,  _
                    ByVal Original_FORMAT_MC As String,  _
                    ByVal Original_FORMAT_LOT_NO As String,  _
                    ByVal Original_FORMAT_FILE_NAME As String,  _
                    ByVal Original_FORMAT_DATE_TIME As String,  _
                    ByVal Original_FORMAT_STATUS As String,  _
                    ByVal Original_FORMAT_SERIAL_BH As String,  _
                    ByVal Original_FORMAT_SERIAL_CS As String,  _
                    ByVal Original_FORMAT_SERIAL_ITA As String,  _
                    ByVal Original_FORMAT_SERIAL_TS As String,  _
                    ByVal Original_FORMAT_SERIAL_CW As String,  _
                    ByVal ID As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(LINE_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SEQ,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(MACHINE_NO,Integer)
            If (MACHINE_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MACHINE_NAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(MACHINE_NAME,String)
            End If
            If (PATH Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PATH")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(PATH,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(PLC_NET,Integer)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(PLC_NODE,Integer)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(PLC_UNIT,Integer)
            If (READ_STATUS_ADDRESS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("READ_STATUS_ADDRESS")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(READ_STATUS_ADDRESS,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(READ_STATUS_LENGTH,Integer)
            If (READ_DATA_ADDRESS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("READ_DATA_ADDRESS")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(READ_DATA_ADDRESS,String)
            End If
            If (WRITE_STATUS_ADDRESS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("WRITE_STATUS_ADDRESS")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(WRITE_STATUS_ADDRESS,String)
            End If
            If (WRITE_LIFE_ADDRESS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("WRITE_LIFE_ADDRESS")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(WRITE_LIFE_ADDRESS,String)
            End If
            If (WRITE_SYNC_ADDRESS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("WRITE_SYNC_ADDRESS")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(WRITE_SYNC_ADDRESS,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(COPY_FILE,Boolean)
            If (COPY_PATH Is Nothing) Then
                Throw New Global.System.ArgumentNullException("COPY_PATH")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(COPY_PATH,String)
            End If
            If (COPY_WILDCARD Is Nothing) Then
                Throw New Global.System.ArgumentNullException("COPY_WILDCARD")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(COPY_WILDCARD,String)
            End If
            If (COPY_PURGE_OLD_PATH Is Nothing) Then
                Throw New Global.System.ArgumentNullException("COPY_PURGE_OLD_PATH")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(COPY_PURGE_OLD_PATH,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(18).Value = CType(COPY_PERIOD_MILLISEC,Integer)
            Me.Adapter.UpdateCommand.Parameters(19).Value = CType(COPY_PURGE_PERIOD_DAY,Integer)
            If (FORMAT_MODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FORMAT_MODE")
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(FORMAT_MODE,String)
            End If
            If (FORMAT_MC Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FORMAT_MC")
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(FORMAT_MC,String)
            End If
            If (FORMAT_LOT_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FORMAT_LOT_NO")
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(FORMAT_LOT_NO,String)
            End If
            If (FORMAT_FILE_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FORMAT_FILE_NAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(FORMAT_FILE_NAME,String)
            End If
            If (FORMAT_DATE_TIME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FORMAT_DATE_TIME")
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(FORMAT_DATE_TIME,String)
            End If
            If (FORMAT_STATUS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FORMAT_STATUS")
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(FORMAT_STATUS,String)
            End If
            If (FORMAT_SERIAL_BH Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FORMAT_SERIAL_BH")
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(FORMAT_SERIAL_BH,String)
            End If
            If (FORMAT_SERIAL_CS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FORMAT_SERIAL_CS")
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(FORMAT_SERIAL_CS,String)
            End If
            If (FORMAT_SERIAL_ITA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FORMAT_SERIAL_ITA")
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(FORMAT_SERIAL_ITA,String)
            End If
            If (FORMAT_SERIAL_TS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FORMAT_SERIAL_TS")
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(FORMAT_SERIAL_TS,String)
            End If
            If (FORMAT_SERIAL_CW Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FORMAT_SERIAL_CW")
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(FORMAT_SERIAL_CW,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_LINE_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_SEQ,Integer)
            Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_MACHINE_NO,Integer)
            If (Original_MACHINE_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MACHINE_NAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_MACHINE_NAME,String)
            End If
            If (Original_PATH Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PATH")
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_PATH,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_PLC_NET,Integer)
            Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_PLC_NODE,Integer)
            Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_PLC_UNIT,Integer)
            If (Original_READ_STATUS_ADDRESS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_READ_STATUS_ADDRESS")
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(Original_READ_STATUS_ADDRESS,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_READ_STATUS_LENGTH,Integer)
            If (Original_READ_DATA_ADDRESS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_READ_DATA_ADDRESS")
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(Original_READ_DATA_ADDRESS,String)
            End If
            If (Original_WRITE_STATUS_ADDRESS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_WRITE_STATUS_ADDRESS")
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(Original_WRITE_STATUS_ADDRESS,String)
            End If
            If (Original_WRITE_LIFE_ADDRESS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_WRITE_LIFE_ADDRESS")
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(Original_WRITE_LIFE_ADDRESS,String)
            End If
            If (Original_WRITE_SYNC_ADDRESS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_WRITE_SYNC_ADDRESS")
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(Original_WRITE_SYNC_ADDRESS,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(46).Value = CType(Original_COPY_FILE,Boolean)
            If (Original_COPY_PATH Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_COPY_PATH")
            Else
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(Original_COPY_PATH,String)
            End If
            If (Original_COPY_WILDCARD Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_COPY_WILDCARD")
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(Original_COPY_WILDCARD,String)
            End If
            If (Original_COPY_PURGE_OLD_PATH Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_COPY_PURGE_OLD_PATH")
            Else
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(Original_COPY_PURGE_OLD_PATH,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(50).Value = CType(Original_COPY_PERIOD_MILLISEC,Integer)
            Me.Adapter.UpdateCommand.Parameters(51).Value = CType(Original_COPY_PURGE_PERIOD_DAY,Integer)
            If (Original_FORMAT_MODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FORMAT_MODE")
            Else
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(Original_FORMAT_MODE,String)
            End If
            If (Original_FORMAT_MC Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FORMAT_MC")
            Else
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(Original_FORMAT_MC,String)
            End If
            If (Original_FORMAT_LOT_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FORMAT_LOT_NO")
            Else
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(Original_FORMAT_LOT_NO,String)
            End If
            If (Original_FORMAT_FILE_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FORMAT_FILE_NAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(Original_FORMAT_FILE_NAME,String)
            End If
            If (Original_FORMAT_DATE_TIME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FORMAT_DATE_TIME")
            Else
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(Original_FORMAT_DATE_TIME,String)
            End If
            If (Original_FORMAT_STATUS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FORMAT_STATUS")
            Else
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(Original_FORMAT_STATUS,String)
            End If
            If (Original_FORMAT_SERIAL_BH Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FORMAT_SERIAL_BH")
            Else
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(Original_FORMAT_SERIAL_BH,String)
            End If
            If (Original_FORMAT_SERIAL_CS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FORMAT_SERIAL_CS")
            Else
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(Original_FORMAT_SERIAL_CS,String)
            End If
            If (Original_FORMAT_SERIAL_ITA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FORMAT_SERIAL_ITA")
            Else
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(Original_FORMAT_SERIAL_ITA,String)
            End If
            If (Original_FORMAT_SERIAL_TS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FORMAT_SERIAL_TS")
            Else
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(Original_FORMAT_SERIAL_TS,String)
            End If
            If (Original_FORMAT_SERIAL_CW Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FORMAT_SERIAL_CW")
            Else
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(Original_FORMAT_SERIAL_CW,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(63).Value = CType(ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal LINE_ID As Integer,  _
                    ByVal SEQ As Integer,  _
                    ByVal MACHINE_NO As Integer,  _
                    ByVal MACHINE_NAME As String,  _
                    ByVal PATH As String,  _
                    ByVal PLC_NET As Integer,  _
                    ByVal PLC_NODE As Integer,  _
                    ByVal PLC_UNIT As Integer,  _
                    ByVal READ_STATUS_ADDRESS As String,  _
                    ByVal READ_STATUS_LENGTH As Integer,  _
                    ByVal READ_DATA_ADDRESS As String,  _
                    ByVal WRITE_STATUS_ADDRESS As String,  _
                    ByVal WRITE_LIFE_ADDRESS As String,  _
                    ByVal WRITE_SYNC_ADDRESS As String,  _
                    ByVal COPY_FILE As Boolean,  _
                    ByVal COPY_PATH As String,  _
                    ByVal COPY_WILDCARD As String,  _
                    ByVal COPY_PURGE_OLD_PATH As String,  _
                    ByVal COPY_PERIOD_MILLISEC As Integer,  _
                    ByVal COPY_PURGE_PERIOD_DAY As Integer,  _
                    ByVal FORMAT_MODE As String,  _
                    ByVal FORMAT_MC As String,  _
                    ByVal FORMAT_LOT_NO As String,  _
                    ByVal FORMAT_FILE_NAME As String,  _
                    ByVal FORMAT_DATE_TIME As String,  _
                    ByVal FORMAT_STATUS As String,  _
                    ByVal FORMAT_SERIAL_BH As String,  _
                    ByVal FORMAT_SERIAL_CS As String,  _
                    ByVal FORMAT_SERIAL_ITA As String,  _
                    ByVal FORMAT_SERIAL_TS As String,  _
                    ByVal FORMAT_SERIAL_CW As String,  _
                    ByVal Original_ID As Integer,  _
                    ByVal Original_LINE_ID As Integer,  _
                    ByVal Original_SEQ As Integer,  _
                    ByVal Original_MACHINE_NO As Integer,  _
                    ByVal Original_MACHINE_NAME As String,  _
                    ByVal Original_PATH As String,  _
                    ByVal Original_PLC_NET As Integer,  _
                    ByVal Original_PLC_NODE As Integer,  _
                    ByVal Original_PLC_UNIT As Integer,  _
                    ByVal Original_READ_STATUS_ADDRESS As String,  _
                    ByVal Original_READ_STATUS_LENGTH As Integer,  _
                    ByVal Original_READ_DATA_ADDRESS As String,  _
                    ByVal Original_WRITE_STATUS_ADDRESS As String,  _
                    ByVal Original_WRITE_LIFE_ADDRESS As String,  _
                    ByVal Original_WRITE_SYNC_ADDRESS As String,  _
                    ByVal Original_COPY_FILE As Boolean,  _
                    ByVal Original_COPY_PATH As String,  _
                    ByVal Original_COPY_WILDCARD As String,  _
                    ByVal Original_COPY_PURGE_OLD_PATH As String,  _
                    ByVal Original_COPY_PERIOD_MILLISEC As Integer,  _
                    ByVal Original_COPY_PURGE_PERIOD_DAY As Integer,  _
                    ByVal Original_FORMAT_MODE As String,  _
                    ByVal Original_FORMAT_MC As String,  _
                    ByVal Original_FORMAT_LOT_NO As String,  _
                    ByVal Original_FORMAT_FILE_NAME As String,  _
                    ByVal Original_FORMAT_DATE_TIME As String,  _
                    ByVal Original_FORMAT_STATUS As String,  _
                    ByVal Original_FORMAT_SERIAL_BH As String,  _
                    ByVal Original_FORMAT_SERIAL_CS As String,  _
                    ByVal Original_FORMAT_SERIAL_ITA As String,  _
                    ByVal Original_FORMAT_SERIAL_TS As String,  _
                    ByVal Original_FORMAT_SERIAL_CW As String) As Integer
            Return Me.Update(LINE_ID, SEQ, MACHINE_NO, MACHINE_NAME, PATH, PLC_NET, PLC_NODE, PLC_UNIT, READ_STATUS_ADDRESS, READ_STATUS_LENGTH, READ_DATA_ADDRESS, WRITE_STATUS_ADDRESS, WRITE_LIFE_ADDRESS, WRITE_SYNC_ADDRESS, COPY_FILE, COPY_PATH, COPY_WILDCARD, COPY_PURGE_OLD_PATH, COPY_PERIOD_MILLISEC, COPY_PURGE_PERIOD_DAY, FORMAT_MODE, FORMAT_MC, FORMAT_LOT_NO, FORMAT_FILE_NAME, FORMAT_DATE_TIME, FORMAT_STATUS, FORMAT_SERIAL_BH, FORMAT_SERIAL_CS, FORMAT_SERIAL_ITA, FORMAT_SERIAL_TS, FORMAT_SERIAL_CW, Original_ID, Original_LINE_ID, Original_SEQ, Original_MACHINE_NO, Original_MACHINE_NAME, Original_PATH, Original_PLC_NET, Original_PLC_NODE, Original_PLC_UNIT, Original_READ_STATUS_ADDRESS, Original_READ_STATUS_LENGTH, Original_READ_DATA_ADDRESS, Original_WRITE_STATUS_ADDRESS, Original_WRITE_LIFE_ADDRESS, Original_WRITE_SYNC_ADDRESS, Original_COPY_FILE, Original_COPY_PATH, Original_COPY_WILDCARD, Original_COPY_PURGE_OLD_PATH, Original_COPY_PERIOD_MILLISEC, Original_COPY_PURGE_PERIOD_DAY, Original_FORMAT_MODE, Original_FORMAT_MC, Original_FORMAT_LOT_NO, Original_FORMAT_FILE_NAME, Original_FORMAT_DATE_TIME, Original_FORMAT_STATUS, Original_FORMAT_SERIAL_BH, Original_FORMAT_SERIAL_CS, Original_FORMAT_SERIAL_ITA, Original_FORMAT_SERIAL_TS, Original_FORMAT_SERIAL_CW, Original_ID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class MACHINE_COLUMNSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "MACHINE_COLUMNS"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("MACHINE_ID", "MACHINE_ID")
            tableMapping.ColumnMappings.Add("SEQ", "SEQ")
            tableMapping.ColumnMappings.Add("SCREEN_COLUMN_NAME", "SCREEN_COLUMN_NAME")
            tableMapping.ColumnMappings.Add("FILE_COLUMN_NAME", "FILE_COLUMN_NAME")
            tableMapping.ColumnMappings.Add("DATA_TYPE", "DATA_TYPE")
            tableMapping.ColumnMappings.Add("POSITION", "POSITION")
            tableMapping.ColumnMappings.Add("LENGTH", "LENGTH")
            tableMapping.ColumnMappings.Add("MULTIPLIER", "MULTIPLIER")
            tableMapping.ColumnMappings.Add("FORMAT_STRING", "FORMAT_STRING")
            tableMapping.ColumnMappings.Add("REPLACE_COLUMN_NAME", "REPLACE_COLUMN_NAME")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[MACHINE_COLUMNS] WHERE (([ID] = @Original_ID) AND ([MACHINE_ID"& _ 
                "] = @Original_MACHINE_ID) AND ([SEQ] = @Original_SEQ) AND ([SCREEN_COLUMN_NAME] "& _ 
                "= @Original_SCREEN_COLUMN_NAME) AND ([FILE_COLUMN_NAME] = @Original_FILE_COLUMN_"& _ 
                "NAME) AND ([DATA_TYPE] = @Original_DATA_TYPE) AND ([POSITION] = @Original_POSITI"& _ 
                "ON) AND ([LENGTH] = @Original_LENGTH) AND ((@IsNull_MULTIPLIER = 1 AND [MULTIPLI"& _ 
                "ER] IS NULL) OR ([MULTIPLIER] = @Original_MULTIPLIER)) AND ((@IsNull_FORMAT_STRI"& _ 
                "NG = 1 AND [FORMAT_STRING] IS NULL) OR ([FORMAT_STRING] = @Original_FORMAT_STRIN"& _ 
                "G)) AND ([REPLACE_COLUMN_NAME] = @Original_REPLACE_COLUMN_NAME))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MACHINE_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MACHINE_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SEQ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEQ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SCREEN_COLUMN_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SCREEN_COLUMN_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FILE_COLUMN_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FILE_COLUMN_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DATA_TYPE", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATA_TYPE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_POSITION", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "POSITION", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LENGTH", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LENGTH", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MULTIPLIER", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MULTIPLIER", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MULTIPLIER", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MULTIPLIER", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FORMAT_STRING", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FORMAT_STRING", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FORMAT_STRING", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FORMAT_STRING", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_REPLACE_COLUMN_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REPLACE_COLUMN_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[MACHINE_COLUMNS] ([MACHINE_ID], [SEQ], [SCREEN_COLUMN_NAME], ["& _ 
                "FILE_COLUMN_NAME], [DATA_TYPE], [POSITION], [LENGTH], [MULTIPLIER], [FORMAT_STRI"& _ 
                "NG], [REPLACE_COLUMN_NAME]) VALUES (@MACHINE_ID, @SEQ, @SCREEN_COLUMN_NAME, @FIL"& _ 
                "E_COLUMN_NAME, @DATA_TYPE, @POSITION, @LENGTH, @MULTIPLIER, @FORMAT_STRING, @REP"& _ 
                "LACE_COLUMN_NAME);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID, MACHINE_ID, SEQ, SCREEN_COLUMN_NAME, FILE_COLUMN_"& _ 
                "NAME, DATA_TYPE, POSITION, LENGTH, MULTIPLIER, FORMAT_STRING, REPLACE_COLUMN_NAM"& _ 
                "E FROM MACHINE_COLUMNS WHERE (ID = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MACHINE_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MACHINE_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SEQ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEQ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SCREEN_COLUMN_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SCREEN_COLUMN_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FILE_COLUMN_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FILE_COLUMN_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATA_TYPE", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATA_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@POSITION", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "POSITION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LENGTH", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LENGTH", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MULTIPLIER", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MULTIPLIER", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FORMAT_STRING", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FORMAT_STRING", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@REPLACE_COLUMN_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REPLACE_COLUMN_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[MACHINE_COLUMNS] SET [MACHINE_ID] = @MACHINE_ID, [SEQ] = @SEQ, [SCR"& _ 
                "EEN_COLUMN_NAME] = @SCREEN_COLUMN_NAME, [FILE_COLUMN_NAME] = @FILE_COLUMN_NAME, "& _ 
                "[DATA_TYPE] = @DATA_TYPE, [POSITION] = @POSITION, [LENGTH] = @LENGTH, [MULTIPLIE"& _ 
                "R] = @MULTIPLIER, [FORMAT_STRING] = @FORMAT_STRING, [REPLACE_COLUMN_NAME] = @REP"& _ 
                "LACE_COLUMN_NAME WHERE (([ID] = @Original_ID) AND ([MACHINE_ID] = @Original_MACH"& _ 
                "INE_ID) AND ([SEQ] = @Original_SEQ) AND ([SCREEN_COLUMN_NAME] = @Original_SCREEN"& _ 
                "_COLUMN_NAME) AND ([FILE_COLUMN_NAME] = @Original_FILE_COLUMN_NAME) AND ([DATA_T"& _ 
                "YPE] = @Original_DATA_TYPE) AND ([POSITION] = @Original_POSITION) AND ([LENGTH] "& _ 
                "= @Original_LENGTH) AND ((@IsNull_MULTIPLIER = 1 AND [MULTIPLIER] IS NULL) OR (["& _ 
                "MULTIPLIER] = @Original_MULTIPLIER)) AND ((@IsNull_FORMAT_STRING = 1 AND [FORMAT"& _ 
                "_STRING] IS NULL) OR ([FORMAT_STRING] = @Original_FORMAT_STRING)) AND ([REPLACE_"& _ 
                "COLUMN_NAME] = @Original_REPLACE_COLUMN_NAME));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID, MACHINE_ID, SEQ, SCR"& _ 
                "EEN_COLUMN_NAME, FILE_COLUMN_NAME, DATA_TYPE, POSITION, LENGTH, MULTIPLIER, FORM"& _ 
                "AT_STRING, REPLACE_COLUMN_NAME FROM MACHINE_COLUMNS WHERE (ID = @ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MACHINE_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MACHINE_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SEQ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEQ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SCREEN_COLUMN_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SCREEN_COLUMN_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FILE_COLUMN_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FILE_COLUMN_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATA_TYPE", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATA_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@POSITION", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "POSITION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LENGTH", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LENGTH", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MULTIPLIER", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MULTIPLIER", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FORMAT_STRING", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FORMAT_STRING", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@REPLACE_COLUMN_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REPLACE_COLUMN_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MACHINE_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MACHINE_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SEQ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEQ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SCREEN_COLUMN_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SCREEN_COLUMN_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FILE_COLUMN_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FILE_COLUMN_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DATA_TYPE", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATA_TYPE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_POSITION", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "POSITION", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LENGTH", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LENGTH", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MULTIPLIER", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MULTIPLIER", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MULTIPLIER", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MULTIPLIER", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FORMAT_STRING", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FORMAT_STRING", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FORMAT_STRING", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FORMAT_STRING", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_REPLACE_COLUMN_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REPLACE_COLUMN_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.ihi_dfs_client.My.MySettings.Default.ihi_rhf5_developmentConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID, MACHINE_ID, SEQ, SCREEN_COLUMN_NAME, FILE_COLUMN_NAME, DATA_TYPE, POSI"& _ 
                "TION, LENGTH, MULTIPLIER, FORMAT_STRING, REPLACE_COLUMN_NAME FROM dbo.MACHINE_CO"& _ 
                "LUMNS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT * FROM MACHINE_COLUMNS "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE (MACHINE_ID = @MACHINE_ID)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"order by SEQ"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MACHINE_ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "MACHINE_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ihi_rhf5_developmentDataSet.MACHINE_COLUMNSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As ihi_rhf5_developmentDataSet.MACHINE_COLUMNSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ihi_rhf5_developmentDataSet.MACHINE_COLUMNSDataTable = New ihi_rhf5_developmentDataSet.MACHINE_COLUMNSDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy_MACHINE_ID(ByVal dataTable As ihi_rhf5_developmentDataSet.MACHINE_COLUMNSDataTable, ByVal MACHINE_ID As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(MACHINE_ID,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataBy_MACHINE_ID(ByVal MACHINE_ID As Integer) As ihi_rhf5_developmentDataSet.MACHINE_COLUMNSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(MACHINE_ID,Integer)
            Dim dataTable As ihi_rhf5_developmentDataSet.MACHINE_COLUMNSDataTable = New ihi_rhf5_developmentDataSet.MACHINE_COLUMNSDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As ihi_rhf5_developmentDataSet.MACHINE_COLUMNSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As ihi_rhf5_developmentDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "MACHINE_COLUMNS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID As Integer, ByVal Original_MACHINE_ID As Integer, ByVal Original_SEQ As Integer, ByVal Original_SCREEN_COLUMN_NAME As String, ByVal Original_FILE_COLUMN_NAME As String, ByVal Original_DATA_TYPE As String, ByVal Original_POSITION As Integer, ByVal Original_LENGTH As Integer, ByVal Original_MULTIPLIER As Global.System.Nullable(Of Double), ByVal Original_FORMAT_STRING As String, ByVal Original_REPLACE_COLUMN_NAME As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_MACHINE_ID,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_SEQ,Integer)
            If (Original_SCREEN_COLUMN_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SCREEN_COLUMN_NAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_SCREEN_COLUMN_NAME,String)
            End If
            If (Original_FILE_COLUMN_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FILE_COLUMN_NAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_FILE_COLUMN_NAME,String)
            End If
            If (Original_DATA_TYPE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DATA_TYPE")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_DATA_TYPE,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_POSITION,Integer)
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_LENGTH,Integer)
            If (Original_MULTIPLIER.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_MULTIPLIER.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Original_FORMAT_STRING Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_FORMAT_STRING,String)
            End If
            If (Original_REPLACE_COLUMN_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_REPLACE_COLUMN_NAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_REPLACE_COLUMN_NAME,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal MACHINE_ID As Integer, ByVal SEQ As Integer, ByVal SCREEN_COLUMN_NAME As String, ByVal FILE_COLUMN_NAME As String, ByVal DATA_TYPE As String, ByVal POSITION As Integer, ByVal LENGTH As Integer, ByVal MULTIPLIER As Global.System.Nullable(Of Double), ByVal FORMAT_STRING As String, ByVal REPLACE_COLUMN_NAME As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(MACHINE_ID,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(SEQ,Integer)
            If (SCREEN_COLUMN_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SCREEN_COLUMN_NAME")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(SCREEN_COLUMN_NAME,String)
            End If
            If (FILE_COLUMN_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FILE_COLUMN_NAME")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(FILE_COLUMN_NAME,String)
            End If
            If (DATA_TYPE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DATA_TYPE")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(DATA_TYPE,String)
            End If
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(POSITION,Integer)
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(LENGTH,Integer)
            If (MULTIPLIER.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(MULTIPLIER.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (FORMAT_STRING Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(FORMAT_STRING,String)
            End If
            If (REPLACE_COLUMN_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("REPLACE_COLUMN_NAME")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(REPLACE_COLUMN_NAME,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal MACHINE_ID As Integer,  _
                    ByVal SEQ As Integer,  _
                    ByVal SCREEN_COLUMN_NAME As String,  _
                    ByVal FILE_COLUMN_NAME As String,  _
                    ByVal DATA_TYPE As String,  _
                    ByVal POSITION As Integer,  _
                    ByVal LENGTH As Integer,  _
                    ByVal MULTIPLIER As Global.System.Nullable(Of Double),  _
                    ByVal FORMAT_STRING As String,  _
                    ByVal REPLACE_COLUMN_NAME As String,  _
                    ByVal Original_ID As Integer,  _
                    ByVal Original_MACHINE_ID As Integer,  _
                    ByVal Original_SEQ As Integer,  _
                    ByVal Original_SCREEN_COLUMN_NAME As String,  _
                    ByVal Original_FILE_COLUMN_NAME As String,  _
                    ByVal Original_DATA_TYPE As String,  _
                    ByVal Original_POSITION As Integer,  _
                    ByVal Original_LENGTH As Integer,  _
                    ByVal Original_MULTIPLIER As Global.System.Nullable(Of Double),  _
                    ByVal Original_FORMAT_STRING As String,  _
                    ByVal Original_REPLACE_COLUMN_NAME As String,  _
                    ByVal ID As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(MACHINE_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SEQ,Integer)
            If (SCREEN_COLUMN_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SCREEN_COLUMN_NAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(SCREEN_COLUMN_NAME,String)
            End If
            If (FILE_COLUMN_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FILE_COLUMN_NAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(FILE_COLUMN_NAME,String)
            End If
            If (DATA_TYPE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DATA_TYPE")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(DATA_TYPE,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(POSITION,Integer)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(LENGTH,Integer)
            If (MULTIPLIER.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(MULTIPLIER.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (FORMAT_STRING Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(FORMAT_STRING,String)
            End If
            If (REPLACE_COLUMN_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("REPLACE_COLUMN_NAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(REPLACE_COLUMN_NAME,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_MACHINE_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_SEQ,Integer)
            If (Original_SCREEN_COLUMN_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SCREEN_COLUMN_NAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_SCREEN_COLUMN_NAME,String)
            End If
            If (Original_FILE_COLUMN_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FILE_COLUMN_NAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_FILE_COLUMN_NAME,String)
            End If
            If (Original_DATA_TYPE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DATA_TYPE")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_DATA_TYPE,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_POSITION,Integer)
            Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_LENGTH,Integer)
            If (Original_MULTIPLIER.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_MULTIPLIER.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (Original_FORMAT_STRING Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_FORMAT_STRING,String)
            End If
            If (Original_REPLACE_COLUMN_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_REPLACE_COLUMN_NAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_REPLACE_COLUMN_NAME,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(23).Value = CType(ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal MACHINE_ID As Integer,  _
                    ByVal SEQ As Integer,  _
                    ByVal SCREEN_COLUMN_NAME As String,  _
                    ByVal FILE_COLUMN_NAME As String,  _
                    ByVal DATA_TYPE As String,  _
                    ByVal POSITION As Integer,  _
                    ByVal LENGTH As Integer,  _
                    ByVal MULTIPLIER As Global.System.Nullable(Of Double),  _
                    ByVal FORMAT_STRING As String,  _
                    ByVal REPLACE_COLUMN_NAME As String,  _
                    ByVal Original_ID As Integer,  _
                    ByVal Original_MACHINE_ID As Integer,  _
                    ByVal Original_SEQ As Integer,  _
                    ByVal Original_SCREEN_COLUMN_NAME As String,  _
                    ByVal Original_FILE_COLUMN_NAME As String,  _
                    ByVal Original_DATA_TYPE As String,  _
                    ByVal Original_POSITION As Integer,  _
                    ByVal Original_LENGTH As Integer,  _
                    ByVal Original_MULTIPLIER As Global.System.Nullable(Of Double),  _
                    ByVal Original_FORMAT_STRING As String,  _
                    ByVal Original_REPLACE_COLUMN_NAME As String) As Integer
            Return Me.Update(MACHINE_ID, SEQ, SCREEN_COLUMN_NAME, FILE_COLUMN_NAME, DATA_TYPE, POSITION, LENGTH, MULTIPLIER, FORMAT_STRING, REPLACE_COLUMN_NAME, Original_ID, Original_MACHINE_ID, Original_SEQ, Original_SCREEN_COLUMN_NAME, Original_FILE_COLUMN_NAME, Original_DATA_TYPE, Original_POSITION, Original_LENGTH, Original_MULTIPLIER, Original_FORMAT_STRING, Original_REPLACE_COLUMN_NAME, Original_ID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class MACHINE_DATA_STRTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "MACHINE_DATA_STR"
            tableMapping.ColumnMappings.Add("RESULT_ID", "RESULT_ID")
            tableMapping.ColumnMappings.Add("MACHINE_COLUMNS_ID", "MACHINE_COLUMNS_ID")
            tableMapping.ColumnMappings.Add("DATA", "DATA")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[MACHINE_DATA_STR] WHERE (([RESULT_ID] = @Original_RESULT_ID) A"& _ 
                "ND ([MACHINE_COLUMNS_ID] = @Original_MACHINE_COLUMNS_ID) AND ([DATA] = @Original"& _ 
                "_DATA))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RESULT_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RESULT_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MACHINE_COLUMNS_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MACHINE_COLUMNS_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DATA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[MACHINE_DATA_STR] ([RESULT_ID], [MACHINE_COLUMNS_ID], [DATA]) "& _ 
                "VALUES (@RESULT_ID, @MACHINE_COLUMNS_ID, @DATA);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT RESULT_ID, MACHINE_COLU"& _ 
                "MNS_ID, DATA FROM MACHINE_DATA_STR WHERE (MACHINE_COLUMNS_ID = @MACHINE_COLUMNS_"& _ 
                "ID) AND (RESULT_ID = @RESULT_ID)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RESULT_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RESULT_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MACHINE_COLUMNS_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MACHINE_COLUMNS_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[MACHINE_DATA_STR] SET [RESULT_ID] = @RESULT_ID, [MACHINE_COLUMNS_ID"& _ 
                "] = @MACHINE_COLUMNS_ID, [DATA] = @DATA WHERE (([RESULT_ID] = @Original_RESULT_I"& _ 
                "D) AND ([MACHINE_COLUMNS_ID] = @Original_MACHINE_COLUMNS_ID) AND ([DATA] = @Orig"& _ 
                "inal_DATA));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT RESULT_ID, MACHINE_COLUMNS_ID, DATA FROM MACHINE_DATA_STR W"& _ 
                "HERE (MACHINE_COLUMNS_ID = @MACHINE_COLUMNS_ID) AND (RESULT_ID = @RESULT_ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RESULT_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RESULT_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MACHINE_COLUMNS_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MACHINE_COLUMNS_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RESULT_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RESULT_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MACHINE_COLUMNS_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MACHINE_COLUMNS_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DATA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.ihi_dfs_client.My.MySettings.Default.ihi_rhf5_developmentConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT RESULT_ID, MACHINE_COLUMNS_ID, DATA FROM dbo.MACHINE_DATA_STR"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ihi_rhf5_developmentDataSet.MACHINE_DATA_STRDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As ihi_rhf5_developmentDataSet.MACHINE_DATA_STRDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ihi_rhf5_developmentDataSet.MACHINE_DATA_STRDataTable = New ihi_rhf5_developmentDataSet.MACHINE_DATA_STRDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As ihi_rhf5_developmentDataSet.MACHINE_DATA_STRDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As ihi_rhf5_developmentDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "MACHINE_DATA_STR")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_RESULT_ID As Integer, ByVal Original_MACHINE_COLUMNS_ID As Integer, ByVal Original_DATA As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_RESULT_ID,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_MACHINE_COLUMNS_ID,Integer)
            If (Original_DATA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DATA")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_DATA,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal RESULT_ID As Integer, ByVal MACHINE_COLUMNS_ID As Integer, ByVal DATA As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(RESULT_ID,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(MACHINE_COLUMNS_ID,Integer)
            If (DATA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DATA")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(DATA,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal RESULT_ID As Integer, ByVal MACHINE_COLUMNS_ID As Integer, ByVal DATA As String, ByVal Original_RESULT_ID As Integer, ByVal Original_MACHINE_COLUMNS_ID As Integer, ByVal Original_DATA As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(RESULT_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(MACHINE_COLUMNS_ID,Integer)
            If (DATA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DATA")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(DATA,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_RESULT_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_MACHINE_COLUMNS_ID,Integer)
            If (Original_DATA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DATA")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_DATA,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal DATA As String, ByVal Original_RESULT_ID As Integer, ByVal Original_MACHINE_COLUMNS_ID As Integer, ByVal Original_DATA As String) As Integer
            Return Me.Update(Original_RESULT_ID, Original_MACHINE_COLUMNS_ID, DATA, Original_RESULT_ID, Original_MACHINE_COLUMNS_ID, Original_DATA)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class RESULTTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "RESULT"
            tableMapping.ColumnMappings.Add("TRAN_ID", "TRAN_ID")
            tableMapping.ColumnMappings.Add("SERIAL_ID", "SERIAL_ID")
            tableMapping.ColumnMappings.Add("MODE", "MODE")
            tableMapping.ColumnMappings.Add("MACHINE_ID", "MACHINE_ID")
            tableMapping.ColumnMappings.Add("LOT_NO", "LOT_NO")
            tableMapping.ColumnMappings.Add("FILE_NAME", "FILE_NAME")
            tableMapping.ColumnMappings.Add("RESULT_DATE_TIME", "RESULT_DATE_TIME")
            tableMapping.ColumnMappings.Add("STATUS", "STATUS")
            tableMapping.ColumnMappings.Add("CREATED_WHEN", "CREATED_WHEN")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[RESULT] WHERE (([TRAN_ID] = @Original_TRAN_ID) AND ([SERIAL_ID"& _ 
                "] = @Original_SERIAL_ID) AND ([MODE] = @Original_MODE) AND ([MACHINE_ID] = @Orig"& _ 
                "inal_MACHINE_ID) AND ([LOT_NO] = @Original_LOT_NO) AND ([FILE_NAME] = @Original_"& _ 
                "FILE_NAME) AND ([RESULT_DATE_TIME] = @Original_RESULT_DATE_TIME) AND ([STATUS] ="& _ 
                " @Original_STATUS) AND ([CREATED_WHEN] = @Original_CREATED_WHEN))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRAN_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRAN_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SERIAL_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SERIAL_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MACHINE_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MACHINE_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LOT_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FILE_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FILE_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RESULT_DATE_TIME", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RESULT_DATE_TIME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_STATUS", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STATUS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CREATED_WHEN", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_WHEN", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[RESULT] ([SERIAL_ID], [MODE], [MACHINE_ID], [LOT_NO], [FILE_NA"& _ 
                "ME], [RESULT_DATE_TIME], [STATUS], [CREATED_WHEN]) VALUES (@SERIAL_ID, @MODE, @M"& _ 
                "ACHINE_ID, @LOT_NO, @FILE_NAME, @RESULT_DATE_TIME, @STATUS, @CREATED_WHEN);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SEL"& _ 
                "ECT TRAN_ID, SERIAL_ID, MODE, MACHINE_ID, LOT_NO, FILE_NAME, RESULT_DATE_TIME, S"& _ 
                "TATUS, CREATED_WHEN FROM RESULT WHERE (TRAN_ID = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SERIAL_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SERIAL_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MACHINE_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MACHINE_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LOT_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FILE_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FILE_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RESULT_DATE_TIME", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RESULT_DATE_TIME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STATUS", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STATUS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CREATED_WHEN", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_WHEN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[RESULT] SET [SERIAL_ID] = @SERIAL_ID, [MODE] = @MODE, [MACHINE_ID] "& _ 
                "= @MACHINE_ID, [LOT_NO] = @LOT_NO, [FILE_NAME] = @FILE_NAME, [RESULT_DATE_TIME] "& _ 
                "= @RESULT_DATE_TIME, [STATUS] = @STATUS, [CREATED_WHEN] = @CREATED_WHEN WHERE (("& _ 
                "[TRAN_ID] = @Original_TRAN_ID) AND ([SERIAL_ID] = @Original_SERIAL_ID) AND ([MOD"& _ 
                "E] = @Original_MODE) AND ([MACHINE_ID] = @Original_MACHINE_ID) AND ([LOT_NO] = @"& _ 
                "Original_LOT_NO) AND ([FILE_NAME] = @Original_FILE_NAME) AND ([RESULT_DATE_TIME]"& _ 
                " = @Original_RESULT_DATE_TIME) AND ([STATUS] = @Original_STATUS) AND ([CREATED_W"& _ 
                "HEN] = @Original_CREATED_WHEN));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT TRAN_ID, SERIAL_ID, MODE, MACHINE_ID, L"& _ 
                "OT_NO, FILE_NAME, RESULT_DATE_TIME, STATUS, CREATED_WHEN FROM RESULT WHERE (TRAN"& _ 
                "_ID = @TRAN_ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SERIAL_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SERIAL_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MACHINE_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MACHINE_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LOT_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FILE_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FILE_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RESULT_DATE_TIME", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RESULT_DATE_TIME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STATUS", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STATUS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CREATED_WHEN", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_WHEN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRAN_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRAN_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SERIAL_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SERIAL_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MACHINE_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MACHINE_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LOT_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FILE_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FILE_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RESULT_DATE_TIME", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RESULT_DATE_TIME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_STATUS", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STATUS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CREATED_WHEN", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_WHEN", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRAN_ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "TRAN_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.ihi_dfs_client.My.MySettings.Default.ihi_rhf5_developmentConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT TRAN_ID, SERIAL_ID, MODE, MACHINE_ID, LOT_NO, FILE_NAME, RESULT_DATE_TIME,"& _ 
                " STATUS, CREATED_WHEN FROM dbo.RESULT"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ihi_rhf5_developmentDataSet.RESULTDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As ihi_rhf5_developmentDataSet.RESULTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ihi_rhf5_developmentDataSet.RESULTDataTable = New ihi_rhf5_developmentDataSet.RESULTDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As ihi_rhf5_developmentDataSet.RESULTDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As ihi_rhf5_developmentDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "RESULT")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_TRAN_ID As Integer, ByVal Original_SERIAL_ID As Integer, ByVal Original_MODE As String, ByVal Original_MACHINE_ID As Integer, ByVal Original_LOT_NO As String, ByVal Original_FILE_NAME As String, ByVal Original_RESULT_DATE_TIME As Date, ByVal Original_STATUS As String, ByVal Original_CREATED_WHEN As Date) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_TRAN_ID,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_SERIAL_ID,Integer)
            If (Original_MODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MODE")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_MODE,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_MACHINE_ID,Integer)
            If (Original_LOT_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_LOT_NO")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_LOT_NO,String)
            End If
            If (Original_FILE_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FILE_NAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_FILE_NAME,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_RESULT_DATE_TIME,Date)
            If (Original_STATUS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_STATUS")
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_STATUS,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_CREATED_WHEN,Date)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal SERIAL_ID As Integer, ByVal MODE As String, ByVal MACHINE_ID As Integer, ByVal LOT_NO As String, ByVal FILE_NAME As String, ByVal RESULT_DATE_TIME As Date, ByVal STATUS As String, ByVal CREATED_WHEN As Date) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(SERIAL_ID,Integer)
            If (MODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MODE")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(MODE,String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(MACHINE_ID,Integer)
            If (LOT_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LOT_NO")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(LOT_NO,String)
            End If
            If (FILE_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FILE_NAME")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(FILE_NAME,String)
            End If
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(RESULT_DATE_TIME,Date)
            If (STATUS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("STATUS")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(STATUS,String)
            End If
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(CREATED_WHEN,Date)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal SERIAL_ID As Integer,  _
                    ByVal MODE As String,  _
                    ByVal MACHINE_ID As Integer,  _
                    ByVal LOT_NO As String,  _
                    ByVal FILE_NAME As String,  _
                    ByVal RESULT_DATE_TIME As Date,  _
                    ByVal STATUS As String,  _
                    ByVal CREATED_WHEN As Date,  _
                    ByVal Original_TRAN_ID As Integer,  _
                    ByVal Original_SERIAL_ID As Integer,  _
                    ByVal Original_MODE As String,  _
                    ByVal Original_MACHINE_ID As Integer,  _
                    ByVal Original_LOT_NO As String,  _
                    ByVal Original_FILE_NAME As String,  _
                    ByVal Original_RESULT_DATE_TIME As Date,  _
                    ByVal Original_STATUS As String,  _
                    ByVal Original_CREATED_WHEN As Date,  _
                    ByVal TRAN_ID As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SERIAL_ID,Integer)
            If (MODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MODE")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(MODE,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(MACHINE_ID,Integer)
            If (LOT_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LOT_NO")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(LOT_NO,String)
            End If
            If (FILE_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FILE_NAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(FILE_NAME,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(RESULT_DATE_TIME,Date)
            If (STATUS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("STATUS")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(STATUS,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(CREATED_WHEN,Date)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_TRAN_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_SERIAL_ID,Integer)
            If (Original_MODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MODE")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_MODE,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_MACHINE_ID,Integer)
            If (Original_LOT_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_LOT_NO")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_LOT_NO,String)
            End If
            If (Original_FILE_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FILE_NAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_FILE_NAME,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_RESULT_DATE_TIME,Date)
            If (Original_STATUS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_STATUS")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_STATUS,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_CREATED_WHEN,Date)
            Me.Adapter.UpdateCommand.Parameters(17).Value = CType(TRAN_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal SERIAL_ID As Integer,  _
                    ByVal MODE As String,  _
                    ByVal MACHINE_ID As Integer,  _
                    ByVal LOT_NO As String,  _
                    ByVal FILE_NAME As String,  _
                    ByVal RESULT_DATE_TIME As Date,  _
                    ByVal STATUS As String,  _
                    ByVal CREATED_WHEN As Date,  _
                    ByVal Original_TRAN_ID As Integer,  _
                    ByVal Original_SERIAL_ID As Integer,  _
                    ByVal Original_MODE As String,  _
                    ByVal Original_MACHINE_ID As Integer,  _
                    ByVal Original_LOT_NO As String,  _
                    ByVal Original_FILE_NAME As String,  _
                    ByVal Original_RESULT_DATE_TIME As Date,  _
                    ByVal Original_STATUS As String,  _
                    ByVal Original_CREATED_WHEN As Date) As Integer
            Return Me.Update(SERIAL_ID, MODE, MACHINE_ID, LOT_NO, FILE_NAME, RESULT_DATE_TIME, STATUS, CREATED_WHEN, Original_TRAN_ID, Original_SERIAL_ID, Original_MODE, Original_MACHINE_ID, Original_LOT_NO, Original_FILE_NAME, Original_RESULT_DATE_TIME, Original_STATUS, Original_CREATED_WHEN, Original_TRAN_ID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SERIALTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SERIAL"
            tableMapping.ColumnMappings.Add("SERIAL_ID", "SERIAL_ID")
            tableMapping.ColumnMappings.Add("SERIAL_BH", "SERIAL_BH")
            tableMapping.ColumnMappings.Add("SEQ_NO", "SEQ_NO")
            tableMapping.ColumnMappings.Add("SERIAL_CS", "SERIAL_CS")
            tableMapping.ColumnMappings.Add("SERIAL_ITA", "SERIAL_ITA")
            tableMapping.ColumnMappings.Add("CREATED_WHEN", "CREATED_WHEN")
            tableMapping.ColumnMappings.Add("SERIAL_TS", "SERIAL_TS")
            tableMapping.ColumnMappings.Add("SERIAL_CW", "SERIAL_CW")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[SERIAL] WHERE (([SERIAL_ID] = @Original_SERIAL_ID) AND ([SERIA"& _ 
                "L_BH] = @Original_SERIAL_BH) AND ([SEQ_NO] = @Original_SEQ_NO) AND ((@IsNull_SER"& _ 
                "IAL_CS = 1 AND [SERIAL_CS] IS NULL) OR ([SERIAL_CS] = @Original_SERIAL_CS)) AND "& _ 
                "((@IsNull_SERIAL_ITA = 1 AND [SERIAL_ITA] IS NULL) OR ([SERIAL_ITA] = @Original_"& _ 
                "SERIAL_ITA)) AND ([CREATED_WHEN] = @Original_CREATED_WHEN) AND ((@IsNull_SERIAL_"& _ 
                "TS = 1 AND [SERIAL_TS] IS NULL) OR ([SERIAL_TS] = @Original_SERIAL_TS)) AND ((@I"& _ 
                "sNull_SERIAL_CW = 1 AND [SERIAL_CW] IS NULL) OR ([SERIAL_CW] = @Original_SERIAL_"& _ 
                "CW)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SERIAL_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SERIAL_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SERIAL_BH", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SERIAL_BH", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SEQ_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEQ_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SERIAL_CS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SERIAL_CS", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SERIAL_CS", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SERIAL_CS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SERIAL_ITA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SERIAL_ITA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SERIAL_ITA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SERIAL_ITA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CREATED_WHEN", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_WHEN", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SERIAL_TS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SERIAL_TS", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SERIAL_TS", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SERIAL_TS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SERIAL_CW", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SERIAL_CW", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SERIAL_CW", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SERIAL_CW", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[SERIAL] ([SERIAL_BH], [SEQ_NO], [SERIAL_CS], [SERIAL_ITA], [CR"& _ 
                "EATED_WHEN], [SERIAL_TS], [SERIAL_CW]) VALUES (@SERIAL_BH, @SEQ_NO, @SERIAL_CS, "& _ 
                "@SERIAL_ITA, @CREATED_WHEN, @SERIAL_TS, @SERIAL_CW);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT SERIAL_ID, SERIAL_B"& _ 
                "H, SEQ_NO, SERIAL_CS, SERIAL_ITA, CREATED_WHEN, SERIAL_TS, SERIAL_CW FROM SERIAL"& _ 
                " WHERE (SERIAL_ID = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SERIAL_BH", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SERIAL_BH", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SEQ_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEQ_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SERIAL_CS", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SERIAL_CS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SERIAL_ITA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SERIAL_ITA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CREATED_WHEN", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_WHEN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SERIAL_TS", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SERIAL_TS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SERIAL_CW", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SERIAL_CW", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[SERIAL] SET [SERIAL_BH] = @SERIAL_BH, [SEQ_NO] = @SEQ_NO, [SERIAL_C"& _ 
                "S] = @SERIAL_CS, [SERIAL_ITA] = @SERIAL_ITA, [CREATED_WHEN] = @CREATED_WHEN, [SE"& _ 
                "RIAL_TS] = @SERIAL_TS, [SERIAL_CW] = @SERIAL_CW WHERE (([SERIAL_ID] = @Original_"& _ 
                "SERIAL_ID) AND ([SERIAL_BH] = @Original_SERIAL_BH) AND ([SEQ_NO] = @Original_SEQ"& _ 
                "_NO) AND ((@IsNull_SERIAL_CS = 1 AND [SERIAL_CS] IS NULL) OR ([SERIAL_CS] = @Ori"& _ 
                "ginal_SERIAL_CS)) AND ((@IsNull_SERIAL_ITA = 1 AND [SERIAL_ITA] IS NULL) OR ([SE"& _ 
                "RIAL_ITA] = @Original_SERIAL_ITA)) AND ([CREATED_WHEN] = @Original_CREATED_WHEN)"& _ 
                " AND ((@IsNull_SERIAL_TS = 1 AND [SERIAL_TS] IS NULL) OR ([SERIAL_TS] = @Origina"& _ 
                "l_SERIAL_TS)) AND ((@IsNull_SERIAL_CW = 1 AND [SERIAL_CW] IS NULL) OR ([SERIAL_C"& _ 
                "W] = @Original_SERIAL_CW)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT SERIAL_ID, SERIAL_BH, SEQ_NO, SERIAL_CS, SE"& _ 
                "RIAL_ITA, CREATED_WHEN, SERIAL_TS, SERIAL_CW FROM SERIAL WHERE (SERIAL_ID = @SER"& _ 
                "IAL_ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SERIAL_BH", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SERIAL_BH", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SEQ_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEQ_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SERIAL_CS", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SERIAL_CS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SERIAL_ITA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SERIAL_ITA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CREATED_WHEN", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_WHEN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SERIAL_TS", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SERIAL_TS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SERIAL_CW", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SERIAL_CW", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SERIAL_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SERIAL_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SERIAL_BH", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SERIAL_BH", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SEQ_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEQ_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SERIAL_CS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SERIAL_CS", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SERIAL_CS", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SERIAL_CS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SERIAL_ITA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SERIAL_ITA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SERIAL_ITA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SERIAL_ITA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CREATED_WHEN", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_WHEN", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SERIAL_TS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SERIAL_TS", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SERIAL_TS", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SERIAL_TS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SERIAL_CW", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SERIAL_CW", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SERIAL_CW", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SERIAL_CW", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SERIAL_ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "SERIAL_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.ihi_dfs_client.My.MySettings.Default.ihi_rhf5_developmentConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT * FROM dbo.SERIAL"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT CREATED_WHEN, SEQ_NO, SERIAL_BH, SERIAL_CS, SERIAL_CW, SERIAL_ID, SERIAL_I"& _ 
                "TA, SERIAL_TS FROM SERIAL WHERE (CREATED_WHEN >= @dateFrom) AND (CREATED_WHEN <="& _ 
                " @dateTo)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dateFrom", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_WHEN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dateTo", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_WHEN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ihi_rhf5_developmentDataSet.SERIALDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As ihi_rhf5_developmentDataSet.SERIALDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ihi_rhf5_developmentDataSet.SERIALDataTable = New ihi_rhf5_developmentDataSet.SERIALDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByDateFrom_DateTo(ByVal dataTable As ihi_rhf5_developmentDataSet.SERIALDataTable, ByVal dateFrom As Date, ByVal dateTo As Date) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(dateFrom,Date)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(dateTo,Date)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByDateFrom_DateTo(ByVal dateFrom As Date, ByVal dateTo As Date) As ihi_rhf5_developmentDataSet.SERIALDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(dateFrom,Date)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(dateTo,Date)
            Dim dataTable As ihi_rhf5_developmentDataSet.SERIALDataTable = New ihi_rhf5_developmentDataSet.SERIALDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As ihi_rhf5_developmentDataSet.SERIALDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As ihi_rhf5_developmentDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "SERIAL")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_SERIAL_ID As Integer, ByVal Original_SERIAL_BH As String, ByVal Original_SEQ_NO As Integer, ByVal Original_SERIAL_CS As String, ByVal Original_SERIAL_ITA As String, ByVal Original_CREATED_WHEN As Date, ByVal Original_SERIAL_TS As String, ByVal Original_SERIAL_CW As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_SERIAL_ID,Integer)
            If (Original_SERIAL_BH Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SERIAL_BH")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_SERIAL_BH,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_SEQ_NO,Integer)
            If (Original_SERIAL_CS Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_SERIAL_CS,String)
            End If
            If (Original_SERIAL_ITA Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_SERIAL_ITA,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_CREATED_WHEN,Date)
            If (Original_SERIAL_TS Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_SERIAL_TS,String)
            End If
            If (Original_SERIAL_CW Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_SERIAL_CW,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal SERIAL_BH As String, ByVal SEQ_NO As Integer, ByVal SERIAL_CS As String, ByVal SERIAL_ITA As String, ByVal CREATED_WHEN As Date, ByVal SERIAL_TS As String, ByVal SERIAL_CW As String) As Integer
            If (SERIAL_BH Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SERIAL_BH")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(SERIAL_BH,String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(SEQ_NO,Integer)
            If (SERIAL_CS Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(SERIAL_CS,String)
            End If
            If (SERIAL_ITA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(SERIAL_ITA,String)
            End If
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(CREATED_WHEN,Date)
            If (SERIAL_TS Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(SERIAL_TS,String)
            End If
            If (SERIAL_CW Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(SERIAL_CW,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal SERIAL_BH As String,  _
                    ByVal SEQ_NO As Integer,  _
                    ByVal SERIAL_CS As String,  _
                    ByVal SERIAL_ITA As String,  _
                    ByVal CREATED_WHEN As Date,  _
                    ByVal SERIAL_TS As String,  _
                    ByVal SERIAL_CW As String,  _
                    ByVal Original_SERIAL_ID As Integer,  _
                    ByVal Original_SERIAL_BH As String,  _
                    ByVal Original_SEQ_NO As Integer,  _
                    ByVal Original_SERIAL_CS As String,  _
                    ByVal Original_SERIAL_ITA As String,  _
                    ByVal Original_CREATED_WHEN As Date,  _
                    ByVal Original_SERIAL_TS As String,  _
                    ByVal Original_SERIAL_CW As String,  _
                    ByVal SERIAL_ID As Integer) As Integer
            If (SERIAL_BH Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SERIAL_BH")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SERIAL_BH,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SEQ_NO,Integer)
            If (SERIAL_CS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(SERIAL_CS,String)
            End If
            If (SERIAL_ITA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(SERIAL_ITA,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(CREATED_WHEN,Date)
            If (SERIAL_TS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(SERIAL_TS,String)
            End If
            If (SERIAL_CW Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(SERIAL_CW,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_SERIAL_ID,Integer)
            If (Original_SERIAL_BH Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SERIAL_BH")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_SERIAL_BH,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_SEQ_NO,Integer)
            If (Original_SERIAL_CS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_SERIAL_CS,String)
            End If
            If (Original_SERIAL_ITA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_SERIAL_ITA,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_CREATED_WHEN,Date)
            If (Original_SERIAL_TS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_SERIAL_TS,String)
            End If
            If (Original_SERIAL_CW Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_SERIAL_CW,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(19).Value = CType(SERIAL_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal SERIAL_BH As String, ByVal SEQ_NO As Integer, ByVal SERIAL_CS As String, ByVal SERIAL_ITA As String, ByVal CREATED_WHEN As Date, ByVal SERIAL_TS As String, ByVal SERIAL_CW As String, ByVal Original_SERIAL_ID As Integer, ByVal Original_SERIAL_BH As String, ByVal Original_SEQ_NO As Integer, ByVal Original_SERIAL_CS As String, ByVal Original_SERIAL_ITA As String, ByVal Original_CREATED_WHEN As Date, ByVal Original_SERIAL_TS As String, ByVal Original_SERIAL_CW As String) As Integer
            Return Me.Update(SERIAL_BH, SEQ_NO, SERIAL_CS, SERIAL_ITA, CREATED_WHEN, SERIAL_TS, SERIAL_CW, Original_SERIAL_ID, Original_SERIAL_BH, Original_SEQ_NO, Original_SERIAL_CS, Original_SERIAL_ITA, Original_CREATED_WHEN, Original_SERIAL_TS, Original_SERIAL_CW, Original_SERIAL_ID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class V_SETTING_COLUMNSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "V_SETTING_COLUMNS"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("SEQ", "SEQ")
            tableMapping.ColumnMappings.Add("COLUMN_NAME", "COLUMN_NAME")
            tableMapping.ColumnMappings.Add("DATA_TYPE", "DATA_TYPE")
            tableMapping.ColumnMappings.Add("FORMAT_STRING", "FORMAT_STRING")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [MACHINE_COLUMNS] WHERE (([ID] = @Original_ID) AND ([SEQ] = @Original"& _ 
                "_SEQ) AND ([SCREEN_COLUMN_NAME] = @Original_COLUMN_NAME) AND ([DATA_TYPE] = @Ori"& _ 
                "ginal_DATA_TYPE) AND ((@IsNull_FORMAT_STRING = 1 AND [FORMAT_STRING] IS NULL) OR"& _ 
                " ([FORMAT_STRING] = @Original_FORMAT_STRING)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SEQ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEQ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COLUMN_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COLUMN_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DATA_TYPE", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATA_TYPE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FORMAT_STRING", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FORMAT_STRING", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FORMAT_STRING", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FORMAT_STRING", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [MACHINE_COLUMNS] SET [SEQ] = @SEQ, [SCREEN_COLUMN_NAME] = @COLUMN_NAME, ["& _ 
                "DATA_TYPE] = @DATA_TYPE, [FORMAT_STRING] = @FORMAT_STRING WHERE (([ID] = @Origin"& _ 
                "al_ID) AND ([SEQ] = @Original_SEQ) AND ([SCREEN_COLUMN_NAME] = @Original_COLUMN_"& _ 
                "NAME) AND ([DATA_TYPE] = @Original_DATA_TYPE) AND ((@IsNull_FORMAT_STRING = 1 AN"& _ 
                "D [FORMAT_STRING] IS NULL) OR ([FORMAT_STRING] = @Original_FORMAT_STRING)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SE"& _ 
                "LECT ID, SEQ, SCREEN_COLUMN_NAME AS COLUMN_NAME, DATA_TYPE, FORMAT_STRING FROM M"& _ 
                "ACHINE_COLUMNS WHERE (ID = @ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SEQ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEQ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COLUMN_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COLUMN_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATA_TYPE", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATA_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FORMAT_STRING", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FORMAT_STRING", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SEQ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEQ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COLUMN_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COLUMN_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DATA_TYPE", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATA_TYPE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FORMAT_STRING", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FORMAT_STRING", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FORMAT_STRING", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FORMAT_STRING", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.ihi_dfs_client.My.MySettings.Default.ihi_rhf5_developmentConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(2) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        ID, SEQ, SCREEN_COLUMN_NAME as COLUMN_NAME, DATA_TYPE, FORMAT_STRIN"& _ 
                "G"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            MACHINE_COLUMNS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT                      ID, SEQ, SCREEN_COLUMN_NAME AS COLUMN_NAME, DATA_TYPE"& _ 
                ", FORMAT_STRING"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM                         MACHINE_COLUMNS"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE            "& _ 
                "           (MACHINE_ID IN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                          (SELECT    "& _ 
                "                  ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                                FROM      "& _ 
                "                   MACHINE AS m"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                               "& _ 
                " WHERE                       (MACHINE_NAME LIKE @machineName)))"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@machineName", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT                      ID, SEQ, SCREEN_COLUMN_NAME AS COLUMN_NAME, DATA_TYPE"& _ 
                ", FORMAT_STRING"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM                         MACHINE_COLUMNS"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE            "& _ 
                "           (MACHINE_ID IN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                          (SELECT    "& _ 
                "                  ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                                FROM      "& _ 
                "                   MACHINE AS m"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                               "& _ 
                " WHERE                       (LINE_ID = @lineId) AND (MACHINE_NAME LIKE @machine"& _ 
                "Name)))"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@lineId", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@machineName", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ihi_rhf5_developmentDataSet.V_SETTING_COLUMNSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As ihi_rhf5_developmentDataSet.V_SETTING_COLUMNSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ihi_rhf5_developmentDataSet.V_SETTING_COLUMNSDataTable = New ihi_rhf5_developmentDataSet.V_SETTING_COLUMNSDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByByMachineName(ByVal dataTable As ihi_rhf5_developmentDataSet.V_SETTING_COLUMNSDataTable, ByVal machineName As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (machineName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("machineName")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(machineName,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByMachineName(ByVal machineName As String) As ihi_rhf5_developmentDataSet.V_SETTING_COLUMNSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (machineName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("machineName")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(machineName,String)
            End If
            Dim dataTable As ihi_rhf5_developmentDataSet.V_SETTING_COLUMNSDataTable = New ihi_rhf5_developmentDataSet.V_SETTING_COLUMNSDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByLineID_MachineName(ByVal dataTable As ihi_rhf5_developmentDataSet.V_SETTING_COLUMNSDataTable, ByVal lineId As Integer, ByVal machineName As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(lineId,Integer)
            If (machineName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("machineName")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(machineName,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByLineID_MachineName(ByVal lineId As Integer, ByVal machineName As String) As ihi_rhf5_developmentDataSet.V_SETTING_COLUMNSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(lineId,Integer)
            If (machineName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("machineName")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(machineName,String)
            End If
            Dim dataTable As ihi_rhf5_developmentDataSet.V_SETTING_COLUMNSDataTable = New ihi_rhf5_developmentDataSet.V_SETTING_COLUMNSDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As ihi_rhf5_developmentDataSet.V_SETTING_COLUMNSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As ihi_rhf5_developmentDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "V_SETTING_COLUMNS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID As Integer, ByVal Original_SEQ As Integer, ByVal Original_COLUMN_NAME As String, ByVal Original_DATA_TYPE As String, ByVal Original_FORMAT_STRING As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_SEQ,Integer)
            If (Original_COLUMN_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_COLUMN_NAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_COLUMN_NAME,String)
            End If
            If (Original_DATA_TYPE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DATA_TYPE")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_DATA_TYPE,String)
            End If
            If (Original_FORMAT_STRING Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_FORMAT_STRING,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal SEQ As Integer, ByVal COLUMN_NAME As String, ByVal DATA_TYPE As String, ByVal FORMAT_STRING As String, ByVal Original_ID As Integer, ByVal Original_SEQ As Integer, ByVal Original_COLUMN_NAME As String, ByVal Original_DATA_TYPE As String, ByVal Original_FORMAT_STRING As String, ByVal ID As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SEQ,Integer)
            If (COLUMN_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("COLUMN_NAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(COLUMN_NAME,String)
            End If
            If (DATA_TYPE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DATA_TYPE")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(DATA_TYPE,String)
            End If
            If (FORMAT_STRING Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(FORMAT_STRING,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_SEQ,Integer)
            If (Original_COLUMN_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_COLUMN_NAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_COLUMN_NAME,String)
            End If
            If (Original_DATA_TYPE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DATA_TYPE")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_DATA_TYPE,String)
            End If
            If (Original_FORMAT_STRING Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_FORMAT_STRING,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal SEQ As Integer, ByVal COLUMN_NAME As String, ByVal DATA_TYPE As String, ByVal FORMAT_STRING As String, ByVal Original_ID As Integer, ByVal Original_SEQ As Integer, ByVal Original_COLUMN_NAME As String, ByVal Original_DATA_TYPE As String, ByVal Original_FORMAT_STRING As String) As Integer
            Return Me.Update(SEQ, COLUMN_NAME, DATA_TYPE, FORMAT_STRING, Original_ID, Original_SEQ, Original_COLUMN_NAME, Original_DATA_TYPE, Original_FORMAT_STRING, Original_ID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class MACHINE_DATA_STR_w_SERIALTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "MACHINE_DATA_STR_w_SERIAL"
            tableMapping.ColumnMappings.Add("RESULT_ID", "RESULT_ID")
            tableMapping.ColumnMappings.Add("MACHINE_COLUMNS_ID", "MACHINE_COLUMNS_ID")
            tableMapping.ColumnMappings.Add("DATA", "DATA")
            tableMapping.ColumnMappings.Add("SERIAL_ID", "SERIAL_ID")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.ihi_dfs_client.My.MySettings.Default.ihi_rhf5_developmentConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(2) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT                      a.RESULT_ID, a.MACHINE_COLUMNS_ID, a.DATA, r.SERIAL_I"& _ 
                "D"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM                         MACHINE_DATA_STR AS a INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"              "& _ 
                "                        RESULT AS r ON a.RESULT_ID = r.TRAN_ID"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT                      a.RESULT_ID, a.MACHINE_COLUMNS_ID, a.DATA, r.SERIAL_I"& _ 
                "D"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM                         MACHINE_DATA_STR AS a INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"              "& _ 
                "                        RESULT AS r ON a.RESULT_ID = r.TRAN_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE           "& _ 
                "            (a.MACHINE_COLUMNS_ID IN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                          "& _ 
                "(SELECT                      ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                               "& _ 
                " FROM                         MACHINE_COLUMNS"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                 "& _ 
                "               WHERE                       (MACHINE_ID IN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                     "& _ 
                "                                                                     (SELECT    "& _ 
                "                  ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                                          "& _ 
                "                                      FROM                         MACHINE AS m"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                                                               "& _ 
                "                 WHERE                       (MACHINE_NAME LIKE @machineName))))"& _ 
                ")"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@machineName", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT                      a.RESULT_ID, a.MACHINE_COLUMNS_ID, a.DATA, r.SERIAL_I"& _ 
                "D"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM                         MACHINE_DATA_STR AS a INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"              "& _ 
                "                        RESULT AS r ON a.RESULT_ID = r.TRAN_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE           "& _ 
                "            (a.MACHINE_COLUMNS_ID IN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                          "& _ 
                "(SELECT                      ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                               "& _ 
                " FROM                         MACHINE_COLUMNS"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                 "& _ 
                "               WHERE                       (MACHINE_ID IN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                     "& _ 
                "                                                                     (SELECT    "& _ 
                "                  ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                                          "& _ 
                "                                      FROM                         MACHINE AS m"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                                                               "& _ 
                "                 WHERE                       (LINE_ID = @lineId) AND (MACHINE_NA"& _ 
                "ME LIKE @machineName)))))"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@lineId", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@machineName", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ihi_rhf5_developmentDataSet.MACHINE_DATA_STR_w_SERIALDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As ihi_rhf5_developmentDataSet.MACHINE_DATA_STR_w_SERIALDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ihi_rhf5_developmentDataSet.MACHINE_DATA_STR_w_SERIALDataTable = New ihi_rhf5_developmentDataSet.MACHINE_DATA_STR_w_SERIALDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByByMachineName(ByVal dataTable As ihi_rhf5_developmentDataSet.MACHINE_DATA_STR_w_SERIALDataTable, ByVal machineName As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (machineName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("machineName")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(machineName,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByMachineName(ByVal machineName As String) As ihi_rhf5_developmentDataSet.MACHINE_DATA_STR_w_SERIALDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (machineName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("machineName")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(machineName,String)
            End If
            Dim dataTable As ihi_rhf5_developmentDataSet.MACHINE_DATA_STR_w_SERIALDataTable = New ihi_rhf5_developmentDataSet.MACHINE_DATA_STR_w_SERIALDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByLineID_MachineName(ByVal dataTable As ihi_rhf5_developmentDataSet.MACHINE_DATA_STR_w_SERIALDataTable, ByVal lineId As Integer, ByVal machineName As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(lineId,Integer)
            If (machineName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("machineName")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(machineName,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByLineID_MachineName(ByVal lineId As Integer, ByVal machineName As String) As ihi_rhf5_developmentDataSet.MACHINE_DATA_STR_w_SERIALDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(lineId,Integer)
            If (machineName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("machineName")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(machineName,String)
            End If
            Dim dataTable As ihi_rhf5_developmentDataSet.MACHINE_DATA_STR_w_SERIALDataTable = New ihi_rhf5_developmentDataSet.MACHINE_DATA_STR_w_SERIALDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class LOT_PART_w_LOTTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "LOT_PART_w_LOT"
            tableMapping.ColumnMappings.Add("LOT_CS", "LOT_CS")
            tableMapping.ColumnMappings.Add("LOT_ITA", "LOT_ITA")
            tableMapping.ColumnMappings.Add("PART_NO", "PART_NO")
            tableMapping.ColumnMappings.Add("SEQ", "SEQ")
            tableMapping.ColumnMappings.Add("PART_LOT_NO", "PART_LOT_NO")
            tableMapping.ColumnMappings.Add("QTY", "QTY")
            tableMapping.ColumnMappings.Add("CREATED_WHEN", "CREATED_WHEN")
            tableMapping.ColumnMappings.Add("DATE", "DATE")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.ihi_dfs_client.My.MySettings.Default.ihi_rhf5_developmentConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(2) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT                      lt.LOT_CS, lt.LOT_ITA, ltp.PART_NO, ltp.SEQ, ltp.PART"& _ 
                "_LOT_NO, ltp.QTY, ltp.LOT_DATE_TIME AS DATE, ltp.CREATED_WHEN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM             "& _ 
                "            LOT_PART AS ltp INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                      LO"& _ 
                "T AS lt ON ltp.LOT_ID = lt.LOT_ID"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT                      lt.LOT_CS, lt.LOT_ITA, ltp.PART_NO, ltp.SEQ, ltp.PART"& _ 
                "_LOT_NO, ltp.QTY, ltp.LOT_DATE_TIME AS DATE, ltp.CREATED_WHEN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM             "& _ 
                "            LOT_PART AS ltp INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                      LO"& _ 
                "T AS lt ON ltp.LOT_ID = lt.LOT_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE  lt.LOT_CS=@LotCs"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LotCs", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_CS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT                      lt.LOT_CS, lt.LOT_ITA, ltp.PART_NO, ltp.SEQ, ltp.PART"& _ 
                "_LOT_NO, ltp.QTY, ltp.LOT_DATE_TIME AS DATE, ltp.CREATED_WHEN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM             "& _ 
                "            LOT_PART AS ltp INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                      LO"& _ 
                "T AS lt ON ltp.LOT_ID = lt.LOT_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE  lt.LOT_CS=@LotCs AND lt.LOT_ITA=@LotIt"& _ 
                "a"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LotCs", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_CS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LotIta", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_ITA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ihi_rhf5_developmentDataSet.LOT_PART_w_LOTDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As ihi_rhf5_developmentDataSet.LOT_PART_w_LOTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ihi_rhf5_developmentDataSet.LOT_PART_w_LOTDataTable = New ihi_rhf5_developmentDataSet.LOT_PART_w_LOTDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByLotCs(ByVal dataTable As ihi_rhf5_developmentDataSet.LOT_PART_w_LOTDataTable, ByVal LotCs As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (LotCs Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LotCs")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(LotCs,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByLotCs(ByVal LotCs As String) As ihi_rhf5_developmentDataSet.LOT_PART_w_LOTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (LotCs Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LotCs")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(LotCs,String)
            End If
            Dim dataTable As ihi_rhf5_developmentDataSet.LOT_PART_w_LOTDataTable = New ihi_rhf5_developmentDataSet.LOT_PART_w_LOTDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByLotCs_LotIta(ByVal dataTable As ihi_rhf5_developmentDataSet.LOT_PART_w_LOTDataTable, ByVal LotCs As String, ByVal LotIta As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (LotCs Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LotCs")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(LotCs,String)
            End If
            If (LotIta Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LotIta")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(LotIta,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByLotCs_LotIta(ByVal LotCs As String, ByVal LotIta As String) As ihi_rhf5_developmentDataSet.LOT_PART_w_LOTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (LotCs Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LotCs")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(LotCs,String)
            End If
            If (LotIta Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LotIta")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(LotIta,String)
            End If
            Dim dataTable As ihi_rhf5_developmentDataSet.LOT_PART_w_LOTDataTable = New ihi_rhf5_developmentDataSet.LOT_PART_w_LOTDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _lINE_MASTERTableAdapter As LINE_MASTERTableAdapter
        
        Private _mACHINETableAdapter As MACHINETableAdapter
        
        Private _mACHINE_COLUMNSTableAdapter As MACHINE_COLUMNSTableAdapter
        
        Private _mACHINE_DATA_STRTableAdapter As MACHINE_DATA_STRTableAdapter
        
        Private _rESULTTableAdapter As RESULTTableAdapter
        
        Private _sERIALTableAdapter As SERIALTableAdapter
        
        Private _v_SETTING_COLUMNSTableAdapter As V_SETTING_COLUMNSTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property LINE_MASTERTableAdapter() As LINE_MASTERTableAdapter
            Get
                Return Me._lINE_MASTERTableAdapter
            End Get
            Set
                Me._lINE_MASTERTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property MACHINETableAdapter() As MACHINETableAdapter
            Get
                Return Me._mACHINETableAdapter
            End Get
            Set
                Me._mACHINETableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property MACHINE_COLUMNSTableAdapter() As MACHINE_COLUMNSTableAdapter
            Get
                Return Me._mACHINE_COLUMNSTableAdapter
            End Get
            Set
                Me._mACHINE_COLUMNSTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property MACHINE_DATA_STRTableAdapter() As MACHINE_DATA_STRTableAdapter
            Get
                Return Me._mACHINE_DATA_STRTableAdapter
            End Get
            Set
                Me._mACHINE_DATA_STRTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property RESULTTableAdapter() As RESULTTableAdapter
            Get
                Return Me._rESULTTableAdapter
            End Get
            Set
                Me._rESULTTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property SERIALTableAdapter() As SERIALTableAdapter
            Get
                Return Me._sERIALTableAdapter
            End Get
            Set
                Me._sERIALTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property V_SETTING_COLUMNSTableAdapter() As V_SETTING_COLUMNSTableAdapter
            Get
                Return Me._v_SETTING_COLUMNSTableAdapter
            End Get
            Set
                Me._v_SETTING_COLUMNSTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._lINE_MASTERTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._lINE_MASTERTableAdapter.Connection) Is Nothing)) Then
                    Return Me._lINE_MASTERTableAdapter.Connection
                End If
                If ((Not (Me._mACHINETableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._mACHINETableAdapter.Connection) Is Nothing)) Then
                    Return Me._mACHINETableAdapter.Connection
                End If
                If ((Not (Me._mACHINE_COLUMNSTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._mACHINE_COLUMNSTableAdapter.Connection) Is Nothing)) Then
                    Return Me._mACHINE_COLUMNSTableAdapter.Connection
                End If
                If ((Not (Me._mACHINE_DATA_STRTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._mACHINE_DATA_STRTableAdapter.Connection) Is Nothing)) Then
                    Return Me._mACHINE_DATA_STRTableAdapter.Connection
                End If
                If ((Not (Me._rESULTTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._rESULTTableAdapter.Connection) Is Nothing)) Then
                    Return Me._rESULTTableAdapter.Connection
                End If
                If ((Not (Me._sERIALTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._sERIALTableAdapter.Connection) Is Nothing)) Then
                    Return Me._sERIALTableAdapter.Connection
                End If
                If ((Not (Me._v_SETTING_COLUMNSTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._v_SETTING_COLUMNSTableAdapter.Connection) Is Nothing)) Then
                    Return Me._v_SETTING_COLUMNSTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._lINE_MASTERTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._mACHINETableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._mACHINE_COLUMNSTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._mACHINE_DATA_STRTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._rESULTTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._sERIALTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._v_SETTING_COLUMNSTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As ihi_rhf5_developmentDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._lINE_MASTERTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.LINE_MASTER.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._lINE_MASTERTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._sERIALTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.SERIAL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._sERIALTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._mACHINETableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.MACHINE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._mACHINETableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._v_SETTING_COLUMNSTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.V_SETTING_COLUMNS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._v_SETTING_COLUMNSTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._rESULTTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.RESULT.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._rESULTTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._mACHINE_COLUMNSTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.MACHINE_COLUMNS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._mACHINE_COLUMNSTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._mACHINE_DATA_STRTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.MACHINE_DATA_STR.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._mACHINE_DATA_STRTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateInsertedRows(ByVal dataSet As ihi_rhf5_developmentDataSet, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._lINE_MASTERTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.LINE_MASTER.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._lINE_MASTERTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._sERIALTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.SERIAL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._sERIALTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._mACHINETableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.MACHINE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._mACHINETableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._v_SETTING_COLUMNSTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.V_SETTING_COLUMNS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._v_SETTING_COLUMNSTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._rESULTTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.RESULT.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._rESULTTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._mACHINE_COLUMNSTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.MACHINE_COLUMNS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._mACHINE_COLUMNSTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._mACHINE_DATA_STRTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.MACHINE_DATA_STR.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._mACHINE_DATA_STRTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateDeletedRows(ByVal dataSet As ihi_rhf5_developmentDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._mACHINE_DATA_STRTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.MACHINE_DATA_STR.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._mACHINE_DATA_STRTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._mACHINE_COLUMNSTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.MACHINE_COLUMNS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._mACHINE_COLUMNSTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._rESULTTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.RESULT.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._rESULTTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._v_SETTING_COLUMNSTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.V_SETTING_COLUMNS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._v_SETTING_COLUMNSTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._mACHINETableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.MACHINE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._mACHINETableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._sERIALTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.SERIAL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._sERIALTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._lINE_MASTERTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.LINE_MASTER.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._lINE_MASTERTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function UpdateAll(ByVal dataSet As ihi_rhf5_developmentDataSet) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._lINE_MASTERTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._lINE_MASTERTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._mACHINETableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._mACHINETableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._mACHINE_COLUMNSTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._mACHINE_COLUMNSTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._mACHINE_DATA_STRTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._mACHINE_DATA_STRTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._rESULTTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._rESULTTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._sERIALTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._sERIALTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._v_SETTING_COLUMNSTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._v_SETTING_COLUMNSTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)()
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)()
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet()
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._lINE_MASTERTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._lINE_MASTERTableAdapter, Me._lINE_MASTERTableAdapter.Connection)
                    Me._lINE_MASTERTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._lINE_MASTERTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._lINE_MASTERTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._lINE_MASTERTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._lINE_MASTERTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._mACHINETableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._mACHINETableAdapter, Me._mACHINETableAdapter.Connection)
                    Me._mACHINETableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._mACHINETableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._mACHINETableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._mACHINETableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._mACHINETableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._mACHINE_COLUMNSTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._mACHINE_COLUMNSTableAdapter, Me._mACHINE_COLUMNSTableAdapter.Connection)
                    Me._mACHINE_COLUMNSTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._mACHINE_COLUMNSTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._mACHINE_COLUMNSTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._mACHINE_COLUMNSTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._mACHINE_COLUMNSTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._mACHINE_DATA_STRTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._mACHINE_DATA_STRTableAdapter, Me._mACHINE_DATA_STRTableAdapter.Connection)
                    Me._mACHINE_DATA_STRTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._mACHINE_DATA_STRTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._mACHINE_DATA_STRTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._mACHINE_DATA_STRTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._mACHINE_DATA_STRTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._rESULTTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._rESULTTableAdapter, Me._rESULTTableAdapter.Connection)
                    Me._rESULTTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._rESULTTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._rESULTTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._rESULTTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._rESULTTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._sERIALTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._sERIALTableAdapter, Me._sERIALTableAdapter.Connection)
                    Me._sERIALTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._sERIALTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._sERIALTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._sERIALTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._sERIALTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._v_SETTING_COLUMNSTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._v_SETTING_COLUMNSTableAdapter, Me._v_SETTING_COLUMNSTableAdapter.Connection)
                    Me._v_SETTING_COLUMNSTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._v_SETTING_COLUMNSTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._v_SETTING_COLUMNSTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._v_SETTING_COLUMNSTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._v_SETTING_COLUMNSTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._lINE_MASTERTableAdapter) Is Nothing) Then
                    Me._lINE_MASTERTableAdapter.Connection = CType(revertConnections(Me._lINE_MASTERTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._lINE_MASTERTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._mACHINETableAdapter) Is Nothing) Then
                    Me._mACHINETableAdapter.Connection = CType(revertConnections(Me._mACHINETableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._mACHINETableAdapter.Transaction = Nothing
                End If
                If (Not (Me._mACHINE_COLUMNSTableAdapter) Is Nothing) Then
                    Me._mACHINE_COLUMNSTableAdapter.Connection = CType(revertConnections(Me._mACHINE_COLUMNSTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._mACHINE_COLUMNSTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._mACHINE_DATA_STRTableAdapter) Is Nothing) Then
                    Me._mACHINE_DATA_STRTableAdapter.Connection = CType(revertConnections(Me._mACHINE_DATA_STRTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._mACHINE_DATA_STRTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._rESULTTableAdapter) Is Nothing) Then
                    Me._rESULTTableAdapter.Connection = CType(revertConnections(Me._rESULTTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._rESULTTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._sERIALTableAdapter) Is Nothing) Then
                    Me._sERIALTableAdapter.Connection = CType(revertConnections(Me._sERIALTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._sERIALTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._v_SETTING_COLUMNSTableAdapter) Is Nothing) Then
                    Me._v_SETTING_COLUMNSTableAdapter.Connection = CType(revertConnections(Me._v_SETTING_COLUMNSTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._v_SETTING_COLUMNSTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Private Function GetRoot(ByVal row As Global.System.Data.DataRow, ByRef distance As Integer) As Global.System.Data.DataRow
                Global.System.Diagnostics.Debug.Assert((Not (row) Is Nothing))
                Dim root As Global.System.Data.DataRow = row
                distance = 0

                Dim traversedRows As Global.System.Collections.Generic.IDictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow) = New Global.System.Collections.Generic.Dictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow)()
                traversedRows(row) = row

                Dim parent As Global.System.Data.DataRow = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (parent) Is Nothing)  _
                            AndAlso (traversedRows.ContainsKey(parent) = false))
                    distance = (distance + 1)
                    root = parent
                    traversedRows(parent) = parent
                    parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop

                If (distance = 0) Then
                    traversedRows.Clear
                    traversedRows(row) = row
                    parent = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Do While ((Not (parent) Is Nothing)  _
                                AndAlso (traversedRows.ContainsKey(parent) = false))
                        distance = (distance + 1)
                        root = parent
                        traversedRows(parent) = parent
                        parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If

                Return root
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                Dim distance1 As Integer = 0
                Dim root1 As Global.System.Data.DataRow = Me.GetRoot(row1, distance1)

                Dim distance2 As Integer = 0
                Dim root2 As Global.System.Data.DataRow = Me.GetRoot(row2, distance2)

                If Object.ReferenceEquals(root1, root2) Then
                    Return (Me._childFirst * distance1.CompareTo(distance2))
                Else
                    Global.System.Diagnostics.Debug.Assert(((Not (root1.Table) Is Nothing)  _
                                    AndAlso (Not (root2.Table) Is Nothing)))
                    If (root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2)) Then
                        Return -1
                    Else
                        Return 1
                    End If
                End If
            End Function
        End Class
    End Class
End Namespace
